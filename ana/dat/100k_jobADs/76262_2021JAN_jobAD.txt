"﻿ Moje oferty pracy | NASHAPolshaToggle navigationPL / UA1 USD = 3,7255 PLN1 EUR = 4,5354 PLN1 = PLN1 USD = 28,2561 UAH1 EUR = 34,3651 UAH1 PLN = 7,5874 UAH1 USD = 3,7255 PLN; 1 EUR = 4,5354 PLN; 1 = PLN | 1 USD = 28,2561 UAH; 1 EUR = 34,3651 UAH; 1 PLN = 7,5874 UAHСтаттіНовиниПольщаУкраїнаРобота в ПольщіНадзвичайні подіїЕкономіка/ФінансиКультураСуспільствоСпортМузикаМедицинаВажливі адресиPraca/Робота в ПольщіMoje oferty / Мої вакансіїDodaj ofertę / Додати вакансіюWszystkie oferty/ВакансіїOgłoszenia/ОголошенняMoje ogłoszeniaDodaj ogłoszenie / Додати оголошенняWszystkie ogłoszenia/ОголошенняTwoja reklamaБлогRejestracja/РеєстраціяУвійтиMoje oferty pracyLog in with FacebookorUsername PasswordRemember MeRegisterTwoja reklamaПро насPOLITYKA PRYWATNOŚCI / ПОЛІТИКА ПРИВАТНОСТІPOLITYKA PRYWATNOŚCIПОЛІТИКА ПРИВАТНОСТІREGULAMIN / ПОЛОЖЕННЯREGULAMINПРАВИЛА ТА УМОВИКонтактиПри цитуванні і використанні будь-яких матеріалів в Інтернеті відкриті для пошукових систем гіперпосилання не нижче першого абзацу на “NashaPolsha” — обов’язкові. Матеріали з маркуванням «Реклама» публікуються на правах реклами. За зміст рекламної інформації відповідальність несе рекламодавець. Усі права захищені. ©ОбъявленияРаботаМедицина` const $currency = document.querySelector('.informerweather') const $newCurrency = $currency.cloneNode(true) $currency.style.display= 'none' $newCurrency.classList.add('new-currency') $newHeader.insertAdjacentElement(\"beforeend\", $newCurrency) const $lang = document.querySelector('#pl_menu_lang') $lang.style.display = 'none' const newLangHTML = `PL / UA` $newHeader.insertAdjacentHTML(\"beforeend\", newLangHTML) topMenuBtnHTML = `` $newHeader.insertAdjacentHTML(\"beforeend\", topMenuBtnHTML) topMenuCloseBtnHTML = `` $newHeader.insertAdjacentHTML(\"beforeend\", topMenuCloseBtnHTML) document.body.insertAdjacentElement(\"afterBegin\", $newHeader) const newHeaderStyles = window.getComputedStyle($newHeader) const newHeaderHeight = parseInt(newHeaderStyles.height) //foot-menu const $otherBtn = document.querySelector('.a-foot-menu.other') const $main = document.querySelector('#main') const $footMenuDiv = document.querySelector('.foot-menu-div') const footMenuDivStyles = getComputedStyle($footMenuDiv) console.log('footMenuDivStyles', footMenuDivStyles.height) const $menu = document.querySelector('.menus-wrap') $menu.style.bottom = footMenuDivStyles.height let prevScrollTop = 0 let isNavItemsInited = false function initNavItems(){ const $navItems = document.querySelectorAll('.navbar-collapse.nav-collapse') $navItems.forEach($item=>{ $item.classList.remove(\"collapse\") $item.classList.add(\"in\") }) } const $topMenuItem = document.querySelector('.top-menu-item') const $topCloseItem = document.querySelector('.top-close-item') $topMenuItem.addEventListener(\"click\", (e)=>{ e.stopPropagation(e) menuClicked(e) }) $topCloseItem.addEventListener(\"click\", (e)=>{ e.stopPropagation(e) menuClicked(e) }) function fixHeader(){ $newHeader.style.position = 'fixed'; $topMenuItem.classList.add('closed') $topCloseItem.classList.add('opened') } function unfixHeader(){ $newHeader.style.position = 'static'; $topMenuItem.classList.remove('closed') $topCloseItem.classList.remove('opened') } function menuClicked(e){ e.stopPropagation() if(!isNavItemsInited){ initNavItems() isNavItemsInited = true } $menu.classList.toggle(\"in\"); $menu.style.top = newHeaderStyles.height $main.classList.toggle(\"cover\"); if($menu.classList.contains(\"in\")){ fixPage() fixHeader() //if(document.documentElement.clientHeight < 500){ //$menu.classList.add(\"vert-open\") //} } else{ unfixPage() unfixHeader() //if(document.documentElement.clientHeight < 500){ //$menu.classList.remove(\"vert-open\") //} } } $otherBtn.addEventListener(\"click\", (e)=>{ menuClicked(e) }) function fixPage(isAd){ const scrollTop = window.pageYOffset $page.style.top = newHeaderHeight - scrollTop + \"px\" $page.style.position = \"fixed\" prevScrollTop = scrollTop if(isAd) $footMenuDiv.style.position = 'static' } function unfixPage(isAd){ $page.style.position = \"relative\" $page.style.top = \"0px\" window.scrollTo(0, prevScrollTop) if(isAd) $footMenuDiv.style.position = 'fixed' } const $page = document.querySelector('.kleo-page') $page.addEventListener('click', (e)=>{ if($menu.classList.contains('in')){ $menu.classList.remove('in') $main.classList.remove('cover') unfixPage() } }) const $caret = document.querySelector('.caret') $caret.addEventListener('click', ()=>{ $menu.classList.toggle(\"open\") }) $menu.addEventListener('click', (e)=>{ e.stopPropagation() }) $menu.addEventListener('touchstart', (e)=>{ e.stopPropagation() }) $footMenuDiv.addEventListener('click', (e)=>{ e.stopPropagation() }) $footMenuDiv.addEventListener('touchstart', (e)=>{ e.stopPropagation() }) /* //ad-item window.onload = ()=>{ if(document.documentElement.clientWidth > 700){ console.log('return') return } console.log('loaded') if(sessionStorage.getItem('touched')){ console.log('touched') return } const $adItem = document.querySelector('.ad-item') $adItem.classList.add('loaded') const $ad = document.querySelector('.ad-item .adsbygoogle') $ad.style['margin-left'] = 0 console.log('$ad', $ad) const $close = document.querySelector('.init-close') $close.classList.replace('init-close', 'close-item') const closeAd = (e)=>{ e.stopPropagation() $adItem.classList.remove('open') setTimeout(()=>{ $adItem.style.display = 'none' }, 0) window.removeEventListener('scroll', scroll) unfixPage(true) } $close.addEventListener('click', closeAd) function scroll(){ $close.style.top = window.pageYOffset + 5 + 'px' } function copyAd(selector){ console.log(document.querySelector(\"section.container-wrap.main-color .adsbygoogle\")) const $copiedAd = document.querySelector('.copied-ad') //const $ads = document.querySelector(\"section.container-wrap.main-color .adsbygoogle\"); //const $ads = document.querySelector(\".ad-item .adsbygoogle\"); const $ads = document.querySelector(selector); //$ads.style['margin-left'] = 0 //$ad.style['margin-left'] = 0 console.log($ads.firstChild.firstChild.hasChildNodes()) if(!$ads.firstChild.firstChild.hasChildNodes()){ return false } const $clonedAd = $ads.cloneNode(true) $clonedAd.style['margin-left'] = 0 $copiedAd.appendChild($clonedAd) const clientHeight = document.documentElement.clientHeight const adStyles = window.getComputedStyle($ad) //$ads??? const clonedAdStyles = window.getComputedStyle($clonedAd) const adHeight = parseInt(adStyles.height) const clonedAdHeight = parseInt(clonedAdStyles.height) const $rest = document.querySelector('.rest') $rest.style.height = clientHeight - adHeight - clonedAdHeight + 'px' console.log('heights', clientHeight, adHeight, clonedAdHeight) return true } document.body.addEventListener(\"touchstart\", ()=>{ if(!copyAd('.ad-item .adsbygoogle')){ console.log('no copy') if(!copyAd('section.container-wrap.main-color .adsbygoogle')){ console.log('no copy') return } } $ad.style['margin-left'] = 0 $adItem.classList.add('open') window.addEventListener('scroll', scroll) fixPage(true) sessionStorage.setItem('touched', true) }, {once: true}) } */ActionsMenu	Selected media actions	<# } #><# } #><# if ( data.message ) { #>{{ data.message }}<# } #>Drop files to uploadorSelect FilesMaximum upload file size: 128 MB.	<# if ( data.suggestedWidth && data.suggestedHeight ) { #>Suggested image dimensions: {{data.suggestedWidth}} by {{data.suggestedHeight}} pixels.	<# } #>Grid ViewDismiss Errors/ –{{ data.message }}<# if ( ! data.hasNext ) { #> disabled<# } #>>Edit next media itemClose dialog<# if ( data.uploading ) { #><# } else if ( data.sizes && data.sizes.large ) { #> <# } else if ( data.sizes && data.sizes.full ) { #> <# } else if ( -1 === jQuery.inArray( data.type, [ 'audio', 'video' ] ) ) { #> <# } #> <# if ( 'audio' === data.type ) { #><# } else if ( 'video' === data.type ) { var w_rule = ''; if ( data.width ) { w_rule = 'width: ' + data.width + 'px;'; } else if ( wp.media.view.settings.contentWidth ) { w_rule = 'width: ' + wp.media.view.settings.contentWidth + 'px;'; } #><# if ( data.width ) { #>width=\"{{ data.width }}\"<# } #> <# if ( data.height ) { #>height=\"{{ data.height }}\"<# } #> <# if ( data.image && data.image.src !== data.icon ) { #>poster=\"{{ data.image.src }}\"<# } #>><# } #><# if ( 'image' === data.type && ! data.uploading && data.sizes && data.can.save ) { #>Edit Image<# } else if ( 'pdf' === data.subtype && data.sizes ) { #>Document Preview<# } #>Saved.DetailsFile name: {{ data.filename }}File type: {{ data.mime }}Uploaded on: {{ data.dateFormatted }}File size: {{ data.filesizeHumanReadable }}<# if ( 'image' === data.type && ! data.uploading ) { #> <# if ( data.width && data.height ) { #>Dimensions: {{ data.width }} by {{ data.height }} pixels	<# } #> <# } #> <# if ( data.fileLength && data.fileLengthHumanReadable ) { #>Length: {{ data.fileLength }} {{ data.fileLengthHumanReadable }}<# } #> <# if ( 'audio' === data.type && data.meta.bitrate ) { #>Bitrate: {{ Math.round( data.meta.bitrate / 1000 ) }}kb/s <# if ( data.meta.bitrate_mode ) { #> {{ ' ' + data.meta.bitrate_mode.toUpperCase() }} <# } #><# } #><# if ( data.compat && data.compat.meta ) { #> {{{ data.compat.meta }}} <# } #><# var maybeReadOnly = data.can.save || data.allowLocalEdits ? '' : 'readonly'; #> <# if ( 'image' === data.type ) { #> Alternative TextDescribe the purpose of the image (opens in a new tab). Leave empty if the image is purely decorative.<# } #> Title <# if ( 'audio' === data.type ) { #> Artist Album <# } #> Caption{{ data.caption }}Description{{ data.description }}Uploaded By {{ data.authorName }} <# if ( data.uploadedToTitle ) { #> Uploaded To <# if ( data.uploadedToLink ) { #> {{ data.uploadedToTitle }} <# } else { #> {{ data.uploadedToTitle }} <# } #> <# } #> Copy LinkView attachment page <# if ( data.can.save ) { #> | Edit more details <# } #> <# if ( ! data.uploading && data.can.remove ) { #> |Delete Permanently<# } #><# } else if ( 'image' === data.type && data.sizes ) { #><# } else { #><# if ( data.image && data.image.src && data.image.src !== data.icon ) { #> <# } else if ( data.sizes && data.sizes.medium ) { #> <# } else { #> <# } #>{{ data.filename }}<# } #><# if ( data.buttons.close ) { #>Remove<# } #><# if ( data.buttons.check ) { #>Deselect<# } #> <# var maybeReadOnly = data.can.save || data.allowLocalEdits ? '' : 'readonly'; if ( data.describe ) { if ( 'image' === data.type ) { #> <# } else { #> <# if ( 'video' === data.type ) { #> aria-label=\"Video title\" placeholder=\"Video title…\" <# } else if ( 'audio' === data.type ) { #> aria-label=\"Audio title\" placeholder=\"Audio title…\" <# } else { #> aria-label=\"Media title\" placeholder=\"Media title…\" <# } #> {{ maybeReadOnly }} /> <# } } #> Saved.<# if ( data.uploading ) { #><# } else if ( 'image' === data.type && data.sizes ) { #> <# } else { #> <# } #>{{ data.filename }}{{ data.dateFormatted }}{{ data.filesizeHumanReadable }}<# if ( 'image' === data.type && ! data.uploading ) { #> <# if ( data.width && data.height ) { #>{{ data.width }} by {{ data.height }} pixels	<# } #> <# if ( data.can.save && data.sizes ) { #> Edit Image <# } #> <# } #> <# if ( data.fileLength && data.fileLengthHumanReadable ) { #>Length:	{{ data.fileLength }} {{ data.fileLengthHumanReadable }}<# } #> <# if ( ! data.uploading && data.can.remove ) { #>Delete Permanently<# } #><# if ( data.compat && data.compat.meta ) { #> {{{ data.compat.meta }}} <# } #><# var maybeReadOnly = data.can.save || data.allowLocalEdits ? '' : 'readonly'; #> <# if ( 'image' === data.type ) { #> Alt TextDescribe the purpose of the image (opens in a new tab). Leave empty if the image is purely decorative.<# } #> Title <# if ( 'audio' === data.type ) { #> Artist Album <# } #> Caption{{ data.caption }}Description{{ data.description }}Copy Link <# if ( data.editable ) { #>Edit Selection<# } #> <# if ( data.clearable ) { #>Clear<# } #><# if ( 'image' === data.type ) { #> Alignment <# if ( data.userSettings ) { #> data-user-setting=\"align\" <# } #>> Left	Center	Right	None	 <# } #> <# if ( data.model.canEmbed ) { #> Embed or Link	<# } else { #> Link To	<# } #> <# if ( data.userSettings && ! data.model.canEmbed ) { #> data-user-setting=\"urlbutton\" <# } #>> <# if ( data.model.canEmbed ) { #> Embed Media Player	<# } else { #> None	<# } #> <# if ( data.model.canEmbed ) { #> Link to Media File	<# } else { #> Media File	<# } #> <# if ( data.model.canEmbed ) { #> Link to Attachment Page	<# } else { #> Attachment Page	<# } #> <# if ( 'image' === data.type ) { #> Custom URL	<# } #> URL <# if ( 'undefined' !== typeof data.sizes ) { #> Size <# if ( data.userSettings ) { #> data-user-setting=\"imgsize\" <# } #>> <# var size = data.sizes['thumbnail']; if ( size ) { #> Thumbnail – {{ size.width }} × {{ size.height }} <# } #> <# var size = data.sizes['medium']; if ( size ) { #> Medium – {{ size.width }} × {{ size.height }} <# } #> <# var size = data.sizes['large']; if ( size ) { #> Large – {{ size.width }} × {{ size.height }} <# } #> <# var size = data.sizes['full']; if ( size ) { #> Full Size – {{ size.width }} × {{ size.height }} <# } #> <# } #>Link To <# if ( data.userSettings ) { #> data-user-setting=\"urlbutton\" <# } #>> <# if ( ! wp.media.galleryDefaults.link || 'post' == wp.media.galleryDefaults.link ) { #>selected=\"selected\"<# } #>> Attachment Page	<# if ( 'file' == wp.media.galleryDefaults.link ) { #>selected=\"selected\"<# } #>> Media File	<# if ( 'none' == wp.media.galleryDefaults.link ) { #>selected=\"selected\"<# } #>> None	 Columns <# if ( 1 == wp.media.galleryDefaults.columns ) { #>selected=\"selected\"<# } #>> 1	<# if ( 2 == wp.media.galleryDefaults.columns ) { #>selected=\"selected\"<# } #>> 2	<# if ( 3 == wp.media.galleryDefaults.columns ) { #>selected=\"selected\"<# } #>> 3	<# if ( 4 == wp.media.galleryDefaults.columns ) { #>selected=\"selected\"<# } #>> 4	<# if ( 5 == wp.media.galleryDefaults.columns ) { #>selected=\"selected\"<# } #>> 5	<# if ( 6 == wp.media.galleryDefaults.columns ) { #>selected=\"selected\"<# } #>> 6	<# if ( 7 == wp.media.galleryDefaults.columns ) { #>selected=\"selected\"<# } #>> 7	<# if ( 8 == wp.media.galleryDefaults.columns ) { #>selected=\"selected\"<# } #>> 8	<# if ( 9 == wp.media.galleryDefaults.columns ) { #>selected=\"selected\"<# } #>> 9	 Random Order Size <# if ( data.userSettings ) { #> data-user-setting=\"imgsize\" <# } #> > Thumbnail	Medium	Large	Full Size	<# var emptyModel = _.isEmpty( data.model ), isVideo = 'video' === data.controller.get('library').props.get('type'); #> <# if ( emptyModel ) { #> checked=\"checked\" <# } #> /> <# if ( isVideo ) { #> Show Video List	<# } else { #> Show Tracklist	<# } #> <# if ( ! isVideo ) { #> <# if ( emptyModel ) { #> checked=\"checked\" <# } #> /> Show Artist Name in Tracklist	 <# } #> <# if ( emptyModel ) { #> checked=\"checked\" <# } #> /> Show Images	Alternative TextDescribe the purpose of the image (opens in a new tab). Leave empty if the image is purely decorative.CaptionAlignLeft	Center	Right	None	Link ToImage URL	Custom URL	None	URLDescribe the purpose of the image (opens in a new tab). Leave empty if the image is purely decorative.Caption{{ data.model.caption }}Display SettingsAlignLeft	Center	Right	None	<# if ( data.attachment ) { #> <# if ( 'undefined' !== typeof data.attachment.sizes ) { #> Size <# if ( data.userSettings ) { #> data-user-setting=\"imgsize\" <# } #>> <# var size = data.sizes['thumbnail']; if ( size ) { #> Thumbnail – {{ size.width }} × {{ size.height }} <# } #> <# var size = data.sizes['medium']; if ( size ) { #> Medium – {{ size.width }} × {{ size.height }} <# } #> <# var size = data.sizes['large']; if ( size ) { #> Large – {{ size.width }} × {{ size.height }} <# } #> <# var size = data.sizes['full']; if ( size ) { #> Full Size – {{ size.width }} × {{ size.height }} <# } #> Custom Size	 <# } #>Width × HeightImage size in pixels<# } #> Link To <# if ( data.attachment ) { #> Media File	Attachment Page	<# } else { #> Image URL	<# } #> Custom URL	None	 URLAdvanced OptionsImage Title Attribute Image CSS Class<# if ( data.model.linkTargetBlank ) { #>checked=\"checked\"<# } #>> Open link in a new tab Link Rel Link CSS Class<# if ( data.attachment && window.imageEdit ) { #><# } #><# if ( ! _.isEmpty( data.model.src ) ) { ext = data.model.src.split('.').pop(); if ( html5types[ ext ] ) { delete html5types[ ext ]; } #> URLRemove audio source<# } #> <# if ( ! _.isEmpty( data.model.mp3 ) ) { if ( ! _.isUndefined( html5types.mp3 ) ) { delete html5types.mp3; } #> MP3Remove audio source<# } #> <# if ( ! _.isEmpty( data.model.ogg ) ) { if ( ! _.isUndefined( html5types.ogg ) ) { delete html5types.ogg; } #> OGGRemove audio source<# } #> <# if ( ! _.isEmpty( data.model.flac ) ) { if ( ! _.isUndefined( html5types.flac ) ) { delete html5types.flac; } #> FLACRemove audio source<# } #> <# if ( ! _.isEmpty( data.model.m4a ) ) { if ( ! _.isUndefined( html5types.m4a ) ) { delete html5types.m4a; } #> M4ARemove audio source<# } #> <# if ( ! _.isEmpty( data.model.wav ) ) { if ( ! _.isUndefined( html5types.wav ) ) { delete html5types.wav; } #> WAVRemove audio source<# } #> <# if ( ! _.isEmpty( html5types ) ) { #>Add alternate sources for maximum HTML5 playback <# _.each( html5types, function (mime, type) { #>{{ type }}<# } ) #><# } #>PreloadAutoMetadataNoneAutoplay Loop<# if ( ! _.isEmpty( data.model.src ) ) { ext = data.model.src.split('.').pop(); if ( html5types[ ext ] ) { delete html5types[ ext ]; } #> URLRemove video source<# } #> <# if ( ! _.isEmpty( data.model.mp4 ) ) { if ( ! _.isUndefined( html5types.mp4 ) ) { delete html5types.mp4; } #> MP4Remove video source<# } #> <# if ( ! _.isEmpty( data.model.m4v ) ) { if ( ! _.isUndefined( html5types.m4v ) ) { delete html5types.m4v; } #> M4VRemove video source<# } #> <# if ( ! _.isEmpty( data.model.webm ) ) { if ( ! _.isUndefined( html5types.webm ) ) { delete html5types.webm; } #> WEBMRemove video source<# } #> <# if ( ! _.isEmpty( data.model.ogv ) ) { if ( ! _.isUndefined( html5types.ogv ) ) { delete html5types.ogv; } #> OGVRemove video source<# } #> <# if ( ! _.isEmpty( data.model.flv ) ) { if ( ! _.isUndefined( html5types.flv ) ) { delete html5types.flv; } #> FLVRemove video source<# } #><# if ( ! _.isEmpty( html5types ) ) { #>Add alternate sources for maximum HTML5 playback <# _.each( html5types, function (mime, type) { #>{{ type }}<# } ) #><# } #> <# if ( ! _.isEmpty( data.model.poster ) ) { #> Poster ImageRemove poster image<# } #>PreloadAutoMetadataNoneAutoplay Loop <# var content = ''; if ( ! _.isEmpty( data.model.content ) ) { var tracks = jQuery( data.model.content ).filter( 'track' ); _.each( tracks.toArray(), function( track, index ) { content += track.outerHTML; #> Tracks (subtitles, captions, descriptions, chapters, or metadata) The srclang, label, and kind values can be edited to set the video track language and kind.	Remove video track<# } ); #> <# } else { #> Tracks (subtitles, captions, descriptions, chapters, or metadata)There are no associated subtitles. <# } #>{{ content }}<# if ( attachment.caption ) { #>{{{ data.verifyHTML( attachment.caption ) }}}<# } #><# if ( index % data.columns === data.columns - 1 ) { #><# } #> <# } ); #><# } else { #>No items found.<# } #>As a browser icon<# print( 'NASHAPolsha' ) #>As an app iconLog in with FacebookorLog in with your credentialsor Create an accountSign inRemember me Lost your password?Forgot your details?Reset PasswordI remember my detailsLog in with FacebookorCreate AccountRegister"
