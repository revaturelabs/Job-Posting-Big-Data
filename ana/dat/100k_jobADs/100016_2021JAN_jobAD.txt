"eml-software DocumentationModule Documentation: eml-softwareBack to EML ContentsThe eml-software module - Software specific informationThe eml-software module contains general information that describes software resources. This module is intended to fully document software that is needed in order to view a resource (such as a dataset) or to process a dataset. The software module is also imported into the eml-methods module in order to document what software was used to process or perform quality control procedures on a dataset.The eml-software module, like other modules, may be \"referenced\" via the <references> tag. This allows a software resource to be described once, and then used as a reference in other locations within the EML document via its ID.Module detailsRecommended Usage: All datasets where software was used in the analysis or creation of the dataset.Stand-alone: yesImports: eml-documentation, eml-resource, eml-access, eml-project, eml-physicalImported By:View an image of the schema: eml-software imageElement Definitions:softwareThis element has no default value.Content of this field: Description of this field:Type: SoftwareTypeThe software element contains general information about a software resource that is being documented. This field is intended to give information for software tools that are needed to interpret a dataset, software that was written to process a resource, or software as a resource in itself. It is based on eml-resource and Open Software Description (OSD) a W3C submission. There can be multiple implementations within a software package because a physical software package can run on multiple hardware and/or operating systems. See implementation element documentation for a more thorough explanation.implementationThis element has no default value.Content of this field: Description of this field:Elements: Use: How many:A sequence of (distribution required unboundedsize optionallanguage optional unboundedoperatingSystem optional unboundedmachineProcessor optional unboundedvirtualMachine optionaldiskUsage optionalruntimeMemoryUsage optionalprogrammingLanguage optional unboundedchecksum optionaldependency optional unbounded)Implementation describes the hardware, operating system resources a package runs on. Note, a package can have multiple implementations. So for example, a package may be written in java and the package may run on numerous hardware and/or operating systems like Pentium/Linux, Pentium/NT and so on. Hardware and Software descriptions that have different requirements can be placed here.Example(s):Please see the examples for each sub-element of the implementation type.distributionThis element has no default value.Content of this field: Description of this field:Type: phys:PhysicalDistributionTypeThis field provides information on how the resource is distributed online and offline. Connections to online systems can be described as URLs and as a list of relevant connection parameters.sizeThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeThe physical size of an implementation on disk.Example(s):100 MegabyteslanguageThis element has no default value.Content of this field: Description of this field:Elements: Use: How many:A sequence of (LanguageValue requiredLanguageCodeStandard optional)The International Language of the software implementation.LanguageValueThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeThe actual value for the language or a code for the language.Example(s):englishengLanguageCodeStandardThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeThe International Language Code being used in the field languageValue. See http://www.loc.gov/standards/iso639-2/Example(s):ISO639-2operatingSystemThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeThe operating system(s) an implementation runs on.Example(s):LinuxWindows 95Windows NT4Windows XPSun Solaris 2.8Mac OS XmachineProcessorThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeThe Machine Processor required for executing the implementation.Example(s):Pentium IIIntel 486SUN SparcMotorolavirtualMachineThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeThe virtual machine that the implementation requires.Example(s):Java Virtual Machine 1.2diskUsageThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeThe minimum amount of Disk Space required to install this implementation.Example(s):220 Megabytes15 MB100 kBruntimeMemoryUsageThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeThe minimum amount of memory required to run an implementation.Example(s):32 Megabytes128 MBprogrammingLanguageThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeThe computer programming language the software package was programmed in.Example(s):C++JavaCC#PerlCobolFortranLispVisual BasicVBABourne Shell ScriptchecksumThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeThe generated checksum value of a software package that is a self-contained module.Example(s):$sum software.jar 27021 22660licenseURLThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeURL where the license can be foundlicenseThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeText of the licenseversionThis element has no default value.Content of this field: Description of this field:Type: res:NonEmptyStringTypeString value corresponding to the major, minor, custom, and build version.projectThis element has no default value.Content of this field: Description of this field:Type: proj:ResearchProjectTypeThis field is a description of the project with which this software product is related. Please see the eml-project module for more information.dependencyThis element has no default value.Content of this field: Description of this field:Elements: Use: How many:A sequence of (action requiredsoftware required)The dependency element is recursive. It is a sub-element of the software Element but it also has as a sub-element its parent element Software Package. Dependency has been made optional because to make it mandatory does not allow the recursion to end. Dependency has also been made a sub-element of implementation because there can be both implementation and package level dependencies within a package.actionThis element has no default value.Content of this field: Description of this field:Type: ActionThis element and its enumerations of assert and install can be used as commands by a software application to carry out these actions on software package dependencies. This is a change from how we have used all previous elements within eml. Up until now all other elements have been simply metadata designed to describe data, literature citations, etc... with the Action element we can use this module as a command to carry out the action.Attribute Definitions:idType: res:IDTypeUse: optionalsystemType: res:SystemTypeUse: optionalscopeType: res:ScopeTypeUse: optionalDefault value: documentComplex Type Definitions:SoftwareTypeContent of this field: Description of this field:Elements: Use: How many:A choice of (A sequence of (res:ResourceGroupimplementation required unboundeddependency optional unboundedA choice of (licenseURL requiredORlicense required)version requiredproject optional)ORres:ReferencesGroup)Attributes: Use: Default Value:id optionalsystem optionalscope optional documentSimple Type Definitions:ActionDerived from: xs:string (by xs:restriction)Allowed values:installassertThis element and its enumerations of assert and install can be used as commands by a software application to carry out these actions on software package dependencies. This is a change from how we have used all previous elements within eml. Up until now all other elements have been simply metadata designed to describe data, literature citations, etc... with the Action element we can use this module as a command to carry out the action.Group Definitions:Web Contact: jones@nceas.ucsb.edu"
