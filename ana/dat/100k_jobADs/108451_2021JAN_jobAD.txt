"lnt-ctmark-aarch64-Os clang-d339523-g3d210ed3d18-t5460-b5460.tar.gz Changes [Jenkins]Skip to contentJenkinslog in | sign upJenkinsClangdPerformancelnt-ctmark-aarch64-Osclang-d339523-g3d210ed3d18-t5460-b5460.tar.gzBack to ProjectStatusChangesConsole OutputView as plain textView Build InformationParametersTimingsGit Build DataGit Build DataGit Build DataGit Build DataFailure Scan LogSupportOpen Blue OceanPipeline StepsWorkspacesPrevious BuildNext BuildChangesSummaryphab doc: Replace or remove references to svn (details)AMDGPU/GlobalISel: Widen 16-bit shift amount sources (details)AMDGPU/GlobalISel: Fix argument lowering for vectors of pointers (details)GlobalISel: Don't assert on MoreElements creating vectors (details)TableGen/GlobalISel: Address fixme (details)GlobalISel: Move getLLTForMVT/getMVTForLLT (details)Add gdb pretty printer for MutableArrayRef, remove ConstArrayRef. (details)Add builtins for aligning and checking alignment of pointers and (details)[mlir] mlir-cpu-runner test's cblas_interface should export functions on (details)[mlir] add a missing dependency for Linalg conversion (details)[AArch64][GlobalISel] Implement selection of <2 x float> vector splat. (details)CodeGen: Use LLT instead of EVT in getRegisterByName (details)GlobalISel: Fix else after return (details)DAG: Don't use unchecked dyn_cast (details)GlobalISel: Handle llvm.read_register (details)TableGen/GlobalISel: Add way for SDNodeXForm to work on timm (details)TableGen/GlobalISel: Fix pattern matching of immarg literals (details)[lldb/Lua] Add lua typemaps for INOUT params (details)[mlir] Use getDenseElementBitwidth instead of (details)When diagnosing the lack of a viable conversion function, also list (details)AVR: Update for getRegisterByName change (details)[lldb] Remove spurious file (details)[AMDGPU] Fix bundle scheduling (details)When reading Aux file in chunks, read consecutive byte ranges (details)[ELF] Fix includeInDynsym() when an undefined weak is merged with a lazy (details)AMDGPU/GlobalISel: Fix G_EXTRACT_VECTOR_ELT mapping for s-v case (details)AMDGPU/GlobalISel: Select G_EXTRACT_VECTOR_ELT (details)Relax opcode checks in test for G_READCYCLECOUNTER to check for only a (details)CWG2352: Allow qualification conversions during reference binding. (details)[NFC] Style cleanup (details)fix a few typos to cycle the bots (details)fix another typo to cycle bots (details)[ThinLTO] Pass CodeGenOpts like UnrollLoops/VectorizeLoop/VectorizeSLP (details)[xray] Remove cl::sub from alias options (details)clang-tidy doc - remove the widths (details)[Syntax] Update comment, remove stale FIXME. NFC (details)[LV] VPValues for memory operation pointers (NFCI) (details)Restore order in clang-tidy section of release notes (details)Allow system header to provide their own implementation of some builtin (details)[NFC] [PowerPC] Add isPredicable for basic instrs (details)[clangd] Improve type printing in hover (details)[clangd] Fix markdown rendering in VSCode (details)Fix several issues with compiler extensions (details)[SVEV] Recognise hardware-loop intrinsic loop.decrement.reg (details)Follow up of 67bf9a6154d4b82c, minor fix in test case, removed duplicate (details)[libcxx] Force-cache LIBCXX_CXX_ABI_LIBRARY_PATH (details)[CMake] Support running libc++abi tests in CrossWinToARMLinux cache file (details)XFAIL load_extension.ll test on macOS only (details)[MIR] Fix cyclic dependency of MIR formatter (details)[LV] Silence unused variable warning in Release builds. NFC. (details)Don't use dyn_cast_or_null if we know the pointer is nonnull. (details)[X86][AVX] Add tests for v8f32/v8i32 089abcde and 0189abcd shuffles (details)Fix Wdocumentation warning. NFCI. (details)Fix Wdocumentation warning. NFCI. (details)Data formatters: Look through array element typedefs (details)Fix \"pointer is null\" static analyzer warnings. NFCI. (details)[ARM,MVE] Make `vqrshrun` generate the right instruction. (details)[ARM][Thumb2] Fix ADD/SUB invalid writes to SP (details)[lldb/lua] Make convenience_variables.test compatible with lua-5.1 (details)[lldb/DWARF] Don't automatically search dwo unit attributes (details)[CodeComplete] Suggest 'return nullptr' in functions returning pointers (details)[lldb] Surpress \"bitfield too small\" gcc warning (details)[Support] ThreadPoolExecutor fixes for Windows/MinGW (details)[lldb][tests] Take into account all parent's categories when traverse (details)[lldb][test] NFC, re-use _getTestPath() function (details)[FPEnv] Generate constrained FP comparisons from clang (details)[lldb][tests] Cleanup '.categories' (details)Reverting, broke some bots. Need further investigation. (details)Sprinkle some constexpr on default ctors so the compiler can diagnose (details)ARMLowOverheadLoops: a few more dbg msgs to better trace rejected TP (details)RangeDataVector: Support custom sorting for D63540 (details)[ARM][MVE] Tail predicate VMAX,VMAXA,VMIN,VMINA (details)[FPEnv] Invert sense of MIFlag::FPExcept flag (details)[lldb][tests][NFC] Unify variable naming convention (details)[lldb][tests] Make it possible to expect failure for a whole category (details)AMDGPU/GlobalISel: Clamp G_ZEXT source sizes (details)[LIBOMPTARGET]Ignore empty target descriptors. (details)[DebugInfo] Improve error message text (details)[DebugInfo][NFC] Remove unused variable/fix variable naming (details)[NFC] format unittest for ExprMutAnalyzer (details)[PowerPC] Handle constant zero bits in BitPermutationSelector (details)Add support for __declspec(guard(nocf)) (details)Add missing nullptr checks. (details)[analyzer] Add PlacementNewChecker (details)[mlir][spirv] Fix typos related to (de)serialization. (details)[InstCombine] add tests for fsub; NFC (details)[BPF] extend BTF_KIND_FUNC to cover global, static and extern funcs (details)[clangd] Fix targetDecl() on certain usage of ObjC properties. (details)[gn build] Port 5e7beb0a414 (details)[X86][AVX] lowerShuffleAsLanePermuteAndShuffle - consistently normalize (details)Fix \"pointer is null\" static analyzer warning. NFCI. (details)Fix \"pointer is null\" static analyzer warning. NFCI. (details)[examples] Add missing dependency in llvm examples (details)[AIX] Allow vararg calls when all arguments reside in registers (details)Fix \"pointer is null\" static analyzer warning. NFCI. (details)[AArch64] Add function attribute \"patchable-function-entry\" to add NOPs (details)[X86] Support function attribute \"patchable-function-entry\" (details)Support function attribute patchable_function_entry (details)[Driver][CodeGen] Add -fpatchable-function-entry=N[,0] (details)[ELF] Make TargetInfo::writeIgotPlt a no-op (details)[LegalizeVectorOps] Improve handling of multi-result operations. (details)[lldb] Remove FieldDecl stealing hack by rerouting indirect imports to (details)[lldb/Lua] Support loading Lua modules (details)Update the attribution policy to use the 'Author' property of a git (details)[analyzer] Move PlacementNewChecker to alpha (details)[TargetLowering][ARM][X86] Change softenSetCCOperands handling of ONE to (details)[lld][WebAssembly] Add libcall symbols to the link when LTO is being (details)[CMake] Fix modules build after DWARFLinker reorganization (details)[clang] Fix out-of-bounds memory access in ComputeLineNumbers (details)[Driver][PowerPC] Move powerpcspe logic from cc1 to Driver (details)[ASTMatchers] Make test more clear about what it is verifying (details)[Tests] Precommit tests showing default branch padding on skylake (details)[lldb] Make CompleteTagDeclsScope completion order deterministic (details)[lldb] Fix TestClangASTContext.TestFunctionTemplateInRecordConstruction (details)Implement new AST matcher hasAnyCapture to match on LambdaExpr captures. (details)MakeUniqueCheck.cpp: explicit the fact that there is an autofix for this (details)clang-tidy doc: Refresh the list of checkers and polish the script (details)[TargetLowering] Use SelectionDAG::getSetCC and remove a repeated call (details)clang-tidy doc: unbreak the CI (details)Summary: update macro for OFF_T so that sanitizer works on AARCH64. (details)[lldb/Scripts] Remove buildbot.py (details)[lldb/Scripts] Remove remote-build.py (details)[lldb/Scripts] Move android script from underneath Python dir (details)[AArch64] Add isAuthenticated predicate to MCInstDesc (details)[lldb/Test] Bypass LLDB_TEST_COMMON_ARGS for certain dotest args (NFC) (details)[lldb/Utils] Remove vim-lldb (details)lldbutil: Forward ASan launch info to test inferiors (details)Let targets adjust operand latency of bundles (details)[lldb/Reproducer] Add SBReproducer::Replay overload (again) (details)Only destroy static locals if they have non-trivial destructors. (details)[LockFileManager] Make default waitForUnlock timeout a parameter, NFC (details)[NFC][InlineCost] Factor cost modeling out of CallAnalyzer traversal. (details)[mlir] NFC: put C++ code emission classes in their own files (details)[mlir][ods] Support dialect specific content emission via hooks (details)Improve precision of documentation comment. (details)[AArch64] Don't generate libcalls for wide shifts on Darwin (details)Remove redundant implicit cast creation. (details)Add a FIXME and corresponding test coverage for some suspicious behavior (details)Clean up and slightly generalize implementation of composite pointer (details)driver: Allow -fdebug-compilation-dir=foo in joined form. (details)[Driver] Fix OptionClass of -fconvergent-functions and -fms-volatile (details)[Concepts] Fix MarkUsedTemplateParameters for exprs (details)Remove umask tests (details)[COFF] Align ARM64 range extension thunks at instruction boundary (details)[TargetLowering][ARM][Mips][WebAssembly] Remove the ordered FP compare (details)[SCEV] [NFC] add more test cases for range of addrecexpr with nsw flag (details)[NFC] [PowerPC] Update mi-peephole-splat test (details)[AMDGPU] Remove unnecessary v_mov from a register to itself in WQM (details)Mark the test/Feature/load_extension.ll test as unsupported on Darwin. (details)[X86] Use ReplaceAllUsesWith instead of ReplaceAllUsesOfValueWith to (details)[X86][Disassembler] Simplify readPrefixes (details)[X86] Preserve fpexcept property when turning strict_fp_extend and (details)[X86] Simplify code by removing an unreachable condition. NFCI (details)Add test for GDB pretty printers. (details)[X86] Remove dead code from X86DAGToDAGISel::Select that is no longer (details)[InstCombine] Preserve nuw on sub of geps (PR44419) (details)[LoopSimplify] Regenerate test checks; NFC (details)[LoopRotate] Add tests for rotate with switch; NFC (details)DSE: fix bug where we would only check libcalls for name rather than (details)[X86] Add more complex tests for vector masks used with AND/OR/XOR. (details)[X86][AVX] Add lowerShuffleAsLanePermuteAndSHUFP lowering (details)Fix copy+paste typo in shuffle test name (details)[Sema] Improve -Wrange-loop-analysis warnings. (details)[X86] Fix outdated comment (details)moveOperands - assert Src/Dst MachineOperands are non-null. (details)Remove copy ctors identical to the default one. NFC. (details)Fix uninitialized value clang static analyzer warning. NFC. (details)Fix \"pointer is null\" static analyzer warning. NFCI. (details)Fix \"pointer is null\" static analyzer warnings. NFCI. (details)Fix \"pointer is null\" static analyzer warning. NFCI. (details)Fix \"pointer is null\" static analyzer warning. NFCI. (details)Fix \"pointer is null\" static analyzer warnings. NFCI. (details)GlobalModuleIndex - Fix use-after-move clang static analyzer warning. (details)[X86AsmBackend] Be consistent about placing definitions out of line (details)[X86AsmBackend] Move static function before sole use [NFC] (details)[X86] Adjust nop emission by compiler to consider target decode (details)[mlir] NFC: Remove Value::operator* and Value::operator-> now that Value (details)[ASTMatchers] extract public matchers from const-analysis into own patch (details)Revert \"[ASTMatchers] extract public matchers from const-analysis into (details)[ExecutionEngine] Re-enable FastISel for non-iOS arm targets. (details)Add -Wrange-loop-analysis changes to ReleaseNotes (details)[X86] Turn FP_ROUND/STRICT_FP_ROUND into (details)[X86][Disassembler] Simplify and optimize reader functions (details)[LegalizeVectorOps] Only pass SDNode* instead SDValue to all of the (details)[LegalizeVectorOps] Remove some of the simpler Expand methods. Pass (details)[X86][Disassembler] Replace custom logger with LLVM_DEBUG (details)[Support] Optionally call signal handlers when a function wrapped by the (details)[ORC] Fix argv handling in runAsMain / lli. (details)[Disassembler] Delete the VStream parameter of (details)[X86][Disassembler] Optimize argument passing and immediate reading (details)[X86][Disassembler] Shrink X86GenDisassemblerTables.inc from 36M to 6.1M (details)[LegalizeVectorOps] Expand vector MERGE_VALUES immediately. (details)[TargetLowering][X86] Connect the chain from STRICT_FSETCC in (details)[LegalizeVectorOps] Parallelize the lo/hi part of STRICT_UINT_TO_FLOAT (details)[SCEV] more accurate range for addrecexpr with nsw flag. (details)[X86] Don't call LowerSETCC from LowerSELECT for (details)[NFC] Refactor memory ops cluster method (details)[profile] Support merge pool size >= 10 (details)[X86][Disassembler] Simplify (details)[X86][Disassembler] Merge X86DisassemblerDecoder.cpp into (details)[X86][AVX] lowerShuffleAsLanePermuteAndSHUFP - only set the demanded (details)[X86][AVX] Use lowerShuffleAsLanePermuteAndSHUFP to lower binary v4f64 (details)[AMDGPU] Regenerate shl shift tests (details)[MIPS] Regenerate shl/lshr shift tests (details)Fix \"pointer is null\" static analyzer warnings. NFCI. (details)[PowerPC] Delete PPCDarwinAsmPrinter and PPCMCAsmInfoDarwin (details)[NFC] Fix compilation of CrashRecoveryContext.cpp on mingw (details)__patchable_function_entries: don't use linkage field 'unique' with (details)[AMDGPU] Add gfx8 assembler and disassembler test cases (details)[MC][ELF] Emit a relocation if target is defined in the same section and (details)Fix \"pointer is null\" static analyzer warning. NFCI. (details)Fix \"pointer is null\" static analyzer warnings. NFCI. (details)[RISCV] Check register class for AMO memory operands (details)[SCEV] accurate range for addrecexpr with nuw flag (details)[clangd] Assert that the testcases in FindExplicitReferencesTest.All (details)[clangd] Show template arguments in type hierarchy when possible (details)AMDGPU/GlobalISel: Copy type when inserting readfirstlane (details)AMDGPU/GlobalISel: Don't use XEXEC class for SGPRs (details)AMDGPU: Split test function (details)[X86] Use SDNPOptInGlue instead of SDNPInGlue on a couple SDNodes. (details)[DWARF5][DebugInfo]: Added support for DebugInfo generation for auto (details)[DWARF5][clang]: Added support for DebugInfo generation for auto return (details)[SCEV] Follow up of D71563: addressing post commit comment. NFC. (details)[NFC] Update loop.decrement.reg intrinsic comment (details)Add zero_extendi and sign_extendi to intrinsic namespace (details)[lldb] Mark several tests as not dependent on debug info (details)[RISCV] Collect Statistics on Compressed Instructions (details)[clangd] Publish xref for macros from Index and AST. (details)Revert \"[DWARF5][clang]: Added support for DebugInfo generation for auto (details)[lldb] Fix eh-frame-small-fde test for changes in lld (details)This option allows selecting the TLS size in the local exec TLS model, (details)ARMLowOverheadLoops: return earlier to avoid printing irrelevant dbg (details)[DebugInfo][Support] Replace DWARFDataExtractor size function (details)[lldb][NFC] Use range-based for loops in IRInterpreter (details)[lldb] Fix lookup of symbols with the same address range but different (details)[X86] Fix MSVC \"truncation from 'int' to 'bool'\" warning. NFCI. (details)[SelectionDAG] ComputeKnownBits - minimum leading/trailing zero bits in (details)[llvm-exegesis][mips] Expand loadImmediate() (details)[clangd] Remove raw string literals in macros (details)[X86][SSE] Add knownbits test showing missing (details)[SelectionDAG] ComputeKnownBits add getValidMinimumShiftAmountConstant() (details)[clang] Remove raw string literals in macros (details)[lldb][NFC] Remove debug print statement from TestExprDiagnostics.py (details)[llvm-exegesis] Remove unneeded std::move() (details)GlobalISel: Fix assertion on wide G_ZEXT sources (details)[FPEnv] Fix chain handling for fpexcept.strict nodes (details)Revert \"[libc++] Explicitly enumerate std::string external (details)[X86] Add knownbits tests showing missing shift amount demanded elts (details)[SelectionDAG] ComputeKnownBits - Add DemandedElts support to (details)[SelectionDAG] ComputeNumSignBits - Use getValidShiftAmountConstant for (details)[InstSimplify] move tests for select from InstCombine; NFC (details)[MIPS][ELF] Use PC-relative relocations in .eh_frame when possible (details)[MIPS] Don't emit R_(MICRO)MIPS_JALR relocations against data symbols (details)[AArch64] Emit HINT instead of PAC insns in Armv8.2-A or below (details)Add missing triples to tests in 0c29d3ff2233696f663ae34a8aeda23c750ac68f (details)Sema::getOwningModule - take const Decl* type. (details)Fix \"pointer is null\" static analyzer warnings. NFCI. (details)Fix some cppcheck shadow variable warnings. NFCI. (details)Merge isVectorType() and getAs<VectorType> calls to silence clang static (details)Fix cppcheck uninitialized variable in DiffTree() constructor warning. (details)[RISCV] Handle globals and block addresses in asm operands (details)[Clang][Driver] Re-use the calling process instead of creating a new (details)[mlir][Linalg] Update ReshapeOp::build to be more idiomatic (details)[Inlining] Add PreInlineThreshold for the new pass manager (details)[mlir] Added missing GPU lowering ops. (details)[mlir] m_Constant() (details)[DebugInfo] Make debug line address size mismatch non-fatal to parsing (details)[ThinLTO] Add additional ThinLTO pipeline testing with new PM (details)[AArch64][SVE] Add patterns for some arith SVE instructions. (details)[Scheduler] Remove superfluous casts. NFC (details)[X86] Add AVX2 known signbits codegen tests (details)[X86][SSE] Add sitofp(ashr(x,y)) test case with non-uniform shift value (details)[SelectionDAG] ComputeNumSignBits add (details)[LegalizeTypes] Add SoftenFloatResult support for (details)[lldb/Scripts] Remove SWIG bot (details)Fix tests for builtbot failures (details)[lldb/Docs] Extend description section of the main page (details)[X86][SSE] Add sitofp(shl(sext(x),y)) test case with non-uniform shift (details)AMDGPU/GlobalISel: Simplify assert (details)AMDGPU/GlobalISel: Fix branch targets when emitting SI_IF (details)AMDGPU/GlobalISel: Add some baseline tests for vector extract (details)AMDGPU/GlobalISel: Set insert point after waterfall loop (details)[SelectionDAG] ComputeNumSignBits add (details)AMDGPU/GlobalISel: Select llvm.amdgcn.ds.ordered.{add|swap} (details)Try number 2 for fixing bot failures (details)Unbreak the mlir build after 202ab273e6eca134b69882f100c666fcd3affbcf (details)Fix readability-identifier-naming missing member variables (details)Hopefully last fix for bot failures (details)[llvm][MIRVRegNamerUtils] Adding hashing on FrameIndex MachineOperands. (details)[X86][Disassembler] Fix a bug when disassembling an empty string (details)Add a couple of missed wildcards in debug-pass-manager output checking (details)Revert \"[ThinLTO] Add additional ThinLTO pipeline testing with new PM\" (details)[gn build] (manually) port b4a99a061f51 (details)[clangd] Render header of hover card as a heading (details)[clangd] Include expression in DecltypeTypeLoc sourcerange while (details)[lldb-server] Remove dead CMake code (details)[Clang] Always set -z now linker option on Fuchsia (details)Rework be15dfa88fb1 such that it works with GlobalISel which doesn't use (details)[LTO] Constify lto::Config reference passed to backends (NFC) (details)[Dsymutil][Debuginfo][NFC] #3 Refactor dsymutil to separate DWARF (details)[InstCombine] add tests for select --> copysign; NFC (details)Fix a test case by adding -fno-delayed-template-parsing. (details)[NFC][clang][IFS] Adding braces to if-statement as prep for D71301. (details)[clang][IFS] Prevent Clang-IFS from Leaking symbols from inside a block. (details)[lldb] Revert ddf044290ede for TestProcessAPI.py (details)[LegalizeIntegerTypes][X86] Add support for expanding input of (details)[mlir] Change the syntax of AffineMapAttr and IntegerSetAttr to avoid (details)Implement VectorType conditional operator GNU extension. (details)[InstCombine] add FMF to tests for more coverage; NFC (details)[ItaniumCXXABI] Make tls wrappers properly comdat (details)[ThinLTO/WPD] Fix index-based WPD for alias vtables (details)PR44514: Fix recovery from noexcept with non-convertible expressions (details)[mlir] Remove unnecessary assert for single region. (details)Revert \"[DWARF5][DebugInfo]: Added support for DebugInfo generation for (details)[clang][IFS][test] Fixing mangled name of a test for Darwin. (details)[PGO][CHR] Guard against 0-to-0 branch weight and avoid division by zero (details)[lldb-server] Prefer target_include_directories (details)[mlir] Update the use-list algorithms in SymbolTable to support nested (details)[mlir] Update the CallGraph for nested symbol references, and simplify (details)[DebugInfo] Add another level to DebugInfoKind called Constructor (details)[mlir] Add support for attaching a visibility to symbols. (details)[mlir] NFC: Remove unused variable. (details)Re-enable testing of .s tests under test/CodeGen/X86. (details)[GlobalISel] Change representation of shuffle masks in MachineOperand. (details)[llvm-exegesis] Initialize const bitvector member (details)[LanguageRuntime] Retire an unused member function. NFCI. (details)try to fix InterfaceStubs/lambda.cpp on Windows after bd8c8827d96f0 (details)[lldb/Utility] Add std::move to make placate clang 3.8 (details)[mlir] [VectorOps] fixed typo in verifier of slice op (details)[clang] [test] Fix riscv-toolchain-extra to be less picky about paths (details)[X86] Add test to show that nofpexcept flag is not preserved by stack (details)[X86] Copy the nofpexcept flag when folding a load into an instruction (details)[MLIR] Fix broken link locations after move to monorepo (details)[PowerPC] [NFC] set instruction number as 1st priority of lsr cost (details)[MC] Don't resolve relocations referencing STB_LOCAL STT_GNU_IFUNC (details)[ELF] Add -z force-ibt and -z shstk for Intel Control-flow Enforcement (details)[OpenMP][Tool] Make tests for archer dependent on TSan (details)[ELF] Delete unintended --force-bti (details)[OpenMP][Tool] Improving stack trace for Archer (details)[AMDGPU] Add gfx9 assembler and disassembler test cases (details)[AMDGPU] Improve error checking in gfx10 assembler tests (details)[AMDGPU] Remove duplicate gfx10 assembler and disassembler tests (details)[lldb] Fix that SBThread.GetStopDescription is returning strings with (details)[lldb] Don't defend against internal LLVM errors in IRInterpreter (details)[mlir] Fix -Wunused (details)[AMDGPU] Fix getInstrLatency() always returning 1 (details)[lldb][NFC] Rewrite python_api/rdar-12481949 test (details)[libcxx] [test] Add casts to avoid signed/unsigned mismatch warnings on (details)[AMDGPU] Model distance to instruction in bundle (details)[llvm-readobj][test] - Fix grammar in comments. (details)[clang-tidy] Ignore implicit casts in modernize-use-default-member-init (details)[TableGen] Introduce a `defvar` statement. (details)[TableGen] Introduce an if/then/else statement. (details)[Target] Fix uninitialized value in (details)[ARM][MVE] Masked gathers from base + vector of offsets (details)[mlir] Add loop.parallel, loop.reduce and loop.reduce.return operations. (details)[mlir] Ran git-clang-format. (details)[lldb][NFC] Cleanup ClangASTContext::CompleteTagDeclarationDefinition (details)[mlir] Create a gpu.module operation for the GPU Dialect. (details)[RISCV] Fix ILP32D lowering for double+double/double+int return types (details)[mlir] Fix translation of splat constants to LLVM IR (details)[ARM][MVE] Disallow VPSEL for tail predication (details)[SelectionDAG] ComputeKnownBits - merge (details)[X86][SSE] Add add(shl(and(x,c1),c2),c3) test case with non-uniform (details)[ARM][Thumb2] Fix ADD/SUB invalid writes to SP (details)[ARM][LowOverheadLoops] Change predicate inspection (details)[SelectionDAG] ComputeKnownBits - merge (details)Fix \"MIParser::getIRValue(unsigned int)’ defined but not used\" warning. (details)[ARM][LowOverheadLoops] Allow all MVE instrs. (details)[lldb/Expression] Improve interpreter error message with a non-running (details)[ARM,MVE] Use the new Tablegen `defvar` and `if` statements. (details)[unittests] Fix \"comparison of integers of different signs\" warnings (details)Make helper functions static or move them into anonymous namespaces. (details)[FPEnv] Fix chain handling regression after 04a8696 (details)[RISCV][NFC] Deduplicate Atomic Intrinsic Definitions (details)[FPEnv] Add some comments to IRBuilder.h (details)[lldb][NFC] Make name parameter in AddMethodToCXXRecordType a StringRef (details)[TableGen] Update editor modes for new keywords. (details)[InstSimplify] add tests for vector select; NFC (details)AArch64: fix bitcode upgrade of @llvm.neon.addp. (details)Expression eval lookup speedup by not returning methods in (details)Fix \"null pointer passed to nonnull argument\" clang static analyzer (details)Fix \"pointer is null\" static analyzer warnings. NFCI. (details)Merge isa<> and getAs<> calls to fix \"pointer is null\" static analyzer (details)Remove duplicate variable. NFCI. (details)Fix \"pointer is null\" static analyzer warnings. NFCI. (details)Fix \"pointer is null\" static analyzer warning. NFCI. (details)[llvm-readobj][llvm-readelf][test] - Add a few more dynamic section (details)[lldb/DWARF] Move location list sections into DWARFContext (details)[AIX] ExternalSymbolSDNode lowering (details)[DBG][LIVEDEBUGVALUES][NFC] Add Targeted LiveDebugValues Behaviour (details)[OpenCL] Add MSAA sharing extension builtin functions (details)Revert \"Recommit \"[GlobalOpt] Pass DTU to removeUnreachableBlocks (details)[AArch64] Fix save register pairing for Windows AAPCS (details)Revert \"[DBG][LIVEDEBUGVALUES][NFC] Add Targeted LiveDebugValues (details)[clang-tidy] Match InitListExpr in modernize-use-default-member-init (details)[Syntax] Assert invariants on tree structure and fix a bug in mutations (details)[Syntax] Mark synthesized nodes as modifiable (details)[DBG][LIVEDEBUGVALUES][NFC] Add Targeted LiveDebugValues Behaviour (details)[scudo][standalone] Fork support (details)[Syntax] Unset IsOriginal flag on nodes removed from the tree (details)[ARM][MVE] VTP Block Pass fix (details)[clang][OpenCL] Fix covered switch warning (details)Fix \"pointer is null\" clang static analyzer warnings. NFCI. (details)Fix \"pointer is null\" static analyzer warnings. NFCI. (details)[IR] fix potential crash in Constant::isElementWiseEqual() (details)[lldb/Utility] Use assert instead of llvm_unreachable for LLDBAssert (details)[RISCV] Add Clang frontend support for Bitmanip extension (details)[test] Make data layout of load-bitcast64.ll explicit, use (details)Removed PointerUnion3 and PointerUnion4 aliases in favor of the variadic (details)[ELF] --exclude-libs: don't assign VER_NDX_LOCAL to undefined symbols (details)[InstCombine] Let combineLoadToNewType preserve ABI alignment of the (details)[AIX][XCOFF] Supporting the ReadOnlyWithRel SectionKnd (details)SCC: Allow ReplaceNode to safely support insertion (details)[X86] Directly emit a BROADCAST_LOAD from constant pool in (details)[ThinLTO] Handle variable with twice promoted name (Rust) (details)[ELF] Delete the RelExpr member R_HINT. NFC (details)[ThinLTO/WPD] Remove an overly-aggressive assert (details)[RISCV] Allow shrink wrapping for RISC-V (details)Added readability-qualified-auto check (details)[gn build] Port 36fcbb838c8 (details)[lldb/test] test_breakpoints_func_full from (details)[MachineScheduler] Reduce reordering due to mem op clustering (details)[InstCombine] add test for possible cast-of-select transform; NFC (details)Fix NetBSD bot after b4a99a061f517e60985667e39519f60186cbb469 (details)[nfc][libomptarget] Refactor amdgcn target_impl (details)[nfc][libomptarget] Refactor nvptx/target_impl.cu (details)[InstCombine] Add test for iterator invalidation bug; NFC (details)[InstCombine] Fix user iterator invalidation in bitcast of phi transform (details)[InstCombine] Make combineLoadToNewType a method; NFC (details)[InstCombine] Fix infinite loop due to bitcast <-> phi transforms (details)[OPENMP]Improve handling of possibly incorrectly mapped types. (details)[NewPM] Port MergeFunctions pass (details)[OpenMP][Tool] Runtime warning for missing TSan-option (details)[Driver] Ignore -fno-semantic-interposition (details)[SVE] Add patterns for MUL immediate instruction. (details)[libcxx] [Windows] Make a more proper implementation of strftime_l for (details)dotest.py: Add option to pass extra lldb settings to dotest (details)[analyzer] Fix SARIF column locations (details)[DebugInfo] Add option to clang to limit debug info that is emitted for (details)[InstCombine] Fix worklist management when removing guard intrinsic (details)[clang][test][NFC] Use more widely supported sanitizer for file (details)[GVN] fix comment/argument name to match actual implementation. NFC (details)[LegalizeTypes] Remove untested code from ExpandIntOp_UINT_TO_FP (details)[Driver][test] Fix Driver/hexagon-toolchain-elf.c for (details)[AArch64][GlobalISel]: Support @llvm.{return,frame}address selection. (details)Remove trailing `;`. NFC. (details)[mlir] Use double format when parsing bfloat16 hexadecimal values (details)[OPENMP]Do not emit special virtual function for NVPTX target. (details)[DAGCombine] Replace `getIntPtrConstant()` with `getVectorIdxTy()`. (details)[mlir][Linalg] Update the semantics, verifier and test for Linalg with (details)-fmodules-codegen should not emit extern templates (details)fix recent -fmodules-codegen fix test (details)make -fmodules-codegen and -fmodules-debuginfo work also with PCHs (details)[mlir] Enable printing of FuncOp in the generic form. (details)[OPENMP]Do not use RTTI by default for NVPTX devices. (details)[mlir] Refactor ModuleState into AsmState and expose it to users. (details)[remark][diagnostics] Using clang diagnostic handler for IR input files (details)[mlir][spirv] Properly support SPIR-V conversion target (details)[codegen,amdgpu] Enhance MIR DIE and re-arrange it for AMDGPU. (details)[LIBOMPTARGET] Do not increment/decrement the refcount for \"declare (details)Fix windows bot failures in c410adb092c9cb51ddb0b55862b70f2aa8c5b16f (details)[libcxx] Use C11 thread API on Fuchsia (details)[mlir] : Fix ViewOp shape folder for identity affine maps (details)[X86] Swap the 0 and the fudge factor in the constant pool for the (details)[X86] Drop an unneeded FIXME. NFC (details)[amdgpu] Fix typos in a test case. (details)[Win64] Handle FP arguments more gracefully under -mno-sse (details)Allow /D flags absent during PCH creation under msvc-compat (details)[X86] ABI compat bugfix for MSVC vectorcall (details)[Concepts] Type Constraints (details)[BranchAlign] Add master --x86-branches-within-32B-boundaries flag (details)DWARFDebugLine.cpp: Restore LF line endings (details)Modify test to use -S instead of -c so that it works when an external (details)PR44540: Prefer an inherited default constructor over an initializer (details)CMake: Make most target symbols hidden by default (details)Relax the rules around objc_alloc and objc_alloc_init optimizations. (details)[PowerPC] Fix powerpcspe subtarget enablement in llvm backend (details)[ODRHash] Fix wrong error message with bitfields and mutable. (details)[Driver][X86] Add -malign-branch* and -mbranches-within-32B-boundaries (details)Fix up ms-pch-macro.c test to pass on non-Windows (details)[lldb/CommandInterpreter] Remove flag that's always true (NFC) (details)[lldb/test] Add test for CMTime data formatter (details)[Scheduler] Adjust interface of CreateTargetMIHazardRecognizer to use (details)[Attributor] AAValueConstantRange: Value range analysis using constant (details)[ARM] Reegenerate MVE tests. NFC (details)[X86] Don't call LowerUINT_TO_FP_i32 for i32->f80 on 32-bit targets with (details)[VE] Minimal codegen for empty functions (details)[AMDGPU] Invert the handling of skip insertion. (details)[MachO] Add a test for detecting reserved unit length. (details)[gn build] Port 0dc6c249bff (details)[DWARF] Fix DWARFDebugAranges to support 64-bit CU offsets. (details)[RISCV] Support ABI checking with per function target-features (details)[llvm-locstats][NFC] Support OOP concept (details)Revert \"[RISCV] Add Clang frontend support for Bitmanip extension\" (details)[yaml2obj/obj2yaml] - Add support for SHT_RELR sections. (details)[llvm-locstats] Add the --draw-plot option (details)[AArch64][SVE] Add ptest intrinsics (details)[Support] Replace Windows __declspec(thread) with thread_local for (details)Revert \"[yaml2obj/obj2yaml] - Add support for SHT_RELR sections.\" (details)[Lexer] Allow UCN for dollar symbol '\\u0024' in identifiers when using (details)[llvm-locstats] Fix the docs (details)[NFC] Adjust test cases numbering, test commit. (details)[AArch64][SVE] Fold variable into assert to silence unused variable (details)[lldb] Add expect_expr function for testing expression evaluation in (details)[yaml2obj/obj2yaml] - Add support for SHT_RELR sections. (details)Fix \"pointer is null\" static analyzer warning. NFCI. (details)RegisterClassInfo::computePSetLimit - assert that we actually find a (details)Fix Wdocumentation warning. NFC. (details)Revert \"[RISCV] Support ABI checking with per function target-features\" (details)[RISCV] Support ABI checking with per function target-features (details)Revert rG6078f2fedcac5797ac39ee5ef3fd7a35ef1202d5 - (details)Bump the trunk major version to 11 (details)[PowerPC] Legalize saturating vector add/sub (details)[llvm-locstats] Add the --compare option (details)Further implement CWG 2292 (details)[RISCV] Fix test for inline asm z constraint modifier (details)TableGen/GlobalISel: Don't reconstruct CodeGenRegBank (details)TableGen/GlobalISel: Don't take reference to temporary values (details)TableGen: Delete some copy constuctors (details)GlobalISel: Fix narrowScalar for G_ANYEXT results (details)AMDGPU: Partially directly select llvm.amdgcn.interp.p1.f16 (details)GlobalISel: Implement lower for G_BITCAST (details)[mlir] LLVM import: handle function-typed constants (details)[FPEnv] Address post-commit review comment for D71467 (details)[clangd] Show hower info for expressions (details)[ELF] Avoid false-positive assert in getErrPlace() (details)[mlir][EDSC] Refactor dependencies involving EDSCs. (details)[gn build] (manually) port b4a99a061f51 better (details)[clangd] Add a ruler after header in hover (details)[clangd] Rearrange type, returntype and parameters in hover card (details)[clang] New __attribute__((__clang_arm_mve_strict_polymorphism)). (details)[gn build] find mistakes like the one fixed in 72b5989e0d1 at build time (details)[clangd] Fix windows buildbots (details)Restore \"[ThinLTO] Add additional ThinLTO pipeline testing with new PM\" (details)[llvm-readobj][test] - Cleanup SHT_RELR sections testing. (details)[mlir][Linalg] NFC - Hotfix for gcc-5 build (details)[CMake] Enable -qfuncsect when building with IBM XL (details)DWARFDebugLine.cpp: Format unknown line number standard opcodes (details)[ORC] Update lazyReexports to support aliases with different symbol (details)[ORC] Simplify use of lazyReexports with LLJIT. (details)[mlir][Linalg] NFC - Cleanup Linalg Pass locations and namespacing (details)[mlir][Linalg] NFC - Hotfix for gcc-5 build (details)[InstCombine] reassociate fsub+fsub into fsub+fadd (details)[Loop Peeling] Add possibility to enable peeling on loop nests. (details)[ThinLTO] Always import constants (details)Fix bot by adjusting wildcard matching (details)Revert \"[mlir] Create a gpu.module operation for the GPU Dialect.\" (details)[clangd] Extract string literals in macro arguments to unbreak gcc (details)[ARM][MVE][Intrinsics] Add VMINAQ, VMINNMAQ, VMAXAQ, VMAXNMAQ (details)Replace CLANG_SPAWN_CC1 env var with a driver mode flag (details)[gn build] Reformat all build files (details)Revert \"Revert rG6078f2fedcac5797ac39ee5ef3fd7a35ef1202d5 - (details)[ORC] Set setCloneToNewContextOnEmit on LLJIT's transform layer when (details)[Mips] Add FileCheck to a test that just tested for a crash. (details)[gn build] make \"gn format\" comment slightly more concise (details)[gn build] add multi-line forcing comments in more places (details)[gn build] re-run \"gn format\" with trunk gn (details)[docs][ORC] Update the laziness section of the ORCv2 design doc. (details)[DWARF] Emit DW_AT_call_return_pc as an address (details)DebugInfo: Factor out logic to update locations in MD_loop metadata, NFC (details)Work around PR43337: don't try to use the vec_sel overloads for vector (details)PR17164: Change clang's default behavior from (details)[NFC][IndVarSimplify] remove duplicate code in (details)[mlir] Add shaped container component type interface (details)[NFC] Refactor InlineResult for readability (details)[MachineScheduler][NFC] Don't swap when we can't cluster (details)lldb: Run TestCrossDSOTailCalls.py and TestCrossObjectTailCalls.py on (details)[libc++] Make SFINAE'd member functions in string mutually exclusive. (details)[libc++] Explicitly mark basic_string<...>::npos with default (details)[libc++] Explicitly enumerate std::string external instantiations - (details)[BasicBlock] add helper getPostdominatingDeoptimizeCall (details)DWARF: Simplify the way the return PC is attached to call site tags, NFC (details)[test] Move call-site-entry-linking.test into test/tools/dsymutil/X86 (details)[libc++] Optimize basic_string::operator=(const basic_string&) for SSO (details)[libc++] Fix parsing <string> in C++03. (details)Revert \"[OPENMP]Do not use RTTI by default for NVPTX devices.\" (details)[lldb/Debugger] Rename IO handler methods to be more meaningful (NFC) (details)Revert \"Allow system header to provide their own implementation of some (details)Commit 0c195ef7c62db1234e3854f8798e1ef413808b18 by sledruphab doc: Replace or remove references to svnllvm/docs/Phabricator.rstCommit 35ad66fae811c36823b2b91368f142c9d35b8414 by arsenm2AMDGPU/GlobalISel: Widen 16-bit shift amount sourcesThis should be legal, but will require future selection work. 16-bitshift amounts were already removed from being legal, but this didn'tadjust the transformation rules.llvm/test/CodeGen/AMDGPU/GlobalISel/legalize-ashr.mirllvm/test/CodeGen/AMDGPU/GlobalISel/legalize-shl.mirllvm/test/CodeGen/AMDGPU/GlobalISel/legalize-lshr.mirllvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cppCommit 767aa507a464e46b9a5aaed8cfec0a621f8fc599 by arsenm2AMDGPU/GlobalISel: Fix argument lowering for vectors of pointersWhen these arguments are broken down by the EVT based callbacks, thepointer information is lost. Hack around this by coercing the registertypes to be the expected pointer element type when building the remergeoperations.llvm/test/CodeGen/AMDGPU/GlobalISel/irtranslator-function-args.llllvm/lib/Target/AMDGPU/AMDGPUCallLowering.cppCommit fba1fbb9c7367990a0561a36dbf600fc51847246 by arsenm2GlobalISel: Don't assert on MoreElements creating vectorsIf the original type was a scalar, it should be valid to add elements toturn it into a vector.Tests included with following legalization change.llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cppCommit f937b43fdb30b67facf616ad394976b08001ee89 by arsenm2TableGen/GlobalISel: Address fixmeDon't call computeAvailableFunctionFeatures for every instruction.llvm/test/TableGen/GlobalISelEmitter.tdllvm/include/llvm/CodeGen/GlobalISel/InstructionSelector.hllvm/utils/TableGen/GlobalISelEmitter.cppCommit 595ac8c46ea54c6d5dc96e2f35a5759988a657be by arsenm2GlobalISel: Move getLLTForMVT/getMVTForLLTAs an intermediate step, some TLI functions can be converted to usingLLT instead of MVT. Move this somewhere out of GlobalISel so DAGfunctions can use these.llvm/include/llvm/CodeGen/LowLevelType.hllvm/lib/CodeGen/GlobalISel/Utils.cppllvm/include/llvm/CodeGen/GlobalISel/Utils.hllvm/lib/CodeGen/LowLevelType.cppCommit 0f5f28d000f73b4d0282c579477a4e31402a863e by csiggAdd gdb pretty printer for MutableArrayRef, remove ConstArrayRef.Reviewers: dblaikieReviewed By: dblaikieSubscribers: merge_guards_bot, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72136llvm/utils/gdb-scripts/prettyprinters.pyCommit 8c387cbea76b169f1f8ecc7693797e96567ed896 by Alexander.RichardsonAdd builtins for aligning and checking alignment of pointers andintegersThis change introduces three new builtins (which work on both pointersand integers) that can be used instead of common bitwise arithmetic:__builtin_align_up(x, alignment), __builtin_align_down(x, alignment) and__builtin_is_aligned(x, alignment).I originally added these builtins to the CHERI fork of LLVM a few yearsago to handle the slightly different C semantics that we use for CHERI[1]. Until recently these builtins (or sequences of other builtins) wererequired to generate correct code. I have since made changes to thedefault C semantics so that they are no longer strictly necessary (butusing them does generate slightly more efficient code). However, basedon our experience using them in various projects over the past fewyears, I believe that adding these builtins to clang would be useful.These builtins have the following benefit over bit-manipulation andcasts via uintptr_t:- The named builtins clearly convey the semantics of the operation.While checking alignment using __builtin_is_aligned(x, 16) versus ((x & 15) == 0) is probably not a huge win in readably, I personallyfind __builtin_align_up(x, N) a lot easier to read than (x+(N-1))&~(N-1).- They preserve the type of the argument (including const qualifiers).When using casts via uintptr_t, it is easy to cast to the wrong type orstrip qualifiers such as const.- If the alignment argument is a constant value, clang can check that itis a power-of-two and within the range of the type. Since the semantics of these builtins is well defined compared to arbitrary bit-manipulation, it is possible to add a UBSAN checker that the run-time value is avalid power-of-two. I intend to add this as a follow-up to this change.- The builtins avoids int-to-pointer casts both in C and LLVM IR. In the future (i.e. once most optimizations handle it), we could usethe new llvm.ptrmask intrinsic to avoid the ptrtoint instruction that wouldnormally be generated.- They can be used to round up/down to the next aligned value for both integers and pointers without requiring two separate macros.- In many projects the alignment operations are already wrapped inmacros (e.g. roundup2 and rounddown2 in FreeBSD), so by replacing the macroimplementation with a builtin call, we get improved diagnostics for many call-siteswhile only having to change a few lines.- Finally, the builtins also emit assume_aligned metadata when used onpointers. This can improve code generation compared to the uintptr_t casts.[1] In our CHERI compiler we have compilation mode where all pointersare implemented as capabilities (essentially unforgeable 128-bit fatpointers). In our original model, casts from uintptr_t (which is a128-bit capability) to an integer value returned the \"offset\" of thecapability (i.e. the difference between the virtual address and the baseof the allocation). This causes problems for cases such as checking thealignment: for example, the expression `if ((uintptr_t)ptr & 63) == 0`is generally used to check if the pointer is aligned to a multiple of 64bytes. The problem with offsets is that any pointer to the beginning ofan allocation will have an offset of zero, so this check always succeedsin that case (even if the address is not correctly aligned). The sameissues also exist when aligning up or down. Using the alignment builtinsensures that the address is used instead of the offset. While I havesince changed the default C semantics to return the address instead ofthe offset when casting, this offset compilation mode can still be usedby passing a command-line flag.Reviewers: rsmith, aaron.ballman, theraven, fhahn, lebedev.ri, nlopes,aqjune Reviewed By: aaron.ballman, lebedev.ri Differential Revision:https://reviews.llvm.org/D71499clang/test/CodeGen/builtin-align-assumption.cclang/include/clang/Basic/Builtins.defclang/test/CodeGen/builtin-align-array.cclang/include/clang/Basic/DiagnosticASTKinds.tdclang/test/CodeGen/builtin-align.cclang/test/Sema/builtin-align.cclang/lib/AST/ExprConstant.cppclang/docs/LanguageExtensions.rstclang/lib/CodeGen/CodeGenFunction.hclang/test/SemaCXX/builtin-align-cxx.cppclang/include/clang/Basic/DiagnosticSemaKinds.tdclang/lib/CodeGen/CGBuiltin.cppclang/lib/Sema/SemaChecking.cppCommit ea67737b166fc6cb5fd98874fbd2b4639b2d7ecd by zinenko[mlir] mlir-cpu-runner test's cblas_interface should export functions onWindowsThis change fixes the build on Windows, so that cblas_interface.dllexports functions correctly and an implib is created and installedcorrectly.Currently, LLVM cannot be consumed on Windows after it has beeninstalled in a location because cblas_interface.lib is notcreated/installed, thus failing the import check in `LLVMExports.cmake`.Differential Revision: https://reviews.llvm.org/D72384mlir/test/mlir-cpu-runner/cblas_interface.cppmlir/test/mlir-cpu-runner/include/cblas_interface.hmlir/test/mlir-cpu-runner/include/mlir_runner_utils.hmlir/test/mlir-cpu-runner/CMakeLists.txtmlir/test/mlir-cpu-runner/include/cblas.hCommit 016bf03ef6fcd9dce43b0c17971f76323f07a684 by zinenko[mlir] add a missing dependency for Linalg conversionWe were seeing some occasional build failures that would come and go. Itappeared to be this missing dependence.Differential Revision: https://reviews.llvm.org/D72419mlir/lib/Conversion/LinalgToLLVM/CMakeLists.txtCommit cc95bb1f57c674c0efdfc134eab8ed8c50f2a6e3 by Amara Emerson[AArch64][GlobalISel] Implement selection of <2 x float> vector splat.Also requires making G_IMPLICIT_DEF of v2s32 legal.Differential Revision: https://reviews.llvm.org/D72422llvm/test/CodeGen/AArch64/GlobalISel/legalize-undef.mirllvm/lib/Target/AArch64/AArch64LegalizerInfo.cppllvm/test/CodeGen/AArch64/GlobalISel/opt-shuffle-splat.mirllvm/test/CodeGen/AArch64/arm64-rev.llllvm/lib/Target/AArch64/AArch64InstructionSelector.cppCommit 255cc5a7603fef251192daab2a3336acbcd9aa1c by arsenm2CodeGen: Use LLT instead of EVT in getRegisterByNameOnly PPC seems to be using it, and only checks some simple cases anddoesn't distinguish between FP. Just switch to using LLT to simplify usefrom GlobalISel.llvm/lib/Target/PowerPC/PPCISelLowering.hllvm/lib/Target/X86/X86ISelLowering.cppllvm/lib/Target/Lanai/LanaiISelLowering.cppllvm/lib/Target/Mips/MipsISelLowering.cppllvm/lib/Target/ARM/ARMISelLowering.hllvm/lib/Target/AMDGPU/SIISelLowering.hllvm/lib/Target/Hexagon/HexagonISelLowering.cppllvm/lib/Target/PowerPC/PPCISelLowering.cppllvm/lib/Target/AArch64/AArch64ISelLowering.cppllvm/lib/Target/Mips/MipsISelLowering.hllvm/lib/Target/Sparc/SparcISelLowering.hllvm/lib/Target/RISCV/RISCVISelLowering.hllvm/lib/Target/AMDGPU/SIISelLowering.cppllvm/lib/Target/Lanai/LanaiISelLowering.hllvm/lib/Target/Hexagon/HexagonISelLowering.hllvm/include/llvm/CodeGen/TargetLowering.hllvm/lib/Target/AArch64/AArch64ISelLowering.hllvm/lib/Target/Sparc/SparcISelLowering.cppllvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cppllvm/lib/Target/RISCV/RISCVISelLowering.cppllvm/lib/Target/X86/X86ISelLowering.hllvm/lib/Target/ARM/ARMISelLowering.cppCommit ac53a5f1dc21916f1072031703e0e1833e963454 by arsenm2GlobalISel: Fix else after returnllvm/lib/CodeGen/LowLevelType.cppCommit f33f3d98e9e6322846c3b997260faf3e1165e0dd by arsenm2DAG: Don't use unchecked dyn_castllvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cppCommit 0ea3c7291fb8d463d9c7ae6aaec7a432ef366a51 by arsenm2GlobalISel: Handle llvm.read_registerCompared to the attempt in bdcc6d3d2638b3a2c99ab3b9bfaa9c02e584993a,this uses intermediate generic instructions.llvm/include/llvm/Target/GenericOpcodes.tdllvm/lib/CodeGen/GlobalISel/LegalizerHelper.cppllvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cppllvm/test/CodeGen/AMDGPU/GlobalISel/read_register.llllvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.hllvm/include/llvm/Support/TargetOpcodes.defllvm/lib/CodeGen/GlobalISel/IRTranslator.cppCommit b4a647449fa01bd4e29bce5afef51770cddec664 by arsenm2TableGen/GlobalISel: Add way for SDNodeXForm to work on timmThe current implementation assumes there is an instruction associatedwith the transform, but this is not the case fortimm/TargetConstant/immarg values. These transforms should directlyoperate on a specific MachineOperand in the source instruction. TableGenwould assert if you attempted to define an equivalent GISDNodeXFormEquivusing timm when it failed to find the instruction matcher.Specially recognize SDNodeXForms on timm, and pass the operand index tothe render function.Ideally this would be a separate render function type that looks likevoid renderFoo(MachineInstrBuilder, const MachineOperand&), but thisproved to be somewhat mechanically painful. Add an optional operandindex which will only be passed if the transform should only look at theone source operand.Theoretically it would also be possible to only ever pass theMachineOperand, and the existing renderers would check the parent. Ithink that would be somewhat ugly for the standard usage which may wantto inspect other operands, and I also think MachineOperand shouldeventually not carry a pointer to the parent instruction.Use it in one sample pattern. This isn't a great example, since thetransform exists to satisfy DAG type constraints. This could also beavoided by just changing the MachineInstr's arbitrary choice of operandtype from i16 to i32. Other patterns have nontrivial uses, but thisserves as the simplest example.One flaw this still has is if you try to use an SDNodeXForm defined forimm, but the source pattern uses timm, you still see the \"Failed tolookup instruction\" assert. However, there is now a way to avoid it.llvm/lib/Target/AArch64/AArch64InstructionSelector.cppllvm/lib/Target/AMDGPU/SIInstrInfo.tdllvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cppllvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.hllvm/include/llvm/CodeGen/GlobalISel/InstructionSelectorImpl.hllvm/test/TableGen/GlobalISelEmitter-SDNodeXForm-timm.tdllvm/lib/Target/ARM/ARMInstructionSelector.cppllvm/lib/Target/AMDGPU/AMDGPUGISel.tdllvm/include/llvm/CodeGen/GlobalISel/InstructionSelector.hllvm/test/TableGen/GlobalISelEmitter.tdllvm/utils/TableGen/GlobalISelEmitter.cppllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-amdgcn.ds.swizzle.mirllvm/lib/Target/AMDGPU/DSInstructions.tdllvm/include/llvm/Target/GlobalISel/Target.tdCommit 10edb1d0d4a15812a71f8953bba96a4f1fc9d0af by arsenm2TableGen/GlobalISel: Fix pattern matching of immarg literalsFor arguments that are not expected to be materialized with G_CONSTANT,this was emitting predicates which could never match. It was firstadding a meaningless LLT check, which would always fail due to theoperand not being a register.Infer the cases where a literal should check for an immediate operand,instead of a register This avoids needing to invent a special way ofrepresenting timm literal values.Also handle immediate arguments in GIM_CheckLiteralInt. The commentsstated it handled isImm() and isCImm(), but that wasn't really true.This unblocks work on the selection of all of the complicated AMDGPUintrinsics in future commits.llvm/utils/TableGen/CodeGenInstruction.cppllvm/utils/TableGen/GlobalISelEmitter.cppllvm/test/TableGen/Common/GlobalISelEmitterCommon.tdllvm/test/TableGen/GlobalISelEmitter-immarg-literal-pattern.tdllvm/include/llvm/CodeGen/GlobalISel/InstructionSelectorImpl.hllvm/utils/TableGen/CodeGenInstruction.hllvm/utils/TableGen/CodeGenIntrinsics.hllvm/utils/TableGen/CodeGenTarget.cppCommit 58b3dec6c108eb9ae4af2cde5c831743d5605c79 by Jonas Devlieghere[lldb/Lua] Add lua typemaps for INOUT paramslldb/bindings/lua.swiglldb/bindings/lua/lua-typemaps.swigCommit 68c8b6c4cd117cc962155298f0e1d45056ecc001 by riverriddle[mlir] Use getDenseElementBitwidth instead ofType::getElementTypeBitWidth.Summary: Some data values have a different storage width than thecorresponding MLIR type, e.g. bfloat is currently stored as a double.Reviewed By: nicolasvasilacheDifferential Revision: https://reviews.llvm.org/D72478mlir/unittests/IR/AttributeTest.cppmlir/lib/IR/Attributes.cppCommit 25195541349b1d6dfc03bf7511483110bda69b29 by richardWhen diagnosing the lack of a viable conversion function, also listexplicit functions that are not candidates.It's not always obvious that the reason a conversion was not possible isbecause the function you wanted to call is 'explicit', so explicitly sayif that's the case.It would be nice to rank the explicit candidates higher in thediagnostic if an implicit conversion sequence exists for theirarguments, but unfortunately we can't determine that without potentiallytriggering non-immediate-context errors that we're not permitted toproduce.clang/test/CXX/special/class.inhctor/p3.cppclang/test/CXX/basic/basic.lookup/basic.lookup.qual/namespace.qual/p2.cppclang/test/SemaCXX/explicit.cppclang/test/PCH/cxx-explicit-specifier.cppclang/test/CXX/drs/dr1xx.cppclang/test/CXX/expr/expr.prim/expr.prim.lambda/p11-1y.cppclang/include/clang/AST/DeclCXX.hclang/test/SemaCXX/convert-to-bool.cppclang/test/SemaCXX/copy-initialization.cppclang/include/clang/Basic/DiagnosticSemaKinds.tdclang/lib/Sema/SemaInit.cppclang/test/SemaCXX/converting-constructor.cppclang/test/SemaCXX/conversion-function.cppclang/test/CXX/drs/dr15xx.cppclang/include/clang/Sema/Overload.hclang/test/SemaCXX/cxx2a-explicit-bool.cppclang/test/CXX/over/over.match/over.match.funcs/over.match.copy/p1.cppclang/test/CXX/dcl.decl/dcl.init/dcl.init.ref/p5.cppclang/test/SemaCXX/default1.cppclang/lib/Sema/SemaOverload.cppclang/test/CXX/dcl.decl/dcl.init/p14-0x.cppCommit 5fe4679cc9cfb4941b766db07bf3cd928075d204 by arsenm2AVR: Update for getRegisterByName changellvm/lib/Target/AVR/AVRISelLowering.cppllvm/lib/Target/AVR/AVRISelLowering.hCommit b81c8c6976b987a25fc54fa2bf3524919759a898 by Jonas Devlieghere[lldb] Remove spurious filelldb/lldb/cmake/modules/FindPythonInterpAndLibs.cmakeCommit cd69e4c74c174101817c9f6b7c02374ac6a7476f by Stanislav.Mekhanoshin[AMDGPU] Fix bundle schedulingBundles coming to scheduler considered free, i.e. zero latency. Fixed.Differential Revision: https://reviews.llvm.org/D72487llvm/lib/Target/AMDGPU/AMDGPUSubtarget.cppllvm/test/CodeGen/AMDGPU/llvm.amdgcn.ds.gws.init.llllvm/test/CodeGen/AMDGPU/sint_to_fp.llllvm/test/CodeGen/AMDGPU/min.llllvm/test/CodeGen/AMDGPU/uint_to_fp.llllvm/lib/Target/AMDGPU/SIInstrInfo.cppllvm/test/CodeGen/AMDGPU/setcc-opt.llllvm/test/CodeGen/AMDGPU/llvm.amdgcn.ds.gws.barrier.llllvm/test/CodeGen/AMDGPU/misched-killflags.mirllvm/test/CodeGen/AMDGPU/wave32.llllvm/test/CodeGen/AMDGPU/scratch-simple.llllvm/test/CodeGen/AMDGPU/mul24-pass-ordering.llllvm/test/CodeGen/AMDGPU/spill-vgpr-to-agpr.llllvm/test/CodeGen/AMDGPU/zero_extend.llllvm/lib/Target/AMDGPU/SIInstrInfo.hllvm/test/CodeGen/AMDGPU/mul_uint24-amdgcn.llllvm/test/CodeGen/AMDGPU/selectcc-opt.llllvm/test/CodeGen/AMDGPU/sub.i16.llllvm/test/CodeGen/AMDGPU/packed-op-sel.llCommit 02113918ed6b5e514afd7d1e007131d36ac13f1d by Jason MolendaWhen reading Aux file in chunks, read consecutive byte rangesqemu has a very small maximum packet size (4096) and it actually onlyuses half of that buffer for some implementation reason, so when lldbasks for the register target definitions, the x86_64 definition islarger than 4096/2 and we need to fetch it in two parts.This patch and test is fixing a bug inGDBRemoteCommunicationClient::ReadExtFeature when reading a target filein multiple parts.  lldb was assuming that it would always get back themaximum packet size response (4096) instead of using the actual sizereceived and asking for the next group of bytes.We now have two tests in gdb_remote_client for unique features of qemu -TestNestedRegDefinitions.py would test the ability of lldb to followmultiple levels of xml includes; I opted to create a separateTestRegDefinitionInParts.py test to test this wrinkle in qemu's gdbremote serial protocol stub implementation. Instead of combining bothtests into a single test file.<rdar://problem/49537922>lldb/source/Plugins/Process/gdb-remote/GDBRemoteCommunicationClient.cpplldb/packages/Python/lldbsuite/test/functionalities/gdb_remote_client/TestRegDefinitionInParts.pyCommit 375371cc8bff7ba02d0a2203f80de5e640fcadf1 by maskray[ELF] Fix includeInDynsym() when an undefined weak is merged with a lazydefinitionAn undefined weak does not fetch the lazy definition. A lazy weak symbolshould be considered undefined, and thus preemptible if .dynsym exists.D71795 is not quite an NFC. It errors on an R_X86_64_PLT32 referencingan undefined weak symbol. isPreemptible is false (incorrect) => R_PLT_PCis optimized to R_PC => in isStaticLinkTimeConstant, an error is emittedwhen an R_PC is applied on an undefined weak (considered absolute).lld/test/ELF/weak-undef-lib.slld/ELF/Symbols.cppCommit 5cabb8357aeb3bbecaef4825c3a594f86ef94c8d by arsenm2AMDGPU/GlobalISel: Fix G_EXTRACT_VECTOR_ELT mapping for s-v caseIf an SGPR vector is indexed with a VGPR, the actual indexing will bedone on the SGPR and produce an SGPR. A copy needs to be inserted insidethe waterwall loop to the VGPR result.llvm/test/CodeGen/AMDGPU/GlobalISel/regbankselect-extract-vector-elt.mirllvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.hllvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cppCommit 35c3d101aee240f6c034f25ff6800fda22a89987 by arsenm2AMDGPU/GlobalISel: Select G_EXTRACT_VECTOR_ELTDoesn't try to do the fold into the base register of an add of aconstant in the index like the DAG path does.llvm/lib/Target/AMDGPU/AMDGPUSubtarget.hllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-extract-vector-elt.mirllvm/lib/Target/AMDGPU/AMDGPUSubtarget.cppllvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cppllvm/lib/Target/AMDGPU/SIISelLowering.cppllvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.hllvm/test/CodeGen/AMDGPU/GlobalISel/extractelement.llCommit 3727ca313783e23696caeae53c688409555ab0fc by douglas.yungRelax opcode checks in test for G_READCYCLECOUNTER to check for only anumber instead of a specific number.llvm/test/CodeGen/AArch64/GlobalISel/legalizer-info-validation.mirCommit f041e9ad706aee7987c5299427c33424fcabbd0d by richardCWG2352: Allow qualification conversions during reference binding.The language wording change forgot to update overload resolution to rankimplicit conversion sequences based on qualification conversions inreference bindings. The anticipated resolution for that oversight isimplemented here -- we order candidates based on qualificationconversion, not only on top-level cv-qualifiers, including rankingreference bindings against non-reference bindings if they differ innon-top-level qualification conversions.For OpenCL/C++, this allows reference binding between pointers withdiffering (nested) address spaces. This makes the behavior of referencebinding consistent with that of implicit pointer conversions, as is thepurpose of this change, but that pre-existing behavior for pointerconversions is itself probably not correct. In any case, it's nowconsistently the same behavior and implemented in only one place.This reinstates commit de21704ba96fa80d3e9402f12c6505917a3885f4,reverted in commit d8018233d1ea4234de68d5b4593abd773db79484, withworkarounds for some overload resolution ordering problems introduced byCWG2352.clang/test/SemaOpenCL/address-spaces-conversions-cl2.0.clclang/include/clang/Sema/Sema.hclang/test/SemaObjCXX/arc-overloading.mmclang/www/cxx_dr_status.htmlclang/lib/Sema/SemaInit.cppclang/www/make_cxx_dr_statusclang/include/clang/Basic/DiagnosticSemaKinds.tdclang/lib/Sema/SemaExprCXX.cppclang/test/CXX/drs/dr4xx.cppclang/test/CXX/drs/dr23xx.cppclang/lib/Sema/SemaOverload.cppclang/test/SemaCXX/ref-init-ambiguous.cppCommit 02c5983310dcd627aecb521e03a16122f42e8a01 by shengchen.kan[NFC] Style cleanupllvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cppCommit efabe427b27643839849ebb61fe2e5db37dff0de by thakisfix a few typos to cycle the botslld/docs/conf.pylld/docs/WebAssembly.rstlld/docs/NewLLD.rstlld/docs/ld.lld.1Commit 01662aeb5d1fcef4f067caec633d0c85bb3062a7 by thakisfix another typo to cycle botsmlir/docs/Dialects/SPIR-V.mdCommit 21a4710c67a97838dd75cf60ed24da11280800f8 by wmi[ThinLTO] Pass CodeGenOpts like UnrollLoops/VectorizeLoop/VectorizeSLPdown to pass builder in ltobackend.Currently CodeGenOpts like UnrollLoops/VectorizeLoop/VectorizeSLP inclang are not passed down to pass builder in ltobackend when new passmanager is used. This is inconsistent with the behavior when new passmanager is used and thinlto is not used. Such inconsistency causes slpvectorization pass not being enabled in ltobackend for O3 + thinltoright now. This patch fixes that.Differential Revision: https://reviews.llvm.org/D72386clang/test/CodeGen/thinlto-slp-vectorize-pm.clld/wasm/CMakeLists.txtlld/COFF/CMakeLists.txtllvm/lib/Passes/PassBuilder.cpplld/ELF/LTO.cppllvm/lib/LTO/LTOBackend.cppllvm/tools/llvm-lto2/CMakeLists.txtlld/ELF/CMakeLists.txtllvm/tools/llvm-lto2/llvm-lto2.cppllvm/test/Other/new-pm-thinlto-defaults.llllvm/test/Other/new-pm-defaults.llclang/lib/CodeGen/BackendUtil.cppllvm/test/tools/llvm-lto2/X86/slp-vectorize-pm.lllld/test/ELF/lto/slp-vectorize-pm.llllvm/include/llvm/LTO/Config.hllvm/test/tools/gold/X86/slp-vectorize-pm.llllvm/tools/gold/gold-plugin.cppCommit 995c18fc5051850782b1c096233867b8e56e0dea by smeenai[xray] Remove cl::sub from alias optionsCurrently running the xray tools generates a number of errors:$ ./bin/llvm-xray: for the   -k option: cl::alias must not have cl::sub(), aliasedoption's cl::sub() will be used!: for the   -d option: cl::alias must not have cl::sub(), aliasedoption's cl::sub() will be used!: for the   -o option: cl::alias must not have cl::sub(), aliasedoption's cl::sub() will be used!: for the   -f option: cl::alias must not have cl::sub(), aliasedoption's cl::sub() will be used!: for the   -s option: cl::alias must not have cl::sub(), aliasedoption's cl::sub() will be used!: for the   -r option: cl::alias must not have cl::sub(), aliasedoption's cl::sub() will be used!: for the   -p option: cl::alias must not have cl::sub(), aliasedoption's cl::sub() will be used!: for the   -m option: cl::alias must not have cl::sub(), aliasedoption's cl::sub() will be used!<snip>Patch by Ryan Mansfield.Differential Revision: https://reviews.llvm.org/D69386llvm/tools/llvm-xray/xray-graph-diff.cppllvm/tools/llvm-xray/xray-graph.cppllvm/tools/llvm-xray/xray-extract.cppllvm/tools/llvm-xray/xray-converter.cppllvm/tools/llvm-xray/xray-account.cppllvm/tools/llvm-xray/xray-stacks.cppCommit b38d0d5bdb353f8496a0fc38b9bbee419b41a321 by sylvestreclang-tidy doc - remove the widthsclang-tools-extra/docs/clang-tidy/checks/list.rstCommit 759c90456d418ffe69e1a2b4bcea2792491a6b5a by ibiryukov[Syntax] Update comment, remove stale FIXME. NFCclang/include/clang/Tooling/Syntax/Tokens.hCommit 8647a72c4a52e0386c0397ce3fbd38121c18b873 by gil.rapaport[LV] VPValues for memory operation pointers (NFCI)Memory instruction widening recipes use the pointer operand of theirload/store ingredient for generating the needed GEPs, making itdifficult to feed these recipes with pointers based on other ingredientsor none at all. This patch modifies these recipes to use a VPValue forthe pointer instead, in order to reduce ingredient def-use usage by ILVas a step towards full VPlan-based def-use relations. The recipes areconstructed with VPValues bound to these ingredients, maintainingcurrent behavior.Differential revision: https://reviews.llvm.org/D70865llvm/lib/Transforms/Vectorize/VPlan.cppllvm/lib/Transforms/Vectorize/LoopVectorizationPlanner.hllvm/lib/Transforms/Vectorize/LoopVectorize.cppllvm/lib/Transforms/Vectorize/VPlanTransforms.cppllvm/lib/Transforms/Vectorize/VPlan.hCommit 164da673009ba6c100ce45b6fa9a5dfd3b0b8e38 by hansRestore order in clang-tidy section of release notesMajor changes are introduction of subsubsections to prevent peopleputting new entries in wrong places. I also polished line length andhighlighting.Patch by Eugene Zelenko!clang-tools-extra/docs/ReleaseNotes.rstCommit 921f871ac438175ca8fcfcafdfcfac4d7ddf3905 by sgueltonAllow system header to provide their own implementation of some builtinIf a system header provides an (inline) implementation of some of theirfunction, clang still matches on the function name and generate theappropriate llvm builtin, e.g. memcpy. This behavior is in line withglibc recommendation « users may not provide their own version ofsymbols » but doesn't account for the fact that glibc itself can provideinline version of some functions.It is the case for the memcpy function when -D_FORTIFY_SOURCE=1 is on.In that case an inline version of memcpy calls __memcpy_chk, a functionthat performs extra runtime checks. Clang currently ignores the inlineversion and thus provides no runtime check.This code fixes the issue by detecting functions whose name is a builtinname but also have an inline implementation.Differential Revision: https://reviews.llvm.org/D71082clang/include/clang/AST/Decl.hclang/test/CodeGen/memcpy-nobuiltin.cclang/lib/CodeGen/CodeGenModule.cppclang/lib/CodeGen/CGExpr.cppclang/test/CodeGen/memcpy-nobuiltin.incclang/lib/AST/Decl.cppCommit 45c4b08d8228f64b02b8a4df069aa37d5fa70829 by qiucofan[NFC] [PowerPC] Add isPredicable for basic instrsPowerPC uses a dedicated method to check if the machine instr ispredicable by opcode. However, there's a bit `isPredicable` in instrdefinition. This patch removes the method and set the bit only toopcodes referenced in it.Differential Revision: https://reviews.llvm.org/D71921llvm/lib/Target/PowerPC/PPCInstrInfo.cppllvm/lib/Target/PowerPC/PPCInstrInfo.hllvm/lib/Target/PowerPC/PPCInstrInfo.tdllvm/lib/Target/PowerPC/PPCInstr64Bit.tdCommit ffd0f116754c36146bb21a01b047782ce8a01e2e by kadircet[clangd] Improve type printing in hoverSummary: Do not include tag keywords when printing types for symbolnames, as it will come from SymbolKind. Also suppress them whileprinting definitions to prevent them occuring in template arguments.Make use of `getAsString`, instead of `print` in all places to have aconsistent style across the file.Reviewers: sammccallSubscribers: ilya-biryukov, MaskRay, jkorous, arphaman, usaxena95,cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72450clang-tools-extra/clangd/Hover.cppclang-tools-extra/clangd/unittests/HoverTests.cppCommit abfa27e4f04dd84774bcfe15783942e21be391a5 by kadircet[clangd] Fix markdown rendering in VSCodeSummary: Eventough it is OK to have a new line without any precedingspaces in some markdown specifications, VSCode requires two spacesbefore a new line to break a line inside a paragraph.Reviewers: sammccall, ilya-biryukovSubscribers: MaskRay, jkorous, arphaman, usaxena95, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72462clang-tools-extra/clangd/unittests/FormattedStringTests.cppclang-tools-extra/clangd/FormattedString.cppCommit 346de9b67228f42eb9b55fa3b426b5dedfdb1d40 by sgueltonFix several issues with compiler extensions- Update documentation now that the move to monorepo has been made- Do not tie compiler extension testing to LLVM_BUILD_EXAMPLES- No need to specify LLVM libraries for plugins- Add NO_MODULE option to match Polly specific requirements (i.e.building the module *and* linking it statically)- Issue a warning when building the compiler extension with LLVM_BYE_LINK_INTO_TOOLS=ON, as it modifies the behavior of clang,which only makes sense for testing purpose.Still mark llvm/test/Feature/load_extension.ll as XFAIL because of aManagedStatic dependency that's going to be fixed in a seperate commit.Differential Revision: https://reviews.llvm.org/D72327polly/lib/CMakeLists.txtllvm/test/lit.cfg.pyllvm/cmake/modules/AddLLVM.cmakellvm/examples/Bye/CMakeLists.txtCommit 67bf9a6154d4b82c6c01aad01141bf08c1bbd0f6 by sjoerd.meijer[SVEV] Recognise hardware-loop intrinsic loop.decrement.regTeach SCEV about the @loop.decrement.reg intrinsic, which has exactlythe same semantics as a sub expression. This allows us to queryhardware-loops, which contain this @loop.decrement.reg intrinsic, sothat we can calculate iteration counts, exit values, etc. ofhardwareloops.This \"int_loop_decrement_reg\" intrinsic is defined as \"IntrNoDuplicate\".Thus, while hardware-loops and tripcounts now become analysable by SCEV,this prevents the usual loop transformations from applyingtransformations on hardware-loops, which is what we want at this point,for which I have added test cases for loopunrolling and IndVarSimplifyand LFTR.Differential Revision: https://reviews.llvm.org/D71563llvm/test/Transforms/LoopUnroll/ARM/dont-unroll-loopdec.llllvm/unittests/Analysis/ScalarEvolutionTest.cppllvm/lib/Analysis/ScalarEvolution.cppllvm/test/Transforms/IndVarSimplify/lftr.llCommit 356685a1d8972180f472c1333e8e89dbcc704c1d by sjoerd.meijerFollow up of 67bf9a6154d4b82c, minor fix in test case, removed duplicateoptionllvm/test/Transforms/LoopUnroll/ARM/dont-unroll-loopdec.llCommit 41f4dfd63ea0fe995ddfba1838aa5ed972cc1377 by jaskiewiczs[libcxx] Force-cache LIBCXX_CXX_ABI_LIBRARY_PATHSummary: The `LIBCXX_CXX_ABI_LIBRARY_PATH` CMake variable is cached oncein libcxx/cmake/Modules/HandleLibCXXABI.cmake in the `setup_abi_lib`macro, and then cached again in libcxx/test/CMakeLists.txt. There, if itis not set to a value, it is by default set to `LIBCXX_LIBRARY_DIR`.However, this new value is not actually cached, because the old (empty)value has been already cached. Use the `FORCE` CMake flag so that it issaved to the cache.This should not break anything, because the code changed here previouslyhad no effect, when it should have.Reviewers: jroelofs, bcraig, ldionne, EricWF, mclow.lists, vvereschaka,eastigReviewed By: vvereschakaSubscribers: mgorny, christof, dexonsmith, libcxx-commitsTags: #libcDifferential Revision: https://reviews.llvm.org/D69169libcxx/test/CMakeLists.txtCommit e44dedd3631c20bc4a1e62b68919a11168d39354 by jaskiewiczs[CMake] Support running libc++abi tests in CrossWinToARMLinux cache fileSummary: Now that D71894 has landed, we're able to run libc++abi testsremotely.For that we can use the same CMake command as before. The tests can berun using `ninja check-cxxabi`.Reviewers: andreil99, vvereschaka, aorlovReviewed By: vvereschaka, aorlovSubscribers: mgorny, kristof.beyls, ldionne, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72459clang/cmake/caches/CrossWinToARMLinux.cmakeCommit a1cc19b581443c84fff4c6e6d4e341351ef3203c by sgueltonXFAIL load_extension.ll test on macOS onlyOther setup have been fixed by 346de9b67228f42eb9b55fa3b426b5dedfdb1d40llvm/test/Feature/load_extension.llCommit cfd849840134c4632c2f4fa498dfb93c47825b24 by benny.kra[MIR] Fix cyclic dependency of MIR formatterSummary: Move MIR formatter pointer from TargetMachine toTargetInstrInfo to avoid cyclic dependency between target & codegen.Reviewers: dsanders, bkramer, arsenmSubscribers: wdng, hiraditya, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72485llvm/lib/CodeGen/MachineInstr.cppllvm/include/llvm/CodeGen/TargetInstrInfo.hllvm/include/llvm/Target/TargetMachine.hllvm/lib/CodeGen/MIRPrinter.cppllvm/include/llvm/CodeGen/MachineMemOperand.hllvm/lib/CodeGen/MachineOperand.cppllvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cppllvm/lib/Target/TargetMachine.cppllvm/lib/CodeGen/MIRParser/MIParser.cppCommit 498856fca5b9306f545554aeec93c7c058f03eb3 by benny.kra[LV] Silence unused variable warning in Release builds. NFC.llvm/lib/Transforms/Vectorize/LoopVectorize.cppCommit 2e66405d8d8ed818cb9310b6c33419bd8d803d96 by llvm-devDon't use dyn_cast_or_null if we know the pointer is nonnull.Fix clang static analyzer null dereference warning by using dyn_castinstead.llvm/lib/Transforms/Instrumentation/MemorySanitizer.cppCommit 3804ac63d5d8443d0b6826b566e9cbb84d8898f3 by llvm-dev[X86][AVX] Add tests for v8f32/v8i32 089abcde and 0189abcd shufflesMentioned in D66004llvm/test/CodeGen/X86/vector-shuffle-256-v8.llCommit b2cd273416f82b6c5efeb6138276d9e6b6f8256e by llvm-devFix Wdocumentation warning. NFCI.llvm/lib/CodeGen/MachineOutliner.cppCommit f3849f739e52510871d11361125f0ef239f11603 by llvm-devFix Wdocumentation warning. NFCI.clang/lib/Parse/ParseExpr.cppCommit 902974277d507a149e33487d32e4ba58c41451b6 by Raphael IsemannData formatters: Look through array element typedefsSummary: Motivation: When formatting an array of typedefed chars, wewould like to display the array as a string.The string formatter currently does not trigger because the formatterlookup does not resolve typedefs for array elements (this behavior isinconsistent with pointers, for those we do look through pointeetypedefs). This patch tries to make the array formatter lookup somewhatconsistent with the pointer formatter lookup.Reviewers: teemperor, clayborgReviewed By: teemperor, clayborgSubscribers: clayborg, lldb-commitsTags: #lldbDifferential Revision: https://reviews.llvm.org/D72133lldb/packages/Python/lldbsuite/test/functionalities/data-formatter/array_typedef/main.cpplldb/source/API/SBType.cpplldb/source/DataFormatters/FormatManager.cpplldb/source/Symbol/ClangASTContext.cpplldb/packages/Python/lldbsuite/test/functionalities/data-formatter/array_typedef/TestArrayTypedef.pylldb/packages/Python/lldbsuite/test/functionalities/data-formatter/array_typedef/MakefileCommit 870f6917936fdb8050be3ca3c67d9259390c4326 by llvm-devFix \"pointer is null\" static analyzer warnings. NFCI.Assert that the pointers are non-null before dereferencing them.llvm/lib/Target/Hexagon/HexagonEarlyIfConv.cppCommit 1ccee0e86386762bd742fd067391b6c4be089806 by simon.tatham[ARM,MVE] Make `vqrshrun` generate the right instruction.Summary: A copy-paste error in `arm_mve.td` meant that the MVE`vqrshrun` intrinsic family was generating the `vqshrun` machineinstruction, because in the IR intrinsic call, the rounding flagargument was set to 0 rather than 1.Reviewers: dmgreen, MarkMurrayARM, miyuki, ostannardReviewed By: dmgreenSubscribers: kristof.beyls, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72496clang/test/CodeGen/arm-mve-intrinsics/vector-shift-imm-dyadic.cclang/include/clang/Basic/arm_mve.tdCommit 8c12769f3046029e2a9b4e48e1645b1a77d28650 by diogo.sampaio[ARM][Thumb2] Fix ADD/SUB invalid writes to SPSummary: This patch fixes pr23772  [ARM] r226200 can emit illegal thumb2instruction: \"sub sp, r12, #80\". The violation was that SUB and ADD(reg, immediate) instructions can only write to SP if the sourceregister is also SP. So the above instructions was unpredictable. Toenforce that the instruction t2(ADD|SUB)ri does not write to SP we nowenforce the destination register to be rGPR (That exclude PC and SP).Different than the ARM specification, that defines one instruction thatcan read from SP, and one that can't, here we inserted one that can'twrite to SP, and other that can only write to SP as to reuse most of thehard-coded size optimizations. When performing this change, it uncoveredthat emitting Thumb2 Reg plus Immediate could not emit all variants ofADD SP, SP #imm instructions before so it was refactored to be able to.(see test/CodeGen/Thumb2/mve-stacksplot.mir where we use a subw sp, sp,Imm12 variant ) It also uncovered a disassembly issue of adr.winstructions, that were only written as SUBW instructions (seellvm/test/MC/Disassembler/ARM/thumb2.txt).Reviewers: eli.friedman, dmgreen, carwil, olista01, efriedmaReviewed By: efriedmaSubscribers: john.brawn, efriedma, ostannard, kristof.beyls, hiraditya,dmgreen, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D70680llvm/test/CodeGen/Thumb2/bug-subw.llllvm/lib/Target/ARM/ARMLoadStoreOptimizer.cppllvm/test/MC/ARM/invalid-addsub.sllvm/lib/Target/ARM/Thumb2InstrInfo.cppllvm/test/MC/ARM/negative-immediates.sllvm/test/MC/ARM/thumb-diagnostics.sllvm/test/CodeGen/Thumb2/fp16-stacksplot.mirllvm/lib/Target/ARM/ARMAsmPrinter.cppllvm/lib/Target/ARM/AsmParser/ARMAsmParser.cppllvm/lib/Target/ARM/Disassembler/ARMDisassembler.cppllvm/test/MC/Disassembler/ARM/thumb2.txtllvm/test/CodeGen/Thumb2/mve-stacksplot.mirllvm/test/MC/Disassembler/ARM/thumb-tests.txtllvm/test/MC/ARM/basic-thumb2-instructions.sllvm/test/CodeGen/ARM/GlobalISel/thumb-select-load-store.mirllvm/test/MC/ARM/register-token-source-loc.sllvm/test/MC/Disassembler/ARM/invalid-thumbv7.txtllvm/test/CodeGen/ARM/GlobalISel/thumb-select-arithmetic-ops.mirllvm/lib/Target/ARM/ARMBaseInstrInfo.cppllvm/test/MC/Disassembler/ARM/thumb2-v8.txtllvm/test/CodeGen/Thumb2/peephole-cmp.mirllvm/test/CodeGen/Thumb2/peephole-addsub.mirllvm/lib/Target/ARM/ARMInstrThumb2.tdllvm/test/CodeGen/MIR/ARM/thumb2-sub-sp-t3.mirCommit 5b7612792aeb5b161fdd69997db2a64b08f075b6 by pavel[lldb/lua] Make convenience_variables.test compatible with lua-5.1lldb/test/Shell/ScriptInterpreter/Lua/convenience_variables.testCommit e65282deca8455d1cc6d83b7016af9aa374f9f89 by pavel[lldb/DWARF] Don't automatically search dwo unit attributesThis patch removes the code (deep inside DWARFDebugInfoEntry) whichautomagically returned the attributes of the dwo unit DIE when askingfor the attributes of the skeleton unit.  This is fairly hacky, and notconsistent with how llvm DWARF parser operates.Instead, I change the code the explicitly request (viaGetNonSkeletonUnit) the right unit to search (there were just two placesthat needed this). If it turns out we need this more often, we cancreate a utility function (external to DWARFUnit) for doing this.lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.cpplldb/source/Plugins/SymbolFile/DWARF/DWARFDebugInfoEntry.cpplldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.hlldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cppCommit 57a51b689e7b99c694a028104b0b5a69b80fd002 by ibiryukov[CodeComplete] Suggest 'return nullptr' in functions returning pointersReviewers: kadircetSubscribers: cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72497clang/test/CodeCompletion/patterns.cppclang/lib/Sema/SemaCodeComplete.cppCommit c88e298b69409e35e35ab601592197f5a2bc1c30 by pavel[lldb] Surpress \"bitfield too small\" gcc warningGcc produces this (technically correct) warning when storing anexplicitly-sized enum in a bitfield. Surpress that by changing the typeof the bitfield to an integer. The same approach is used elsewhere inllvm (e.g. 56b5eab12).lldb/include/lldb/Symbol/DebugMacros.hCommit 564481aebe18a723c9cfe9ea9ca5808771f7e9d8 by andrew.ng[Support] ThreadPoolExecutor fixes for Windows/MinGWChanged ThreadPoolExecutor to no longer use detached threads and insteadto join threads on destruction. This is to prevent intermittent crashingon Windows when doing a normal full exit, e.g. via exit().Changed ThreadPoolExecutor to be a ManagedStatic so that it can bestopped on llvm_shutdown(). Without this, it would only be stopped inthe destructor when doing a full exit. This is required to avoidintermittent crashing on Windows due to a race condition between theThreadPoolExecutor starting up threads and the process doing a fastexit, e.g. via _exit().The Windows crashes appear to only occur with the MSVC static runtimesand are more frequent with the debug static runtime.These changes also prevent intermittent deadlocks on exit with the MinGWruntime.Differential Revision: https://reviews.llvm.org/D70447llvm/lib/Support/Parallel.cpplld/Common/ErrorHandler.cppCommit e4d672971030fe26dbb8237038038c3ff9ae7541 by Tatyana Krasnukha[lldb][tests] Take into account all parent's categories when traversefolders upwardsThis is needed to not re-write parent's categories by categories of anested folder, e.g. commands/expression/completion specify \"cmdline\"category, however it still belongs to parent's \"expression\" category.The sentinel \".categories\" in the test-suite root directory is no longerneeded.Differential Revision: https://reviews.llvm.org/D71905lldb/packages/Python/lldbsuite/test/test_result.pylldb/packages/Python/lldbsuite/test/.categoriesCommit 9ba151274869c377921a09ba0bd635412da755ef by Tatyana Krasnukha[lldb][test] NFC, re-use _getTestPath() functionlldb/packages/Python/lldbsuite/test/test_result.pyCommit 76e9c2a9870e36415eb343d28942a42296f85597 by ulrich.weigand[FPEnv] Generate constrained FP comparisons from clangUpdate the IRBuilder to generate constrained FP comparisons inCreateFCmp when IsFPConstrained is true, similar to the other places inthe IRBuilder.Also, add a new CreateFCmpS to emit signaling FP comparisons, and use itin clang where comparisons are supposed to be signaling(currently, only when emitting code for the <, <=, >, >= operators).Note that there is currently no way to add fast-math flags to aconstrained FP comparison, since this is implemented as an intrinsiccall that returns a boolean type, and FMF are only allowed for callsreturning a floating-point type. However, given the discussion aroundhttps://bugs.llvm.org/show_bug.cgi?id=42179, it seems that FCmp itselfreally shouldn't have any FMF either, so this is probably OK.Reviewed by: craig.topperDifferential Revision: https://reviews.llvm.org/D71467clang/lib/CodeGen/CGExprScalar.cppclang/test/CodeGen/fpconstrained-cmp-double.cclang/test/CodeGen/fpconstrained-cmp-float.cllvm/include/llvm/IR/IRBuilder.hCommit b3af8ab7f83c2a825c584ddedf5cc9207ca66b44 by Tatyana Krasnukha[lldb][tests] Cleanup '.categories'lldb/packages/Python/lldbsuite/test/commands/command/.categorieslldb/packages/Python/lldbsuite/test/functionalities/data-formatter/data-formatter-objc/.categorieslldb/packages/Python/lldbsuite/test/commands/expression/no-deadlock/.categorieslldb/packages/Python/lldbsuite/test/commands/command/history/.categorieslldb/packages/Python/lldbsuite/test/commands/command/script/.categorieslldb/packages/Python/lldbsuite/test/commands/command/script_alias/.categorieslldb/packages/Python/lldbsuite/test/commands/command/source/.categoriesCommit b1bb5ce96d349689085eab38121c85737de1fcaa by diogo.sampaioReverting, broke some bots. Need further investigation.Summary: This reverts commit 8c12769f3046029e2a9b4e48e1645b1a77d28650.Reviewers:Subscribers:llvm/test/CodeGen/Thumb2/peephole-cmp.mirllvm/test/MC/Disassembler/ARM/invalid-thumbv7.txtllvm/test/CodeGen/Thumb2/bug-subw.llllvm/lib/Target/ARM/ARMAsmPrinter.cppllvm/test/CodeGen/MIR/ARM/thumb2-sub-sp-t3.mirllvm/lib/Target/ARM/Disassembler/ARMDisassembler.cppllvm/test/CodeGen/Thumb2/peephole-addsub.mirllvm/test/CodeGen/ARM/GlobalISel/thumb-select-arithmetic-ops.mirllvm/test/MC/ARM/invalid-addsub.sllvm/test/MC/Disassembler/ARM/thumb2.txtllvm/lib/Target/ARM/Thumb2InstrInfo.cppllvm/lib/Target/ARM/ARMLoadStoreOptimizer.cppllvm/lib/Target/ARM/AsmParser/ARMAsmParser.cppllvm/test/CodeGen/Thumb2/fp16-stacksplot.mirllvm/test/MC/ARM/basic-thumb2-instructions.sllvm/test/MC/ARM/negative-immediates.sllvm/test/MC/Disassembler/ARM/thumb-tests.txtllvm/test/CodeGen/Thumb2/mve-stacksplot.mirllvm/lib/Target/ARM/ARMBaseInstrInfo.cppllvm/test/CodeGen/ARM/GlobalISel/thumb-select-load-store.mirllvm/test/MC/Disassembler/ARM/thumb2-v8.txtllvm/lib/Target/ARM/ARMInstrThumb2.tdllvm/test/MC/ARM/register-token-source-loc.sllvm/test/MC/ARM/thumb-diagnostics.sCommit e49c3c8f2ef97bdf256ca76f3d001eeb79361d56 by benny.kraSprinkle some constexpr on default ctors so the compiler can diagnoseunused instances. NFCI.mlir/lib/Dialect/SPIRV/SPIRVOps.cppmlir/include/mlir/IR/Attributes.hmlir/include/mlir/IR/Types.hmlir/lib/Dialect/VectorOps/VectorOps.cppmlir/include/mlir/IR/Value.hCommit 4569f63ae1cb520ce28f08f4800dfbcd5f255eed by sjoerd.meijerARMLowOverheadLoops: a few more dbg msgs to better trace rejected TPloops. NFC.llvm/lib/Target/ARM/ARMLowOverheadLoops.cppCommit 2f2f41e12c5201b600d887d22ce5cb4afd2ff594 by jan.kratochvilRangeDataVector: Support custom sorting for D63540As suggested by @labath extended RangeDataVector so that user canprovide custom sorting of the Entry's `data' field for D63540.       https://reviews.llvm.org/D63540RangeData functions were used just by RangeDataVector (=after I removedthem LLDB still builds fine) which no longer uses them so I removedthem.Differential revision: https://reviews.llvm.org/D72460lldb/unittests/Utility/RangeMapTest.cpplldb/include/lldb/Utility/RangeMap.hCommit 3772ea9dd9368cfdc73595854c143bc3f16a5ade by sam.parker[ARM][MVE] Tail predicate VMAX,VMAXA,VMIN,VMINAAdd the MVE min and max instructions to our tail predication whitelist.Differential Revision: https://reviews.llvm.org/D72502llvm/unittests/Target/ARM/MachineInstrTest.cppllvm/lib/Target/ARM/ARMInstrMVE.tdCommit f0fd11df7d5488e2747f26a3bfcf62459fee54ad by ulrich.weigand[FPEnv] Invert sense of MIFlag::FPExcept flagIn D71841 we inverted the sense of the SDNode-level flag to ensure allnodes default to potentially raising FP exceptions unless otherwisespecified -- i.e. if we forget to propagate the flag somewhere, theeffect is now only lost performance, not incorrect code.However, the related flag at the MI level still defaults to nodes notraising FP exceptions unless otherwise specified. To be fully on the(conservatively) safe side, we should invert that flag as well.This patch does so by replacing MIFlag::FPExcept withMIFlag::NoFPExcept.(Note that this does also introduce an incompatible change in the MIRformat.)Reviewed By: craig.topperDifferential Revision: https://reviews.llvm.org/D72466llvm/test/CodeGen/X86/fp-intrinsics-flags.llllvm/lib/CodeGen/MIRParser/MIParser.cppllvm/lib/CodeGen/MIRPrinter.cppllvm/lib/CodeGen/MIRParser/MILexer.cppllvm/test/CodeGen/X86/sqrt-fastmath-mir.llllvm/lib/CodeGen/MIRParser/MILexer.hllvm/lib/CodeGen/MachineInstr.cppllvm/test/CodeGen/X86/vector-constrained-fp-intrinsics-flags.llllvm/test/CodeGen/X86/fast-isel-select-sse.llllvm/lib/Target/SystemZ/SystemZElimCompare.cppllvm/lib/CodeGen/SelectionDAG/InstrEmitter.cppllvm/include/llvm/CodeGen/MachineInstr.hllvm/test/CodeGen/X86/fp-intrinsics-flags-x86_64.llCommit e20a3b9b6c028ef3fea92ddb19e98db45e3d0509 by Tatyana Krasnukha[lldb][tests][NFC] Unify variable naming conventionlldb/packages/Python/lldbsuite/test/dotest_args.pylldb/packages/Python/lldbsuite/test/dotest.pylldb/packages/Python/lldbsuite/test/configuration.pylldb/packages/Python/lldbsuite/test/lldbtest.pylldb/packages/Python/lldbsuite/test/test_result.pyCommit 3eea082535e232b35e6b2dab45dd81728b2ae7f4 by Tatyana Krasnukha[lldb][tests] Make it possible to expect failure for a whole categoryThere already are decorators and \"--excluded\" option to marktest-cases/files as expected to fail. However, when a new test file isadded and it which relates to a feature that a target doesn't support,this requires either adding decorators to that file or modifying thefile provided as \"--excluded\" option value.The purpose of this patch is to avoid any modifications in such cases.E.g. if a target doesn't support \"watchpoints\" and passes\"--xfail-category watchpoint\" to dotest, a testing job will not failafter a new watchpoint-related test file is added.Differential Revision: https://reviews.llvm.org/D71906lldb/packages/Python/lldbsuite/test/test_result.pylldb/packages/Python/lldbsuite/test/dotest.pylldb/packages/Python/lldbsuite/test/dotest_args.pylldb/packages/Python/lldbsuite/test/configuration.pyCommit bac995d97896c1e785d709da24c55f0e050eb899 by arsenm2AMDGPU/GlobalISel: Clamp G_ZEXT source sizesAlso clamps G_SEXT/G_ANYEXT, but the implementation is more limited sofewer cases actually work.llvm/test/CodeGen/AMDGPU/GlobalISel/legalize-ashr.mirllvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cppllvm/test/CodeGen/AMDGPU/GlobalISel/legalize-anyext.mirllvm/test/CodeGen/AMDGPU/GlobalISel/legalize-zext.mirllvm/test/CodeGen/AMDGPU/GlobalISel/legalize-shl.mirllvm/test/CodeGen/AMDGPU/GlobalISel/legalize-lshr.mirllvm/test/CodeGen/AMDGPU/GlobalISel/legalize-ptrtoint.mirllvm/test/CodeGen/AMDGPU/GlobalISel/legalize-sext.mirCommit b19c0810e56b552d31247dcff081643799fd97fb by a.bataev[LIBOMPTARGET]Ignore empty target descriptors.Summary: If the dynamically loaded module has been compiled with-fopenmp-targets and has no target regions, it has empty targetdescriptor. It leads to a crash at the runtime if another module has atleast one target region and at least one entry in its descriptor. Theruntime library is unable to load the empty binary descriptor andterminates the execution. Caused by a clang-offload-wrapper.Reviewers: grokos, jdoerfertSubscribers: caomhin, kkwli0, openmp-commitsTags: #openmpDifferential Revision: https://reviews.llvm.org/D72472openmp/libomptarget/src/rtl.cppopenmp/libomptarget/test/offloading/dynamic_module.cCommit 6e3ca962fafb3d2a31279c49f0cde60eb626a002 by jh7370[DebugInfo] Improve error message textUnlike most of our errors in the debug line parser, the \"no end ofsequence\" message was missing any reference to which line table itrefererred to. This change adds the offset to this message.Reviewed by: dblaikieDifferential Revision: https://reviews.llvm.org/D72443lld/test/ELF/undef.sllvm/test/tools/llvm-dwarfdump/X86/debug_line_invalid.testllvm/lib/DebugInfo/DWARF/DWARFDebugLine.cppllvm/unittests/DebugInfo/DWARF/DWARFDebugLineTest.cppCommit 7e02406f6cf180a8c89ce64665660e7cc9dbc23e by jh7370[DebugInfo][NFC] Remove unused variable/fix variable namingReviewed by: MaskRayDifferential Revision: https://reviews.llvm.org/D72159llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cppCommit cdd05f2aea3b950a4e2c496175117e6b47b2a050 by development[NFC] format unittest for ExprMutAnalyzerThis formatting is a preparation for review inhttps://reviews.llvm.org/D54943 to separate pure formatting changes fromactual testing changes.clang/unittests/Analysis/ExprMutationAnalyzerTest.cppCommit d864d93496c5fd0cc473953ab825f07e3d4c4e86 by nemanja.i.ibm[PowerPC] Handle constant zero bits in BitPermutationSelectorWe currently crash when analyzing an AssertZExt node that has some bitsthat are constant zeros (i.e. as a result of an and with a constant).This issue was reported in https://bugs.llvm.org/show_bug.cgi?id=41088and this patch fixes that.Differential revision: https://reviews.llvm.org/D72038llvm/test/CodeGen/PowerPC/pr41088.llllvm/lib/Target/PowerPC/PPCISelDAGToDAG.cppCommit bdd88b7ed3956534a0a71b1ea2bc88c69d48f9b7 by David.ChisnallAdd support for __declspec(guard(nocf))Summary: Avoid using the `nocf_check` attribute with Control Flow Guard.Instead, use a new `\"guard_nocf\"` function attribute to indicate thatchecks should not be added on indirect calls within that function. Addsupport for`__declspec(guard(nocf))` following the same syntax as MSVC.Reviewers: rnk, dmajor, pcc, hans, aaron.ballmanReviewed By: aaron.ballmanSubscribers: aaron.ballman, tomrittervg, hiraditya, cfe-commits,llvm-commitsTags: #clang, #llvmDifferential Revision: https://reviews.llvm.org/D72167clang/include/clang/Basic/AttrDocs.tdclang/test/CodeGen/guard_nocf.cclang/test/CodeGenCXX/guard_nocf.cppclang/lib/Sema/SemaDeclAttr.cppllvm/test/CodeGen/ARM/cfguard-checks.llllvm/test/CodeGen/X86/cfguard-checks.llclang/lib/CodeGen/CGCall.cppllvm/test/CodeGen/AArch64/cfguard-checks.llclang/test/Sema/attr-guard_nocf.cllvm/lib/Transforms/CFGuard/CFGuard.cppclang/include/clang/Basic/Attr.tdCommit e9331a56fead1823d528d6412828fb9e16fd62ff by Adrian PrantlAdd missing nullptr checks.GetPersistentExpressionStateForLanguage() can return a nullptr if itcannot construct a typesystem. This patch adds missing nullptr checks atall uses.Inspired by rdar://problem/58317195Differential Revision: https://reviews.llvm.org/D72413lldb/source/Expression/REPL.cpplldb/source/Plugins/ExpressionParser/Clang/ClangExpressionSourceCode.cpplldb/source/Plugins/ExpressionParser/Clang/ASTResultSynthesizer.cpplldb/source/Target/ABI.cpplldb/source/Expression/UserExpression.cpplldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpplldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.cpplldb/source/Plugins/ExpressionParser/Clang/ClangUserExpression.cppCommit 5e7beb0a4146267f1d65c57543e67ca158aca4aa by gabor.marton[analyzer] Add PlacementNewCheckerSummary: This checker verifies if default placement new is provided withpointers to sufficient storage capacity.Noncompliant Code Example: #include <new> void f() {   short s;   long *lp = ::new (&s) long; }Based on SEI CERT rule MEM54-CPPhttps://wiki.sei.cmu.edu/confluence/display/cplusplus/MEM54-CPP.+Provide+placement+new+with+properly+aligned+pointeThis patch does not implement checking of the alignment.Reviewers: NoQ, xazax.hunSubscribers: mgorny, whisperity, xazax.hun, baloghadamsoftware, szepet,rnkovacs, a.sidorin, mikhail.ramalho, donatTags: #clangDifferential Revision: https://reviews.llvm.org/D71612clang/lib/StaticAnalyzer/Checkers/CMakeLists.txtclang/docs/analyzer/checkers.rstclang/test/Analysis/placement-new.cppclang/lib/StaticAnalyzer/Checkers/CheckPlacementNew.cppclang/include/clang/StaticAnalyzer/Checkers/Checkers.tdclang/test/Analysis/placement-new-user-defined.cppCommit 0b032d7ba7157b62cd0d39f8d2dc0b0efa57a710 by antiagainst[mlir][spirv] Fix typos related to (de)serialization.Fix typos related to (de)serialization of spv.selection.Differential Revision: https://reviews.llvm.org/D72503mlir/lib/Dialect/SPIRV/Serialization/Serializer.cppmlir/lib/Dialect/SPIRV/Serialization/Deserializer.cppCommit 26cdaeb1f05ba140011a43ef1ea8a37d3cf416d9 by spatel[InstCombine] add tests for fsub; NFCConflicting/missing canonicalizations are visible in PR44509:https://bugs.llvm.org/show_bug.cgi?id=44509llvm/test/Transforms/InstCombine/fsub.llCommit fbb64aa69835c8e3e9efe0afc8a73058b5a0fb3c by yhs[BPF] extend BTF_KIND_FUNC to cover global, static and extern funcsPreviously extern function is added as BTF_KIND_VAR. This does not workwell with existing BTF infrastructure as function expected to useBTF_KIND_FUNC and BTF_KIND_FUNC_PROTO.This patch added extern function to BTF_KIND_FUNC. The two bits 0:1 ofbtf_type.info are used to indicate what kind of function it is: 0: static 1: global 2: externDifferential Revision: https://reviews.llvm.org/D71638llvm/test/CodeGen/BPF/BTF/extern-builtin.llllvm/test/CodeGen/BPF/BTF/func-source.llllvm/test/CodeGen/BPF/BTF/extern-var-func.llllvm/test/CodeGen/BPF/BTF/static-var-readonly-sec.llllvm/test/CodeGen/BPF/CORE/offset-reloc-struct-anonymous.llllvm/test/CodeGen/BPF/BTF/binary-format.llllvm/test/CodeGen/BPF/BTF/extern-global-var.llllvm/test/CodeGen/BPF/BTF/static-var-readonly.llllvm/test/CodeGen/BPF/BTF/static-var-zerolen-array.llllvm/test/CodeGen/BPF/BTF/static-var.llllvm/test/CodeGen/BPF/BTF/func-func-ptr.llllvm/test/CodeGen/BPF/BTF/static-var-inited-sec.llllvm/test/CodeGen/BPF/BTF/static-var-sec.llllvm/test/CodeGen/BPF/BTF/extern-var-func-weak.llllvm/test/CodeGen/BPF/BTF/static-var-derived-type.llllvm/test/CodeGen/BPF/CORE/offset-reloc-struct-array.llllvm/test/CodeGen/BPF/BTF/extern-func-arg.llllvm/lib/Target/BPF/BTF.hllvm/test/CodeGen/BPF/BTF/func-typedef.llllvm/lib/Target/BPF/BTFDebug.hllvm/test/CodeGen/BPF/BTF/extern-var-section.llllvm/test/CodeGen/BPF/BTF/static-func.llllvm/test/CodeGen/BPF/BTF/static-var-inited.llllvm/test/CodeGen/BPF/BTF/local-var.llllvm/test/CodeGen/BPF/CORE/offset-reloc-union.llllvm/test/CodeGen/BPF/CORE/offset-reloc-basic.llllvm/lib/Target/BPF/BTFDebug.cppllvm/test/CodeGen/BPF/BTF/extern-var-struct-weak.llllvm/test/CodeGen/BPF/BTF/extern-var-func-weak-section.llllvm/test/CodeGen/BPF/BTF/extern-var-struct.llllvm/test/CodeGen/BPF/BTF/extern-var-weak-section.llllvm/test/CodeGen/BPF/CORE/offset-reloc-multilevel.llllvm/test/CodeGen/BPF/BTF/filename.llllvm/test/CodeGen/BPF/BTF/func-non-void.llllvm/test/CodeGen/BPF/BTF/func-unused-arg.llllvm/test/CodeGen/BPF/BTF/func-void.llCommit 4c5a4514d14537cae5459e03d1fea422664b3bc2 by sam.mccall[clangd] Fix targetDecl() on certain usage of ObjC properties.Summary: In particular there's a common chain:OpaqueValueExpr->PseudoObjectExpr->ObjCPropertyRefExpr->ObjCPropertyDecland we weren't handling the first two edgesReviewers: dgoldman, kadircetSubscribers: ilya-biryukov, MaskRay, jkorous, arphaman, jfb, usaxena95,cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72494clang-tools-extra/clangd/FindTarget.cppclang-tools-extra/clangd/unittests/FindTargetTests.cppCommit 504b3fe5bfed7ea24c7c74f563ef6a8214e24223 by llvmgnsyncbot[gn build] Port 5e7beb0a414llvm/utils/gn/secondary/clang/lib/StaticAnalyzer/Checkers/BUILD.gnCommit a5bdada09defc15d2b009314306f4fcb8fa8458d by llvm-dev[X86][AVX] lowerShuffleAsLanePermuteAndShuffle - consistently normalizemulti-input shuffle elementsWe only use lowerShuffleAsLanePermuteAndShuffle for unary shuffles atthe moment, but we should consistently handle lane index calculationsfor multiple inputs in both the AVX1 and AVX2 paths.Minor (almost NFC) tidyup as I'm hoping to uselowerShuffleAsLanePermuteAndShuffle for binary shuffles soon.llvm/lib/Target/X86/X86ISelLowering.cppCommit cdc9592bf1acb6d8012a4867d2a22458945dcceb by llvm-devFix \"pointer is null\" static analyzer warning. NFCI.Use cast<> instead of dyn_cast<> since we know that the pointer shouldbe valid (and is dereferenced immediately).clang/lib/ARCMigrate/ObjCMT.cppCommit cce4676d6d78ba56e929bd37d65c2667390b68c7 by llvm-devFix \"pointer is null\" static analyzer warning. NFCI.Use castAs<> instead of getAs<> since the pointer is dereferencedimmediately below and castAs will perform the null assertion for us.clang/lib/ARCMigrate/ObjCMT.cppCommit ff92e469caefff9f86e5e812c08b9bba582be5d3 by inouehrs[examples] Add missing dependency in llvm examplesTo fix build failure with BUILD_SHARED_LIBS=ONllvm/examples/Kaleidoscope/BuildingAJIT/Chapter5/CMakeLists.txtllvm/examples/Kaleidoscope/BuildingAJIT/Chapter5/Server/CMakeLists.txtllvm/examples/LLJITExamples/LLJITWithCustomObjectLinkingLayer/CMakeLists.txtCommit dfed052fb3ecef53bf01612ec3fc7df73c2134b7 by jasonliu[AIX] Allow vararg calls when all arguments reside in registersSummary: This patch pushes the AIX vararg unimplemented error diagnosticlater and allows vararg calls so long as all the arguments can be passedin register. This patch extends the AIX calling conventionimplementation to initialize GPR(s) for vararg float arguments. On AIX,both GPR(s) and FPR are allocated for floating point arguments. TheGPR(s) are only initialized for vararg calls, otherwise the callee isexpected to retrieve the float argument in the FPR.f64 in AIX PPC32 requires special handling in order to allocated andinitialize 2 GPRs. This is performed with bitcast, SRL, truncation toinitialize one GPR for the MSW and bitcast, truncations to initializethe other GPR for the LSW.A future patch will follow to add support for arguments passed on thestack.Patch provided by: cebowleratibmReviewers: sfertile, ZarkoCA, hubert.reinterpretcastDifferential Revision: https://reviews.llvm.org/D71013llvm/lib/Target/PowerPC/PPCISelLowering.cppllvm/test/CodeGen/PowerPC/aix-cc-altivec.llllvm/test/CodeGen/PowerPC/aix-cc-abi.llllvm/test/CodeGen/PowerPC/aix_cc_abi.llCommit fd8ded99fe6e9fcae2c98ccad25d6562c5fa8a14 by llvm-devFix \"pointer is null\" static analyzer warning. NFCI.Use castAs<> instead of getAs<> since the pointer is dereferencedimmediately below and castAs will perform the null assertion for us.clang/lib/CodeGen/CGVTables.cppCommit 4d1e23e3b3cd7c72a8b24dc5acb7e13c58a8de37 by maskray[AArch64] Add function attribute \"patchable-function-entry\" to add NOPsat function entryThe Linux kernel uses -fpatchable-function-entry to implementDYNAMIC_FTRACE_WITH_REGS for arm64 and parisc. GCC 8 implemented-fpatchable-function-entry, which can be seen as a generalized form of-mnop-mcount. The N,M form (function entry points before the Mth NOP) iscurrently only used by parisc.This patch adds N,0 support to AArch64 codegen. N is represented as thefunction attribute \"patchable-function-entry\". We will use a differentfunction attribute for M, if we decide to implement it.The patch reuses the existing patchable-function pass, andTargetOpcode::PATCHABLE_FUNCTION_ENTER which is currently used by XRay.When the integrated assembler is used, __patchable_function_entries willbe created for each text section with the SHF_LINK_ORDER flag to prevent--gc-sections (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93197) andCOMDAT (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93195) issues.Retrospectively, __patchable_function_entries should use a PC-relativerelocation type to avoid the SHF_WRITE flag and dynamic relocations.\"patchable-function-entry\"'s interaction with Branch TargetIdentification is still unclear (seehttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=92424 for GCC discussions).Reviewed By: peter.smithDifferential Revision: https://reviews.llvm.org/D72215llvm/lib/Target/AArch64/AArch64AsmPrinter.cppllvm/test/CodeGen/AArch64/patchable-function-entry.llllvm/include/llvm/CodeGen/AsmPrinter.hllvm/lib/CodeGen/AsmPrinter/AsmPrinter.cppllvm/lib/IR/Verifier.cppllvm/lib/CodeGen/PatchableFunction.cppllvm/test/Verifier/invalid-patchable-function-entry.llCommit a8fbdc576990653e92ce1d766659005678fd8514 by maskray[X86] Support function attribute \"patchable-function-entry\"For x86-64, we diverge from GCC -fpatchable-function-entry in that weemit multi-byte NOPs.Differential Revision: https://reviews.llvm.org/D72220llvm/lib/Target/X86/X86MCInstLower.cppllvm/test/CodeGen/X86/patchable-function-entry.llCommit a44c434b68e515ce9f2627367c83ff6b22328261 by maskraySupport function attribute patchable_function_entryThis feature is generic. Make it applicable for AArch64 and X86 becausethe backend has only implemented NOP insertion for AArch64 and X86.Reviewed By: nickdesaulniers, aaron.ballmanDifferential Revision: https://reviews.llvm.org/D72221clang/test/Sema/patchable-function-entry-attr.cclang/test/Sema/patchable-function-entry-attr.cppclang/include/clang/Basic/Attr.tdclang/include/clang/Basic/AttrDocs.tdclang/lib/Sema/SemaDeclAttr.cppclang/test/CodeGen/patchable-function-entry.cclang/test/Misc/pragma-attribute-supported-attributes-list.testclang/lib/CodeGen/CodeGenFunction.cppCommit f17ae668a96eeb69f0664f126cf672e1a05754d2 by maskray[Driver][CodeGen] Add -fpatchable-function-entry=N[,0]In the backend, this feature is implemented with the function attribute\"patchable-function-entry\". Both the attribute and XRay useTargetOpcode::PATCHABLE_FUNCTION_ENTER, so the two features areincompatible.Reviewed By: ostannard, MaskRayDifferential Revision: https://reviews.llvm.org/D72222clang/include/clang/Basic/DiagnosticDriverKinds.tdclang/test/Driver/fpatchable-function-entry.cclang/lib/Frontend/CompilerInvocation.cppclang/include/clang/Basic/CodeGenOptions.defclang/include/clang/Driver/Options.tdclang/lib/CodeGen/CodeGenFunction.cppclang/lib/Driver/ToolChains/Clang.cppclang/test/CodeGen/patchable-function-entry.cclang/lib/Driver/XRayArgs.cppCommit 2d077d6dfa7909a21293ebdac81488367628e0fa by maskray[ELF] Make TargetInfo::writeIgotPlt a no-opRELA targets don't read initial .got.plt entries. REL targets (ARM,x86-32) write the address of the IFUNC resolver to the entry(`write32le(buf, s.getVA())`).The default writeIgotPlt() is not meaningful. Make it a no-op. AArch64and x86-64 will have 0 as initial .got.plt entries associated withIFUNC.Reviewed By: peter.smithDifferential Revision: https://reviews.llvm.org/D72474lld/ELF/Target.hlld/test/ELF/gnu-ifunc-plt.slld/test/ELF/aarch64-gnu-ifunc-plt.slld/ELF/Target.cppCommit f678fc7660b36ce0ad6ce4f05eaa28f3e9fdedb5 by craig.topper[LegalizeVectorOps] Improve handling of multi-result operations.This system wasn't very well designed for multi-result nodes. As aconsequence they weren't consistently registered in the LegalizedNodesmap leading to nodes being revisited for different results.I've removed the \"Result\" variable from the main LegalizeOp method andused a SDNode* instead. The result number from the incoming Op SDValueis only used for deciding which result to return to the caller. WhenLegalizeOp is called it should always register a legalized result forall of its results. Future calls for any other result should be pulledfor the LegalizedNodes map.Legal nodes will now register all of their results in the map instead ofjust the one we were called for.The Expand and Promote handling to use a vector of results similar toLegalizeDAG. Each of the new results is then re-legalized and logged inthe LegalizedNodes map for all of the Results for the node beinglegalized. None of the handles register their own results now. And nonecall ReplaceAllUsesOfValueWith now.Custom handling now always passes result number 0 to LowerOperation.This matches what LegalizeDAG does. Since the introduction of STRICTnodes, I've encountered several issues with X86's custom handling beingcalled with an SDValue pointing at the chain and our custom handlersusing that to get a VT instead of result 0. This should prevent us fromhaving any more of those issues. On return we will update theLegalizedNodes map for all results so we shouldn't call the customhandler again for each result number.I want to push SDNode* further into the Expand and Promote handlers, butI've left that for a follow to keep this patch size down. I've created adummy SDValue(Node, 0) to keep the handlers working.Differential Revision: https://reviews.llvm.org/D72224llvm/test/CodeGen/X86/avx512-cmp.llllvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cppCommit ef239972614cc3c67006f9c298fcfa841818dc77 by Raphael Isemann[lldb] Remove FieldDecl stealing hack by rerouting indirect imports tothe original ASTSummary: This is a port of D67803 that was about preventing indirectimporting to our scratch context when evaluating expressions.D67803 already has a pretty long explanation of how this works, but theidea is that instead of importing declarations indirectly over theexpression AST (i.e., Debug info AST -> Expression AST -> scratch AST)we instead directly import the declaration from the debug info AST tothe scratch AST.The difference from D67803 is that here we have to do this in theASTImporterDelegate (which is our ASTImporter subclass we use in LLDB).It has the same information as the ExternalASTMerger in D67803 as it canaccess the ClangASTImporter (which also keeps track of where Declsoriginally came from).With this patch we can also delete the FieldDecl stealing hack in theClangASTSource (this was only necessary as the indirect imports causedthe creation of duplicate Record declarations but we needed the fieldsin the Record decl we originally found in the scratch ASTContext).This also fixes the current gmodules failures where we fail to findstd::vector fields after an indirect import over the expression AST(where it seems even our FieldDecl stealing hack can't save us from).Reviewers: shafik, aprantlReviewed By: shafikSubscribers: JDevlieghere, lldb-commits, mib, labath, frissTags: #lldbDifferential Revision: https://reviews.llvm.org/D72507lldb/source/Symbol/ClangASTImporter.cpplldb/source/Plugins/ExpressionParser/Clang/ClangASTSource.cppCommit 572b9f468ad6844795fec29a7e671ba64d82e8c2 by Jonas Devlieghere[lldb/Lua] Support loading Lua modulesImplements the command script import command for Lua.Differential revision: https://reviews.llvm.org/D71825lldb/test/Shell/ScriptInterpreter/Lua/command_script_import.testlldb/source/Plugins/ScriptInterpreter/Lua/ScriptInterpreterLua.hlldb/test/Shell/ScriptInterpreter/Lua/Inputs/testmodule.lualldb/source/Plugins/ScriptInterpreter/Lua/Lua.hlldb/source/Plugins/ScriptInterpreter/Lua/Lua.cpplldb/source/Plugins/ScriptInterpreter/Lua/ScriptInterpreterLua.cppCommit a5230ac10b0dac9a1981838209b4cbc84870c08c by daniel_l_sandersUpdate the attribution policy to use the 'Author' property of a gitcommitSummary: The older method of adding 'Patch by John Doe' is documented inthe`Attribution of Changes` section to support correct attribution ofcommits that pre-date the adoption of git.Reviewers: hfinkel, aaron.ballman, mehdi_aminiSubscribers: llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72468llvm/docs/DeveloperPolicy.rstCommit 13ec473b9d4bd4f7a558272932b7c0806171c666 by gabor.marton[analyzer] Move PlacementNewChecker to alphaclang/test/Analysis/placement-new.cppclang/test/Analysis/placement-new-user-defined.cppclang/include/clang/StaticAnalyzer/Checkers/Checkers.tdCommit b590e0fd810e4caf59ab83b04654d42e18faaafb by craig.topper[TargetLowering][ARM][X86] Change softenSetCCOperands handling of ONE toavoid spurious exceptions for QNANs with strict FP quiet comparesONE is currently softened to OGT | OLT. But the libcalls for OGT and OLTlibcalls will trigger an exception for QNAN. At least for X86 withlibgcc. UEQ on the other hand uses UO | OEQ. The UO and OEQ libcallswill not trigger an exception for QNAN.This patch changes ONE to use the inverse of the UEQ lowering. So we nowproduce O & UNE. Technically the existing behavior was correct for asignalling ONE, but since I don't know how to generate one of those fromclang that seemed like something we can deal with later as we would needto fix other predicates as well. Also removing spurious exceptionsseemed better than missing an exception.There are also problems with quiet OGT/OLT/OLE/OGE, but those are harderto fix.Differential Revision: https://reviews.llvm.org/D72477llvm/test/CodeGen/X86/fpcmp-soft-fp.llllvm/lib/CodeGen/SelectionDAG/TargetLowering.cppllvm/test/CodeGen/X86/fp128-libcalls-strict.llllvm/test/CodeGen/X86/fp128-compare.llllvm/test/CodeGen/Thumb2/float-cmp.llCommit 9cd985815abf88bd77bb67f7b9cc80f2032cbbc7 by sbc[lld][WebAssembly] Add libcall symbols to the link when LTO is beingused.This code is copied almost verbatim from the equivalent change to theELF linker:- https://reviews.llvm.org/D50017- https://reviews.llvm.org/D50475The upshot is that libraries containing libcall (such as compiler-rt andlibc) can be compiled with LTO.Fixes PR41384Differential Revision: https://reviews.llvm.org/D71738lld/test/wasm/lto/libcall-archive.lllld/wasm/Symbols.hlld/test/wasm/lto/Inputs/libcall-archive.lllld/wasm/Symbols.cpplld/wasm/Driver.cpplld/wasm/InputFiles.hCommit 815a3f54331c39f2b400776f448dd29b3b03243b by Jonas Devlieghere[CMake] Fix modules build after DWARFLinker reorganizationCreate a dedicate module for the DWARFLinker and make it depend onintrinsics gen.llvm/lib/DWARFLinker/CMakeLists.txtllvm/include/llvm/module.modulemapCommit f28972facc1fce9589feab9803e3e8cfad01891c by Jan Korous[clang] Fix out-of-bounds memory access in ComputeLineNumbersDifferential Revision: https://reviews.llvm.org/D72409clang/lib/Basic/SourceManager.cppclang/unittests/Basic/SourceManagerTest.cppCommit ba91dffafe4d348b469d8ae2b7b1cd00754f72f1 by maskray[Driver][PowerPC] Move powerpcspe logic from cc1 to DriverFollow-up of D72014. It is more appropriate to use a target featureinstead of a SubTypeArch to express the difference.Reviewed By: #powerpc, jhibbitsDifferential Revision: https://reviews.llvm.org/D72433clang/lib/Driver/ToolChains/Arch/PPC.cppclang/test/Driver/ppc-features.cppclang/lib/Basic/Targets/PPC.cppclang/test/Preprocessor/init.cCommit 55d7b22277e1c5e710bac7d4d4dc09db3a22dad8 by steveire[ASTMatchers] Make test more clear about what it is verifyingclang/unittests/ASTMatchers/ASTMatchersTraversalTest.cppCommit 0c29d3ff2233696f663ae34a8aeda23c750ac68f by listmail[Tests] Precommit tests showing default branch padding on skylakeA follow up patch will change the default for the compiler, but not theassembler, just making sure we have testing for each in place.llvm/test/CodeGen/X86/align-branch-boundary-default.llllvm/test/CodeGen/X86/align-branch-boundary-default.sCommit 77da826edad0a7b906c734c6bee3489ef495c746 by Raphael Isemann[lldb] Make CompleteTagDeclsScope completion order deterministicSummary: We iterate over `m_decls_to_complete` to complete declarations.As`m_decls_to_complete` is a set the iteration order can benon-deterministic. The order is currently only non-deterministic when wehave a large set of decls that need to be completed (i.e. more than 32decls, as otherwise the SmallPtrSet is just a linear-searched list).This doesn't really fix any specific bug or has any really observablechange in behavior as the order in which we import should not influenceany semantics. However the order we create decls/types is now alwaysdeterministic which should make debugging easier.Reviewers: labath, mib, shafik, davideReviewed By: shafik, davideSubscribers: davide, abidh, JDevlieghere, lldb-commits, mgrangTags: #lldbDifferential Revision: https://reviews.llvm.org/D72495lldb/source/Symbol/ClangASTImporter.cppCommit 9e13cff44d6b8b9c9c8420870132931c218707cb by Raphael Isemann[lldb] Fix TestClangASTContext.TestFunctionTemplateInRecordConstructionin Debug buildsSummary: In Debug builds we call VerifyDecl inClangASTContext::CreateFunctionDeclaration which in turn calls`getAccess` on the created FunctionDecl. As we passed in a RecordDecl asthe DeclContext for the FunctionDecl, we end up hitting the assert in`getAccess` that checks that we never have a Decl inside a Recordwithout a valid AccessSpecifier. FunctionDecls are never in RecordDecls(that would be a CXXMethodDecl) so setting a access specifier would notbe the correct way to fix this.Instead this patch does the same thing thatDWARFASTParserClang::ParseSubroutine is doing: We pass in theFunctionDecl with the TranslationUnit as the DeclContext. That's notideal but it is how we currently do it when creating our debug info AST,so the unit test should do the same.Reviewers: shafikReviewed By: shafikSubscribers: aprantl, JDevlieghere, lldb-commitsTags: #lldbDifferential Revision: https://reviews.llvm.org/D72359lldb/unittests/Symbol/TestClangASTContext.cppCommit 4ffcec40acebae7161ac7426edc68290bbaca2b8 by aaronImplement new AST matcher hasAnyCapture to match on LambdaExpr captures.Accepts child matchers cxxThisExpr to match on capture of this and alsoon varDecl.clang/unittests/ASTMatchers/ASTMatchersTraversalTest.cppclang/lib/ASTMatchers/Dynamic/Registry.cppclang/include/clang/ASTMatchers/ASTMatchers.hclang/docs/LibASTMatchersReference.htmlCommit f3db1aad2796c62f0d188a74f2901c18e51843c2 by sylvestreMakeUniqueCheck.cpp: explicit the fact that there is an autofix for thischeckerclang-tools-extra/clang-tidy/modernize/MakeUniqueCheck.cppCommit faeeb71a17344171f814144213ac4fbc93be28fd by sylvestreclang-tidy doc: Refresh the list of checkers and polish the scriptclang-tools-extra/docs/clang-tidy/checks/list.rstclang-tools-extra/clang-tidy/add_new_check.pyCommit 71cee218619033115f5e0c7656efc8cee93180e9 by craig.topper[TargetLowering] Use SelectionDAG::getSetCC and remove a repeated callto getSetCCResultType in softenSetCCOperands. NFCIllvm/lib/CodeGen/SelectionDAG/TargetLowering.cppCommit 68cd283f3b074e3b64b9f65e93ceb2de6807c72d by sylvestreclang-tidy doc: unbreak the CIclang-tools-extra/docs/clang-tidy/checks/list.rstCommit a5a6fd3f95a9ecc3ef8732192ce0fd7749135311 by eugenisSummary: update macro for OFF_T so that sanitizer works on AARCH64.Reviewers: vitalybuka, eugenis, MaskRayReviewed By: eugenis, MaskRaySubscribers: MaskRay, kristof.beyls, #sanitizers, llvm-commits, jkz, scwTags: #sanitizers, #llvmDifferential Revision: https://reviews.llvm.org/D72367compiler-rt/lib/sanitizer_common/sanitizer_netbsd.cppcompiler-rt/lib/sanitizer_common/sanitizer_linux.cppcompiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cppcompiler-rt/lib/sanitizer_common/sanitizer_linux_s390.cppcompiler-rt/lib/sanitizer_common/sanitizer_posix.hCommit 1a8c996a8894a6ae2bf3b98780972bc7bdb6b8e6 by Jonas Devlieghere[lldb/Scripts] Remove buildbot.pyThis file is outdated and still references SVN. Buildbots are configuredthrough the zorg repository.lldb/scripts/buildbot.pyCommit e6d219122d5a94fa8642c67c391aeb47fc032c89 by Jonas Devlieghere[lldb/Scripts] Remove remote-build.pyWith Xcode gone this is no longer relevant.lldb/scripts/Python/remote-build.pyCommit 7c47a3719a9e587fdf993637dc09d97b5397483b by Jonas Devlieghere[lldb/Scripts] Move android script from underneath Python dirThe scripts root directory already contains python scripts. No need tokeep this one nested under a dedicated Python directory.lldb/scripts/Python/use_lldb_suite.pylldb/scripts/Python/android/host_art_bt.pylldb/scripts/android/host_art_bt.pyCommit a9052b4dfc1b25bd58480668d221365495fa9101 by Vedant Kumar[AArch64] Add isAuthenticated predicate to MCInstDescAdd a predicate to MCInstDesc that allows tools to determine whether aninstruction authenticates a pointer. This can be used by diagnostictools to hint at pointer authentication failures.Differential Revision: https://reviews.llvm.org/D70329rdar://55089604llvm/include/llvm/Target/Target.tdllvm/lib/Target/AArch64/AArch64InstrInfo.tdllvm/utils/TableGen/CodeGenInstruction.hllvm/unittests/Target/AArch64/InstSizes.cppllvm/utils/TableGen/InstrInfoEmitter.cppllvm/utils/TableGen/CodeGenInstruction.cppllvm/include/llvm/MC/MCInstrDesc.hllvm/utils/TableGen/InstrDocsEmitter.cppllvm/lib/Target/AArch64/AArch64InstrFormats.tdCommit 7ce92dc0b4bcc1044052a06df3f07a94eb890823 by Jonas Devlieghere[lldb/Test] Bypass LLDB_TEST_COMMON_ARGS for certain dotest args (NFC)Rather than serializing every argument through LLDB_TEST_COMMON_ARGS, wecan pass some of them directly using their CMake variable. Although thisdoes introduce some code duplication between lit's site config and thelldb-dotest utility, it also means that it becomes easier to overridethese values (WIP).lldb/test/API/lit.cfg.pylldb/test/API/lit.site.cfg.py.inlldb/test/API/CMakeLists.txtlldb/utils/lldb-dotest/lldb-dotest.inCommit c5adcdc5c88a89241b1150824fc44370c62c7132 by Jonas Devlieghere[lldb/Utils] Remove vim-lldbThe vim-lldb plugin is unmaintained and doesn't work with a recent viminstallation that uses Python 3. This removes it from the LLDBrepository. The code is still available under lldb-tools on GitHub likewe did with for lldb-mi. (https://github.com/lldb-tools/vim-lldb)Differential revision: https://reviews.llvm.org/D72541lldb/utils/vim-lldb/doc/lldb.txtlldb/utils/vim-lldb/python-vim-lldb/vim_ui.pylldb/utils/vim-lldb/python-vim-lldb/plugin.pylldb/utils/vim-lldb/READMElldb/utils/vim-lldb/python-vim-lldb/vim_signs.pylldb/utils/vim-lldb/plugin/lldb.vimlldb/utils/vim-lldb/python-vim-lldb/import_lldb.pylldb/utils/vim-lldb/python-vim-lldb/vim_panes.pylldb/utils/vim-lldb/python-vim-lldb/lldb_controller.pyCommit 4c00dbf22d7f0ad005444b412b450ee4b4779b6a by Vedant Kumarlldbutil: Forward ASan launch info to test inferiorsThis allows an unsanitized test process which loads a sanitized DSO (themotivating example is a Swift runtime dylib) to launch on Darwin.rdar://57290132Differential Revision: https://reviews.llvm.org/D71379lldb/packages/Python/lldbsuite/test/lldbutil.pylldb/test/API/lit.cfg.pyCommit 987bf8b6c14613da907fa78330415e266b97a036 by Stanislav.MekhanoshinLet targets adjust operand latency of bundlesThis reverts the AMDGPU DAG mutation implemented in D72487 and gives amore general way of adjusting BUNDLE operand latency.It also replaces FixBundleLatencyMutation with adjustSchedDependencycallback in the AMDGPU, fixing not only successor latencies butpredecessors' as well.Differential Revision: https://reviews.llvm.org/D72535llvm/lib/Target/AMDGPU/AMDGPUSubtarget.cppllvm/lib/Target/AMDGPU/SIInstrInfo.hllvm/lib/CodeGen/ScheduleDAGInstrs.cppllvm/lib/Target/AMDGPU/AMDGPUSubtarget.hCommit d3ba1e026dbc44e9097ce6ea1c92d065f1fe33e8 by Jonas Devlieghere[lldb/Reproducer] Add SBReproducer::Replay overload (again)I modified the SBAPI under the assumption that nobody was using the oldAPI yet. However, that turns out to be false. So instead of adding thedeafault argument I've reintroduced the old API and made the new one anoverload.lldb/source/API/SBReproducer.cpplldb/include/lldb/API/SBReproducer.hCommit 7a38468e34eeeb59e80b176b97213d205d8d9b41 by richardOnly destroy static locals if they have non-trivial destructors.This fixes a regression introduced in2b4fa5348ee157b6b1a1af44d0137ca8c7a71573 that caused us to emitshutdown-time destruction for variables with ARC ownership, usingC++-specific functions that don't exist in C implementations.clang/test/CodeGenObjC/initialize-function-static.mclang/lib/CodeGen/CGDecl.cppCommit e05e219926f90ccab927b7b1af6d14aa6dd52571 by Vedant Kumar[LockFileManager] Make default waitForUnlock timeout a parameter, NFCPatch by Xi Ge!llvm/include/llvm/Support/LockFileManager.hllvm/lib/Support/LockFileManager.cppCommit 064087581ab98cca7254b4d0f12ecbed13da2692 by mtrofin[NFC][InlineCost] Factor cost modeling out of CallAnalyzer traversal.Summary: The goal is to simplify experimentation on the cost model.Today, CallAnalyzer decides 2 things: legality, and benefit. Therefactoring keeps legality assessment in CallAnalyzer, and factorsbenefit evaluation out, as an extension.Reviewers: davidxl, eramanReviewed By: davidxlSubscribers: kamleshbhalui, fedor.sergeev, hiraditya,baloghadamsoftware, haicheng, a.sidorin, Szelethus, donat.nagy, dkrupp,llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D71733llvm/lib/Analysis/InlineCost.cppCommit ca4a55fabbbebef1752fd4e2913c28bb8b510621 by antiagainst[mlir] NFC: put C++ code emission classes in their own filesThis exposes thse classes so that they can be used in interfaces.Differential Revision: https://reviews.llvm.org/D72514mlir/lib/TableGen/CMakeLists.txtmlir/lib/TableGen/OpClass.cppmlir/tools/mlir-tblgen/OpDefinitionsGen.cppmlir/include/mlir/TableGen/OpClass.hCommit 397215cc309df1171a198b11cab3b241db9441db by antiagainst[mlir][ods] Support dialect specific content emission via hooksThus far we can only generate the same set of methods even foroperations in different dialects. This is problematic for dialects thatwant to generate additional operation class methods programmatically,e.g., a special builder method or attribute getter method. Apparently wecannot update the OpDefinitionsGen backend every time when such a needarises. So this CL introduces a hook into the OpDefinitionsGen backendto allow dialects to emit additional methods and traits to operationclasses.Differential Revision: https://reviews.llvm.org/D72514mlir/include/mlir/TableGen/ODSDialectHook.hmlir/include/mlir/TableGen/Operator.hmlir/tools/mlir-tblgen/OpDefinitionsGen.cppCommit 1b8c84b8dd5a4a294943a6a6f0631d2d3a1f9f27 by richardImprove precision of documentation comment.clang/include/clang/AST/Decl.hCommit ceb801612a678bdffe7e7bf163bd0eed9c9b73a2 by Jessica Paquette[AArch64] Don't generate libcalls for wide shifts on DarwinSimilar to cff90f07cb5cc3.Darwin doesn't always use compiler-rt, and so we can't assume that thesefunctions are available (at least on arm64).llvm/lib/Target/AArch64/AArch64ISelLowering.cppllvm/test/CodeGen/AArch64/shift_minsize.llCommit f4df7f4701d80ce6a2f5674db50f87fbd2dad82f by richardRemove redundant implicit cast creation.FindCompositePointerType has already cast the operands to the compositetype for us in the case where it succeeds.clang/lib/Sema/SemaExpr.cppCommit fbf915f01d46e005146f01553a5d7c6619d19597 by richardAdd a FIXME and corresponding test coverage for some suspicious behaviorforming composite ObjC pointer types in comparisons.clang/test/SemaObjCXX/arc-ptr-comparison.mmclang/test/SemaObjC/arc.mclang/lib/Sema/SemaExpr.cppCommit 9a6f4d451ca7aa06b94a407015fbadb456bc09ef by richardClean up and slightly generalize implementation of composite pointertype computation, in preparation for P0388R4, which adds another fewcases here.We now properly handle forming multi-level composite pointer typesinvolving nested Objective-C pointer types (as is consistent withincluding them as part of the notion of 'similar types' on which thisrule is based). We no longer lose non-CVR qualifiers on nested pointertypes.clang/lib/Sema/SemaExprCXX.cppclang/test/SemaOpenCLCXX/address-space-cond.clclang/test/SemaObjCXX/composite-objc-pointertype.mmCommit 44e0daf16e6985eb44ea9a629402852dbff9cb0b by thakisdriver: Allow -fdebug-compilation-dir=foo in joined form.All 130+ f_Group flags that take an argument allow it after a '=',except for fdebug-complation-dir. Add a Joined<> alias so that itbehaves consistently with all the other f_Group flags.(Keep the old Separate flag for backwards compat.)clang/test/CodeGen/debug-info-compilation-dir.cclang/test/Driver/integrated-as.sclang/test/Driver/clang_f_opts.cclang/test/Driver/cl-options.cclang/lib/Driver/ToolChains/Clang.cppclang/include/clang/Driver/Options.tdclang/test/Driver/fembed-bitcode.cCommit 1d2cd2c0b7d978e22a50e918af708ba67e87c2c1 by maskray[Driver] Fix OptionClass of -fconvergent-functions and -fms-volatile(Joined -> Flag)clang/include/clang/Driver/Options.tdCommit 9b23407063ca41901e9e272bacf8b33eee8251c4 by saar[Concepts] Fix MarkUsedTemplateParameters for exprsD41910 introduced a recursive visitor to MarkUsedTemplateParameters, butdisregarded the 'Depth' parameter, and had incorrect assertions. Thisfixes the visitor and removes the assertions.clang/lib/Sema/SemaTemplateDeduction.cppCommit de0a2247115729eade8249267a47f96f070a7666 by alexandre.ganeaRemove umask testsThese tests were added in 18627115f4d2db5dc73207e0b5312f52536be7dd ande08b59f81d950bd5c8b8528fcb3ac4230c7b736c for validating a refactoring.Removing because they break on ACL-controlled folders on Ubuntu, andtheir added value is low.Differential Revision: https://reviews.llvm.org/D70854llvm/test/Other/umask.llclang/test/Misc/permissions.cppCommit 7c816492197aefbaa2ea3ba0e391f7c6905956bc by Tom.Tan[COFF] Align ARM64 range extension thunks at instruction boundaryRangeExtensionThunkARM64 is created for out-of-range branches on WindowsARM64 because branch instructions has limited bits to encode targetaddress. Currently, RangeExtensionThunkARM64 is appended to itsreferencing COFF section from object file at link time without anyalignment requirement, so if size of the preceding COFF section is notaligned to instruction boundary (4 bytes), RangeExtensionThunkARM64 willemit thunk instructions at unaligned address which is never a validbranch target on ARM64, and usually triggers invalid instructionexception when branching to it.This PR fixes it by requiring such thunks to align at 4 bytes.Differential revision: https://reviews.llvm.org/D72473lld/COFF/Chunks.hlld/test/COFF/arm64-thunks.sCommit bb2553175ac3cc6223ff379b266ee1c23a468d66 by craig.topper[TargetLowering][ARM][Mips][WebAssembly] Remove the ordered FP comparefrom RunttimeLibcalls.def and all associated usagesSummary: This always just used the same libcall as unordered, but thecomparison predicate was different. This change appears to have beenmade when targets were given the ability to override the predicates.Before that they were hardcoded into the type legalizer. At that time wenever inverted predicates and we handled ugt/ult/uge/ule compares byemitting an unordered check ORed with a ogt/olt/oge/ole checks. So onlyordered needed an inverted predicate. Later ugt/ult/uge/ule wereoptimized to only call a single libcall and invert the compare.This patch removes the ordered entries and just uses the inverting logicthat is now present. This removes some odd things in both the Mips andWebAssembly code.Reviewers: efriedma, ABataev, uweigand, cameron.mcinally, kpnReviewed By: efriedmaSubscribers: dschuff, sdardis, sbc100, arichardson, jgravelle-google,kristof.beyls, hiraditya, aheejin, sunfish, atanasyan, Petar.Avramovic,llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72536llvm/lib/Target/ARM/ARMISelLowering.cppllvm/lib/CodeGen/SelectionDAG/TargetLowering.cppllvm/lib/CodeGen/TargetLoweringBase.cppllvm/lib/Target/Mips/Mips16ISelLowering.cppllvm/lib/Target/WebAssembly/WebAssemblyRuntimeLibcallSignatures.cppllvm/include/llvm/IR/RuntimeLibcalls.defllvm/lib/Target/ARM/ARMLegalizerInfo.cppCommit a701be8f036accef9a3dab62fa4baa70ea330a80 by czhengsz[SCEV] [NFC] add more test cases for range of addrecexpr with nsw flagllvm/test/Analysis/ScalarEvolution/range_nw_flag.llCommit 4134d706d9bc48d1634e0d95a5c1698f5fcfd06e by qiucofan[NFC] [PowerPC] Update mi-peephole-splat testUse script to re-generate the test case, for easier comparison withfuture patches.llvm/test/CodeGen/PowerPC/mi-peephole-splat.llCommit 4a32cd11acd7c38f5e0b587d724935ab7a9938a6 by mjbedy[AMDGPU] Remove unnecessary v_mov from a register to itself in WQMlowering.Summary:- SI Whole Quad Mode phase is replacing WQM pseudo instructions withv_mov instructions. While this is necessary for the special handling ofmoving results out of WWM live ranges, it is not necessary for WQM liveranges. The result is a v_mov from a register to itself after every WQMoperation. This change uses a COPY psuedo in these cases, which allowsthe register allocator to coalesce the moves away.Reviewers: tpr, dstuttard, foad, nhaehnleReviewed By: nhaehnleSubscribers: arsenm, kzhuravl, jvesely, wdng, nhaehnle, yaxunl,dstuttard, tpr, t-tye, hiraditya, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D71386llvm/test/CodeGen/AMDGPU/wqm.mirllvm/lib/Target/AMDGPU/SIWholeQuadMode.cppllvm/test/CodeGen/AMDGPU/wqm.llCommit 695804508db048fe3403f2b8bc690633a471a40b by Amara EmersonMark the test/Feature/load_extension.ll test as unsupported on Darwin.With plugins and examples enabled, this XPASSes. Mark it as unsupporteduntil the owner investigates what's going on.llvm/test/Feature/load_extension.llCommit 69806808b918adc9b24bee05654b1d6dad91ef74 by craig.topper[X86] Use ReplaceAllUsesWith instead of ReplaceAllUsesOfValueWith tosimplify some code. NFCIllvm/lib/Target/X86/X86ISelDAGToDAG.cppCommit fcad5b298c7859d7f10908fab7b82983e286bb8d by maskray[X86][Disassembler] Simplify readPrefixesllvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.cppCommit 5fe5c0a60f9a5f32da4316ba0d1732a1e439703b by craig.topper[X86] Preserve fpexcept property when turning strict_fp_extend andstrict_fp_round into stack operations.We use the stack for X87 fp_round and for moving from SSE f32/f64 to X87f64/f80. Or from X87 f64/f80 to SSE f32/f64.Note for the SSE<->X87 conversions the conversion always happens in theX87 domain. The load/store ops in the X87 instructions are able tosignal exceptions.llvm/lib/Target/X86/X86InstrFPStack.tdllvm/lib/Target/X86/X86ISelDAGToDAG.cppCommit c2ddfa876fa90008f1b4ff611256ad5dd4b36d96 by craig.topper[X86] Simplify code by removing an unreachable condition. NFCIFor X87<->SSE conversions, the SSE type is always smaller than the X87type. So we can always use the smallest type for the memory type.llvm/lib/Target/X86/X86ISelDAGToDAG.cppCommit 60346bdbd73da9c944d50ea5dcecad71a05105ac by csiggAdd test for GDB pretty printers.Reviewers: dblaikie, aprantl, davide, JDevlieghereReviewed By: aprantlSubscribers: jmorse, aprantl, merge_guards_bot, mgorny, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72321debuginfo-tests/lit.cfg.pydebuginfo-tests/CMakeLists.txtdebuginfo-tests/llvm-prettyprinters/gdb/prettyprinters.cppdebuginfo-tests/llvm-prettyprinters/gdb/lit.local.cfgdebuginfo-tests/llvm-prettyprinters/gdb/prettyprinters.gdbCommit 81a3d987ced0905bef2e3055bf77ec174bb631c7 by craig.topper[X86] Remove dead code from X86DAGToDAGISel::Select that is no longerneeded now that we don't mutate strict fp nodes. NFCllvm/lib/Target/X86/X86ISelDAGToDAG.cppCommit 0e322c8a1f20ab04ce4f6bc538846859707f2d69 by nikita.ppv[InstCombine] Preserve nuw on sub of geps (PR44419)Fix https://bugs.llvm.org/show_bug.cgi?id=44419 by preserving the nuw onsub of geps. We only do this if the offset has a multiplication as thefinal operation, as we can't be sure the operations is nuw in the othercases without more thorough analysis.Differential Revision: https://reviews.llvm.org/D72048llvm/lib/Transforms/InstCombine/InstCombineInternal.hllvm/lib/Transforms/InstCombine/InstCombineAddSub.cppllvm/test/Transforms/InstCombine/sub-gep.llCommit ad36d29eaed62e33eabab8ffd2006b9ff5fbd719 by nikita.ppv[LoopSimplify] Regenerate test checks; NFCFor D72519.llvm/test/Transforms/LoopSimplify/basictest.llCommit 142ba7d76af4a66037fd180db371da19f35ef5f3 by nikita.ppv[LoopRotate] Add tests for rotate with switch; NFCFor D72420.llvm/test/Transforms/LoopRotate/switch.llCommit 87407fc03c82d880cc42330a8e230e7a48174e3c by nunoplopesDSE: fix bug where we would only check libcalls for name rather thanwhole declllvm/test/Transforms/DeadStoreElimination/libcalls2.llllvm/lib/Transforms/Scalar/DeadStoreElimination.cppllvm/test/Transforms/DeadStoreElimination/libcalls.llCommit 5d069f4314a0d8b124a563e61d161c3c3d3b0536 by flo[X86] Add more complex tests for vector masks used with AND/OR/XOR.Additional test cases for D72524.llvm/test/CodeGen/X86/v8i1-masks.llCommit ce35010d782cb5a69102ad7785eb747f6d747eb4 by llvm-dev[X86][AVX] Add lowerShuffleAsLanePermuteAndSHUFP loweringAdd initial support for lowering v4f64 shuffles to SHUFPD(VPERM2F128(V1,V2), VPERM2F128(V1, V2)), eventually this could be used for v8f32 (andmaybe v8f64/v16f32) but I'm being conservative for the initialimplementation as only v4f64 can always succeed.This currently is only called from lowerShuffleAsLanePermuteAndShuffleso only gets used for unary shuffles, and we limit this to cases wherewe use upper elements as otherwise concating 2 xmm shuffles is probablythe better case.Helps with poor shuffles mentioned in D66004.llvm/lib/Target/X86/X86ISelLowering.cppllvm/test/CodeGen/X86/vector-shuffle-256-v8.llllvm/test/CodeGen/X86/vector-shuffle-256-v4.llCommit 08275a52d83e623f0347fd9396c18f4d21a15c90 by llvm-devFix copy+paste typo in shuffle test namellvm/test/CodeGen/X86/vector-shuffle-256-v8.llCommit 9c74fb402e1b7aad4a509a49ab4792154b8ba2c8 by koraq[Sema] Improve -Wrange-loop-analysis warnings.No longer generate a diagnostic when a small trivially copyable type isused without a reference. Before the test looked for a POD type and hadno size restriction. Since the range-based for loop is only available inC++11 and POD types are trivially copyable in C++11 it's not required totest for a POD type.Since copying a large object will be expensive its size has beenrestricted. 64 bytes is a common size of a cache line and if the objectis aligned the copy will be cheap. No performance impact testing hasbeen done.Differential Revision: https://reviews.llvm.org/D72212clang/lib/Sema/SemaStmt.cppclang/test/SemaCXX/warn-range-loop-analysis-trivially-copyable.cppclang/test/SemaCXX/warn-range-loop-analysis.cppCommit 24763734e7f45e3b60118b28987685d42e7a761f by llvm-dev[X86] Fix outdated commentThe generic saturated math opcodes are no longer widened insideX86TargetLoweringllvm/lib/Target/X86/X86ISelLowering.cppCommit a8ed86b5c705cf1d2f3ca55b0640cf0f2fe01abc by llvm-devmoveOperands - assert Src/Dst MachineOperands are non-null.Fixes static-analyzer warnings.llvm/lib/CodeGen/MachineInstr.cppCommit 7c7ca515837305f5d14033aee1191c254b86063c by benny.kraRemove copy ctors identical to the default one. NFC.Those do nothing but make the type no longer trivial to the compiler.mlir/include/mlir/IR/AffineMap.hmlir/include/mlir/IR/AffineExpr.hmlir/include/mlir/IR/IntegerSet.hCommit 2740b2d5d5f0f56c87024555bdcae4f91e595ddb by llvm-devFix uninitialized value clang static analyzer warning. NFC.llvm/lib/Transforms/Utils/CodeExtractor.cppCommit ded237b58d56299f90ef44853ef79b039248b85e by llvm-devFix \"pointer is null\" static analyzer warning. NFCI.Use castAs<> instead of getAs<> since the pointer is dereferencedimmediately below and castAs will perform the null assertion for us.clang/lib/Sema/SemaDecl.cppCommit 16c53ffcb9d040f0396bf1ab42ca366f7e1f1e4d by llvm-devFix \"pointer is null\" static analyzer warnings. NFCI.Use castAs<> instead of getAs<> since the pointer is dereferencedimmediately below and castAs will perform the null assertion for us.clang/lib/CodeGen/CGExprScalar.cppclang/lib/CodeGen/CGExprCXX.cppclang/lib/CodeGen/CGExpr.cppCommit d87a76c9dae38b2a1ef63584aee82e74490dc83b by llvm-devFix \"pointer is null\" static analyzer warning. NFCI.Use castAs<> instead of getAs<> since the pointer is dereferencedimmediately within mangleCallingConvention and castAs will perform thenull assertion for us.clang/lib/AST/MicrosoftMangle.cppCommit 93431f96a7b14ff03036bae77cc0197fdc98ad52 by llvm-devFix \"pointer is null\" static analyzer warning. NFCI.Use cast<> instead of dyn_cast<> since we know that the pointer shouldbe valid (and is dereferenced immediately).clang/lib/CodeGen/CGStmtOpenMP.cppCommit bf03944d5d9a7e7c8105c69dfa0d7e0d345644df by llvm-devFix \"pointer is null\" static analyzer warnings. NFCI.Use castAs<> instead of getAs<> since the pointers are dereferencedimmediately and castAs will perform the null assertion for us.clang/lib/Sema/SemaCodeComplete.cppCommit fce887beb79780d0e0b19e8ab6176978a3dce9b8 by llvm-devGlobalModuleIndex - Fix use-after-move clang static analyzer warning.Shadow variable names meant we were referencing the Buffer inputargument, not the GlobalModuleIndex member that its std::move()'d it.clang/lib/Serialization/GlobalModuleIndex.cppCommit 6cb3957730e9085bb7c37d871c790f910efdd6a7 by listmail[X86AsmBackend] Be consistent about placing definitions out of line[NFC]llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cppCommit 563d3e344452c8923db09b043b8db471fc413b1e by listmail[X86AsmBackend] Move static function before sole use [NFC]llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cppCommit 1d641daf260308815d014d1bf1b424a1ed1e7277 by listmail[X86] Adjust nop emission by compiler to consider target decodelimitationsThe primary motivation of this change is to bring the code more closelyin sync behavior wise with the assembler's version of nop emission.  I'dlike to eventually factor them into one, but that's hard to do when onehas features the other doesn't.The longest encodeable nop on x86 is 15 bytes, but many processors - forinstance all intel chips - can't decode the 15 byte form efficiently.On those processors, it's better to use either a 10 byte or 11 bytesequence depending.llvm/test/MC/X86/stackmap-nops.llllvm/test/CodeGen/X86/stackmap-nops.llllvm/test/CodeGen/X86/align-branch-boundary-suppressions.llllvm/lib/Target/X86/X86MCInstLower.cppCommit 2bdf33cc4c733342fc83081bc7410ac5e9a24f55 by riverriddle[mlir] NFC: Remove Value::operator* and Value::operator-> now that Valueis properly value-typed.Summary: These were temporary methods used to simplify the transition.Reviewed By: antiagainstDifferential Revision: https://reviews.llvm.org/D72548mlir/lib/Conversion/GPUToSPIRV/ConvertGPUToSPIRV.cppmlir/lib/Analysis/SliceAnalysis.cppmlir/include/mlir/Dialect/StandardOps/Ops.hmlir/lib/Dialect/SPIRV/Serialization/Serializer.cppmlir/examples/toy/Ch3/mlir/ToyCombine.tdmlir/lib/Dialect/Linalg/Transforms/LinalgTransforms.cppmlir/examples/toy/Ch7/mlir/Dialect.cppmlir/lib/Analysis/VectorAnalysis.cppmlir/lib/IR/Block.cppmlir/examples/toy/Ch5/mlir/ToyCombine.cppmlir/lib/Dialect/Traits.cppmlir/examples/toy/Ch3/mlir/ToyCombine.cppmlir/lib/Analysis/Liveness.cppmlir/lib/Dialect/VectorOps/VectorOps.cppmlir/lib/Parser/Parser.cppmlir/lib/Quantizer/Transforms/InferQuantizedTypesPass.cppmlir/include/mlir/IR/OpImplementation.hmlir/lib/Analysis/AffineStructures.cppmlir/lib/Transforms/LoopInvariantCodeMotion.cppmlir/lib/IR/Value.cppmlir/lib/Conversion/StandardToLLVM/ConvertStandardToLLVM.cppmlir/include/mlir/Dialect/Linalg/Transforms/LinalgTransformPatterns.tdmlir/examples/toy/Ch7/mlir/MLIRGen.cppmlir/include/mlir/Analysis/Dominance.hmlir/lib/Analysis/CallGraph.cppmlir/lib/Analysis/LoopAnalysis.cppmlir/test/lib/Transforms/TestInlining.cppmlir/lib/Dialect/Linalg/Transforms/Fusion.cppmlir/docs/OpDefinitions.mdmlir/lib/Quantizer/Transforms/AddDefaultStatsTestPass.cppmlir/include/mlir/Dialect/Linalg/EDSC/Builders.hmlir/include/mlir/Dialect/VectorOps/VectorTransformPatterns.tdmlir/lib/Dialect/QuantOps/Transforms/ConvertConst.cppmlir/lib/Conversion/LoopsToGPU/LoopsToGPU.cppmlir/lib/Dialect/StandardOps/Ops.cppmlir/lib/IR/TypeUtilities.cppmlir/lib/Quantizer/Support/ConstraintAnalysisGraph.cppmlir/lib/Dialect/GPU/Transforms/KernelOutlining.cppmlir/include/mlir/IR/Matchers.hmlir/lib/Dialect/Linalg/EDSC/Builders.cppmlir/lib/Dialect/Linalg/Transforms/Tiling.cppmlir/lib/Transforms/Utils/Utils.cppmlir/docs/Tutorials/Toy/Ch-3.mdmlir/tools/mlir-tblgen/OpDefinitionsGen.cppmlir/lib/IR/Function.cppmlir/lib/Dialect/SPIRV/SPIRVOps.cppmlir/include/mlir/Dialect/Linalg/IR/LinalgTraits.hmlir/test/lib/TestDialect/TestPatterns.cppmlir/examples/toy/Ch6/mlir/ToyCombine.tdmlir/lib/Conversion/StandardToSPIRV/LegalizeStandardForSPIRV.cppmlir/docs/Tutorials/Toy/Ch-4.mdmlir/include/mlir/Dialect/Linalg/IR/LinalgStructuredOps.tdmlir/lib/Quantizer/Configurations/FxpMathConfig.cppmlir/lib/Transforms/Utils/LoopUtils.cppmlir/include/mlir/Dialect/Linalg/IR/LinalgOps.tdmlir/lib/Dialect/SPIRV/Serialization/Deserializer.cppmlir/examples/toy/Ch4/mlir/ToyCombine.cppmlir/lib/Transforms/LoopFusion.cppmlir/lib/Analysis/Utils.cppmlir/include/mlir/IR/OpDefinition.hmlir/lib/Dialect/LoopOps/LoopOps.cppmlir/lib/Conversion/VectorToLLVM/ConvertVectorToLLVM.cppmlir/examples/toy/Ch7/mlir/ToyCombine.cppmlir/lib/Dialect/QuantOps/IR/QuantOps.cppmlir/include/mlir/Dialect/VectorOps/VectorOps.tdmlir/examples/toy/Ch3/mlir/Dialect.cppmlir/examples/toy/Ch6/mlir/ToyCombine.cppmlir/lib/Dialect/Linalg/IR/LinalgOps.cppmlir/lib/Transforms/Utils/RegionUtils.cppmlir/include/mlir/Dialect/QuantOps/QuantOps.tdmlir/include/mlir/EDSC/Intrinsics.hmlir/lib/Dialect/Linalg/Utils/Utils.cppmlir/include/mlir/IR/OpBase.tdmlir/lib/Transforms/Vectorize.cppmlir/lib/Analysis/Verifier.cppmlir/lib/Conversion/LinalgToLLVM/LinalgToLLVM.cppmlir/test/mlir-tblgen/predicate.tdmlir/lib/Transforms/Utils/InliningUtils.cppmlir/lib/Analysis/Dominance.cppmlir/lib/Transforms/LoopUnrollAndJam.cppmlir/lib/IR/Region.cppmlir/lib/IR/Operation.cppmlir/lib/Target/LLVMIR/ConvertFromLLVMIR.cppmlir/include/mlir/IR/Operation.hmlir/include/mlir/IR/Value.hmlir/test/lib/TestDialect/TestDialect.cppmlir/test/lib/Transforms/TestMemRefStrideCalculation.cppmlir/test/lib/Transforms/TestVectorizationUtils.cppmlir/lib/Dialect/FxpMathOps/Transforms/UniformKernelUtils.hmlir/tools/mlir-tblgen/RewriterGen.cppmlir/tools/mlir-tblgen/LLVMIRConversionGen.cppmlir/lib/Dialect/SPIRV/SPIRVDialect.cppmlir/lib/EDSC/Builders.cppmlir/examples/toy/Ch7/mlir/ToyCombine.tdmlir/lib/Transforms/Utils/LoopFusionUtils.cppmlir/include/mlir/Dialect/Linalg/Utils/Utils.hmlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cppmlir/docs/DeclarativeRewrites.mdmlir/include/mlir/Quantizer/Support/ConstraintAnalysisGraph.hmlir/lib/Dialect/SPIRV/Transforms/DecorateSPIRVCompositeTypeLayoutPass.cppmlir/lib/Conversion/GPUCommon/OpToFuncCallLowering.hmlir/lib/Transforms/MemRefDataFlowOpt.cppmlir/lib/IR/Builders.cppmlir/lib/IR/PatternMatch.cppmlir/lib/Transforms/DialectConversion.cppmlir/lib/Transforms/Utils/GreedyPatternRewriteDriver.cppmlir/include/mlir/Dialect/StandardOps/Ops.tdmlir/lib/Dialect/AffineOps/AffineOps.cppmlir/lib/Target/LLVMIR/ModuleTranslation.cppmlir/lib/Dialect/GPU/IR/GPUDialect.cppmlir/lib/Dialect/VectorOps/VectorTransforms.cppmlir/lib/Transforms/AffineLoopInvariantCodeMotion.cppmlir/examples/toy/Ch4/mlir/Dialect.cppmlir/examples/toy/Ch6/mlir/Dialect.cppmlir/include/mlir/Dialect/AffineOps/AffineOps.tdmlir/lib/Dialect/Linalg/Analysis/DependenceAnalysis.cppmlir/lib/Conversion/GPUToNVVM/LowerGpuOpsToNVVMOps.cppmlir/docs/QuickstartRewrites.mdmlir/lib/Transforms/Utils/FoldUtils.cppmlir/include/mlir/Dialect/LLVMIR/LLVMOps.tdmlir/lib/Conversion/GPUToCUDA/ConvertLaunchFuncToCudaCalls.cppmlir/lib/EDSC/Helpers.cppmlir/lib/Dialect/Linalg/Transforms/Promotion.cppmlir/lib/Dialect/FxpMathOps/Transforms/LowerUniformRealMath.cppmlir/examples/toy/Ch2/mlir/Dialect.cppmlir/include/mlir/EDSC/Builders.hmlir/lib/Conversion/StandardToSPIRV/ConvertStandardToSPIRV.cppmlir/lib/Transforms/LoopTiling.cppmlir/lib/Transforms/PipelineDataTransfer.cppmlir/include/mlir/Dialect/AffineOps/AffineOps.hmlir/examples/toy/Ch5/mlir/ToyCombine.tdmlir/test/mlir-tblgen/op-result.tdmlir/lib/IR/AsmPrinter.cppmlir/examples/toy/Ch4/mlir/ToyCombine.tdmlir/include/mlir/Transforms/RegionUtils.hmlir/examples/toy/Ch5/mlir/Dialect.cppmlir/lib/Analysis/AffineAnalysis.cppmlir/test/lib/TestDialect/TestOps.tdCommit 4c48ea68e491cb42f1b5d43ffba89f6a7f0dadc4 by development[ASTMatchers] extract public matchers from const-analysis into own patchSummary: The analysis for const-ness of local variables required a viewgenerally useful matchers that are extracted into its own patch.They are `decompositionDecl` and `forEachArgumentWithParamType`, thatworks for calls through function pointers as well.Reviewers: aaron.ballmanReviewed By: aaron.ballmanSubscribers: cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72505clang/lib/ASTMatchers/Dynamic/Registry.cppclang/docs/LibASTMatchersReference.htmlclang/unittests/ASTMatchers/ASTMatchersTraversalTest.cppclang/include/clang/ASTMatchers/ASTMatchers.hCommit 23a799adf0abbe9a7be1494d5efd1ab3215ee4fb by developmentRevert \"[ASTMatchers] extract public matchers from const-analysis intoown patch\"This reverts commit 4c48ea68e491cb42f1b5d43ffba89f6a7f0dadc4. Thepowerpc buildbots had an internal compiler error after this patch. Thisrequires some inspection.clang/docs/LibASTMatchersReference.htmlclang/include/clang/ASTMatchers/ASTMatchers.hclang/lib/ASTMatchers/Dynamic/Registry.cppclang/unittests/ASTMatchers/ASTMatchersTraversalTest.cppCommit d2751f8fdf6c072045bab62f6035511e028f46ee by Lang Hames[ExecutionEngine] Re-enable FastISel for non-iOS arm targets.Patch by Nicolas Capens. Thanks Nicolas!https://reviews.llvm.org/D65015llvm/lib/ExecutionEngine/TargetSelect.cppCommit dc422e968e73790178e500f506e8fb7cfa1e62ea by koraqAdd -Wrange-loop-analysis changes to ReleaseNotesThis reflects the recent changes done.clang/docs/ReleaseNotes.rstCommit 9cc9120969fd9f7f6a99321c7d94133a32927a3a by craig.topper[X86] Turn FP_ROUND/STRICT_FP_ROUND intoX86ISD::VFPROUND/STRICT_VFPROUND during PreprocessISelDAG to remove someduplicate isel patterns.llvm/lib/Target/X86/X86InstrAVX512.tdllvm/lib/Target/X86/X86ISelDAGToDAG.cppllvm/lib/Target/X86/X86InstrSSE.tdCommit a5994c789a2982a770254ae1607b5b4cb641f73c by maskray[X86][Disassembler] Simplify and optimize reader functionsllvm-objdump -d on clang is decreased from 8.2s to 7.8s.llvm/lib/Target/X86/Disassembler/X86Disassembler.cppllvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.hllvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.cppCommit 9fe6f36c1a909e381275f897b780a9c878fab94a by craig.topper[LegalizeVectorOps] Only pass SDNode* instead SDValue to all of theExpand* and Promote* methods.All the Expand* and Promote* function assume they are being called withresult 0 anyway. Just hardcode result 0 into them.llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cppCommit 5a9954c02a7d6e60da26b2feec0837695846aeed by craig.topper[LegalizeVectorOps] Remove some of the simpler Expand methods. PassResults vector to a couple. NFCISome of the simplest handlers just call TLI and if that fails, they fallback to unrolling. For those just inline the TLI call and share theunrolling call with the default case of Expand.For ExpandFSUB and ExpandBITREVERSE so that its obvious they don'treturn results sometimes and want to defer to LegalizeDAG.llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cppCommit 179abb091d8a1d67115d21b54001d10250756042 by maskray[X86][Disassembler] Replace custom logger with LLVM_DEBUGllvm-objdump -d on clang is decreased from 7.8s to 7.4s.The improvement is likely due to the elimination of logger setup anddbgprintf(), which has a large overhead.llvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.cppllvm/lib/Target/X86/Disassembler/X86Disassembler.cppllvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.hCommit a1f16998f371870ca4da8b3c00a093c607a36ddd by alexandre.ganea[Support] Optionally call signal handlers when a function wrapped by thethe CrashRecoveryContext failsThis patch allows for handling a failure inside a CrashRecoveryContextin the same way as the global exception/signal handler. A failure willhave the same side-effect, such as cleanup of temporarty file, printingcallstack, calling relevant signal handlers, and finally returning anexception code. This is an optional feature, disabled by default. Thisis a support patch for D69825.Differential Revision: https://reviews.llvm.org/D70568llvm/include/llvm/Support/Signals.hllvm/unittests/Support/CrashRecoveryTest.cppllvm/lib/Support/Windows/Signals.incllvm/lib/Support/Unix/Signals.incllvm/include/llvm/Support/CrashRecoveryContext.hllvm/lib/Support/CrashRecoveryContext.cppCommit 2cdb18afda841392002feafda21af31854c195b3 by Lang Hames[ORC] Fix argv handling in runAsMain / lli.This fixes an off-by-one error in the argc value computed by runAsMain,and switches lli back to using the input bitcode (rather than the string\"lli\") as the effective program name.Thanks to Stefan Graenitz for spotting the bug.llvm/test/ExecutionEngine/OrcLazy/printargv.llllvm/tools/lli/lli.cppllvm/lib/ExecutionEngine/Orc/ExecutionUtils.cppCommit 6fdd6a7b3f696972edc244488f59532d05136a27 by maskray[Disassembler] Delete the VStream parameter ofMCDisassembler::getInstruction()The argument is llvm::null() everywhere except llvm::errs() inllvm-objdump in -DLLVM_ENABLE_ASSERTIONS=On builds. It is used by notarget but X86 in -DLLVM_ENABLE_ASSERTIONS=On builds.If we ever have the needs to add verbose log to disassemblers, we canrecord log with a member function, instead of passing it around as anargument.lldb/source/Plugins/Disassembler/llvm/DisassemblerLLVMC.cppllvm/lib/Target/Mips/Disassembler/MipsDisassembler.cppllvm/lib/Target/Lanai/Disassembler/LanaiDisassembler.hllvm/lib/Target/Sparc/Disassembler/SparcDisassembler.cppllvm/tools/llvm-objdump/MachODump.cppllvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cppllvm/lib/Target/Lanai/Disassembler/LanaiDisassembler.cppllvm/lib/Target/MSP430/Disassembler/MSP430Disassembler.cpplldb/source/Plugins/Instruction/MIPS/EmulateInstructionMIPS.cppllvm/lib/Target/RISCV/Disassembler/RISCVDisassembler.cppllvm/tools/llvm-objdump/llvm-objdump.cppllvm/lib/Target/Hexagon/Disassembler/HexagonDisassembler.cppllvm/tools/llvm-exegesis/lib/Analysis.cppllvm/include/llvm/MC/MCDisassembler/MCDisassembler.hllvm/lib/Target/ARM/Disassembler/ARMDisassembler.cppllvm/lib/Target/WebAssembly/Disassembler/WebAssemblyDisassembler.cppllvm/lib/Target/SystemZ/Disassembler/SystemZDisassembler.cppllvm/tools/llvm-mc/Disassembler.cppllvm/lib/MC/MCDisassembler/MCDisassembler.cppllvm/lib/MC/MCDisassembler/Disassembler.cppllvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cppllvm/lib/Target/BPF/Disassembler/BPFDisassembler.cppllvm/lib/Target/ARC/Disassembler/ARCDisassembler.cpplldb/source/Plugins/Instruction/MIPS64/EmulateInstructionMIPS64.cppllvm/tools/llvm-cfi-verify/lib/FileAnalysis.cppllvm/lib/Target/AVR/Disassembler/AVRDisassembler.cppllvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cppllvm/lib/Target/X86/Disassembler/X86Disassembler.cppllvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.hllvm/tools/sancov/sancov.cppllvm/lib/Target/XCore/Disassembler/XCoreDisassembler.cppllvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.hllvm/lib/Target/PowerPC/Disassembler/PPCDisassembler.cppCommit 1e8ce7492e91aa6db269334d12187c7ae854dccb by maskray[X86][Disassembler] Optimize argument passing and immediate readingllvm/lib/Target/X86/Disassembler/X86Disassembler.cppllvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.hllvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.cppCommit f719c540bb09cb5bfe37bc6283ea68e31949b3f4 by maskray[X86][Disassembler] Shrink X86GenDisassemblerTables.inc from 36M to 6.1MIn x86Disassembler{OneByte,TwoByte,...}Codes,\"/* EmptyTable */\" is very common. Omitting it saves lots of space.Also, there is no need to display a table entry in multiple lines.It is also common that the whole OpcodeDecision is { MODRM_ONEENTRY, 0}.Make use of zero-initialization.llvm/utils/TableGen/X86DisassemblerTables.cppCommit ddfcd82bdc219dd2dc04d6826c417cea3da65d12 by craig.topper[LegalizeVectorOps] Expand vector MERGE_VALUES immediately.Custom legalization can produce MERGE_VALUES to return multiple results.We can expand them immediately instead of leaving them around for DAGcombine to clean up.llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cppCommit ed679804d5e34dcb1046c5087acaf5d1dbb9b582 by craig.topper[TargetLowering][X86] Connect the chain from STRICT_FSETCC inTargetLowering::expandFP_TO_UINT and X86TargetLowering::FP_TO_INTHelper.llvm/lib/CodeGen/SelectionDAG/TargetLowering.cppllvm/lib/Target/X86/X86ISelLowering.cppCommit efb674ac2f2b0f06adc3f00df3134dadf1c875df by craig.topper[LegalizeVectorOps] Parallelize the lo/hi part of STRICT_UINT_TO_FLOATlegalization.The lo and hi computation are independent. Give them the same inputchain and TokenFactor the results together.llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cppCommit 569ccfc384a5434c35c09adba8c44c46014297e6 by czhengsz[SCEV] more accurate range for addrecexpr with nsw flag.Reviewed By: nikicDifferential Revision: https://reviews.llvm.org/D72436llvm/test/Analysis/ScalarEvolution/range_nw_flag.llllvm/lib/Analysis/ScalarEvolution.cppCommit d692f0f6c8c12316d559b9a638a2cb9fbd0c263d by craig.topper[X86] Don't call LowerSETCC from LowerSELECT forSTRICT_FSETCC/STRICT_FSETCCS nodes.This causes the STRICT_FSETCC/STRICT_FSETCCS nodes to lowered earlywhile lowering SELECT, but the output chain doesn't get connected. Thenwe visit the node again when it is its turn because we haven't replacedthe use of the chain result. In the case of the fp128 libcall lowering,after D72341 this will cause the libcall to be emitted twice.llvm/lib/Target/X86/X86ISelLowering.cppCommit f33fd43a7c91f1774a9512bbdb78c367cd23d233 by qiucofan[NFC] Refactor memory ops cluster methodCurrent implementation of BaseMemOpsClusterMutation is a little bitobscure. This patch directly uses a map from store chain ID to set ofmemory instrs to make it simpler, so that future improvements are easierto read, update and review.Reviewed By: evandroDifferential Revision: https://reviews.llvm.org/D72070llvm/lib/CodeGen/MachineScheduler.cppCommit c5b94ea265133a4a28006929643155fc8fbeafe6 by maskray[profile] Support merge pool size >= 10The executable acquires an advisory record lock (`fcntl(fd, F_SETLKW,*)`) on a profile file. Merge pool size >= 10 may be beneficial when theconcurrency is large.Also fix a small problem about snprintf. It can cause the filename to betruncated after %m.Reviewed By: davidxlDifferential Revision: https://reviews.llvm.org/D71970compiler-rt/test/profile/instrprof-basic.ccompiler-rt/lib/profile/InstrProfilingFile.cCommit 51c1d7c4bec025f70679284060b82c05242759b2 by maskray[X86][Disassembler] Simplifyllvm/lib/Target/X86/Disassembler/X86Disassembler.cppllvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.cppllvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.hCommit 60cc095ecc34d72a9ac6947f39c6e2a0cdf5449f by maskray[X86][Disassembler] Merge X86DisassemblerDecoder.cpp intoX86Disassembler.cpp and refactorllvm/lib/Target/X86/Disassembler/X86Disassembler.cppllvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.cppllvm/lib/Target/X86/Disassembler/CMakeLists.txtllvm/lib/Target/X86/Disassembler/X86DisassemblerDecoder.hllvm/utils/gn/secondary/llvm/lib/Target/X86/Disassembler/BUILD.gnCommit b375f28b0ec1129a4b94770a9c55ba49222ea1dd by llvm-dev[X86][AVX] lowerShuffleAsLanePermuteAndSHUFP - only set the demandedelements of the lane mask.Fixes an cyclic dependency issue with an upcoming patch wheregetVectorShuffle canonicalizes masks with splat build vector sources.llvm/lib/Target/X86/X86ISelLowering.cppCommit 66e39067edbfdb1469be001ebb053530a608b532 by llvm-dev[X86][AVX] Use lowerShuffleAsLanePermuteAndSHUFP to lower binary v4f64shuffles.Only perform this if we are shuffling lower and upper lane elementsacross the lanes (otherwise splitting to lower xmm shuffles would bebetter).This is a regression if we shuffle build_vectors due to getVectorShufflecanonicalizing 'blend of splat' build vectors, for now I've set this notto shuffle build_vector nodes at all to avoid this.llvm/test/CodeGen/X86/avx512-shuffles/partial_permute.llllvm/test/CodeGen/X86/vector-shuffle-256-v4.llllvm/lib/Target/X86/X86ISelLowering.cppllvm/test/CodeGen/X86/vector-shuffle-256-v8.llllvm/test/CodeGen/X86/avx-unpack.llllvm/test/CodeGen/X86/subvector-broadcast.llCommit 065eefcfe969249a7df9d1ef4a0e468606b25359 by llvm-dev[AMDGPU] Regenerate shl shift testsllvm/test/CodeGen/AMDGPU/shl.llCommit a888277897f75b2952d96de229fff57519cfc363 by llvm-dev[MIPS] Regenerate shl/lshr shift testsllvm/test/CodeGen/Mips/llvm-ir/shl.llllvm/test/CodeGen/Mips/llvm-ir/lshr.llCommit ad201691d5cc0f15f6f885f3847dcc6440ee3de5 by llvm-devFix \"pointer is null\" static analyzer warnings. NFCI.Use cast<> instead of dyn_cast<> and move into its users where itsdereferenced immediately.clang/lib/StaticAnalyzer/Checkers/CStringChecker.cppCommit ebd26cc8c434f40fe8079ee823e7657b5138769f by maskray[PowerPC] Delete PPCDarwinAsmPrinter and PPCMCAsmInfoDarwinDarwin support has been removed.Reviewed By: nemanjaiDifferential Revision: https://reviews.llvm.org/D72063llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCAsmInfo.cppllvm/lib/Target/PowerPC/PPCAsmPrinter.cppllvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.cppllvm/test/MC/MachO/PowerPC/coal-sections-powerpc.sllvm/test/MC/PowerPC/ppc-separator.sllvm/test/MC/MachO/PowerPC/lit.local.cfgllvm/test/CodeGen/PowerPC/hello-reloc.sllvm/lib/Target/PowerPC/MCTargetDesc/PPCMCAsmInfo.hCommit de797ccdd74f46d5f637ccf66c78da9905a46f42 by alexandre.ganea[NFC] Fix compilation of CrashRecoveryContext.cpp on mingwPatch by Markus Böck.Differential Revision: https://reviews.llvm.org/D72564llvm/lib/Support/CrashRecoveryContext.cppCommit 7fa5290d5bd5632d7a36a4ea9f46e81e04fb819e by maskray__patchable_function_entries: don't use linkage field 'unique' with-no-integrated-as.section name, \"flags\"G, @type, GroupName[, linkage]As of binutils 2.33, linkage cannot be 'unique'.  For integratedassembler, we use both 'o' flag and 'unique' linkage to support--gc-sections and COMDAT with lld.https://sourceware.org/ml/binutils/2019-11/msg00266.htmlllvm/test/CodeGen/AArch64/patchable-function-entry.llllvm/lib/CodeGen/AsmPrinter/AsmPrinter.cppCommit 241f330d6bab52ab4e3a01cbb9a3edd417d07c59 by jay.foad[AMDGPU] Add gfx8 assembler and disassembler test casesSummary: This adds assembler tests for cases that were previously onlyin the disassembler tests, and vice versa.Reviewers: rampitec, arsenm, nhaehnleSubscribers: kzhuravl, jvesely, wdng, yaxunl, dstuttard, tpr, t-tye,jfb, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72561llvm/test/MC/Disassembler/AMDGPU/gfx8_dasm_all.txtllvm/test/MC/AMDGPU/gfx8_asm_all.sCommit 2bfee35cb860859b436de0b780fbd00d68e198a4 by maskray[MC][ELF] Emit a relocation if target is defined in the same section andis non-localFor a target symbol defined in the same section, currently we don't emita relocation if VariantKind is VK_None (with few exceptions like RISC-Vrelaxation), while GNU as emits one. This causes program behaviordifferences with and without -ffunction-sections, and can break intendedsymbol interposition in a -shared link.```.globl foo foo: call foo      # no relocation. On other targets, may be written as bfoo, etc call bar      # a relocation if bar is in another section (e.g.-ffunction-sections) call foo@plt  # a relocation```Unify these cases by always emitting a relocation. If we ever want tooptimize `call foo` in -shared links, we should emit a STB_LOCAL aliasand call via the alias.ARM/thumb2-beq-fixup.s: we now emit a relocation to global_thumb_fn asGNU as does. X86/Inputs/align-branch-64-2.s: we now emit R_X86_64_PLT32to foo as GNU does.ELF/relax.s: rewrite the test as target-in-same-section.s . We omittedrelocations to `global` and now emit R_X86_64_PLT32. Note, GNU as doesnot emit a relocation for `jmp global` (maybe its own bug). Our newbehavior is compatible except `jmp global`.Reviewed By: peter.smithDifferential Revision: https://reviews.llvm.org/D72197llvm/test/MC/ELF/target-in-same-section.sllvm/test/MC/X86/align-branch-64-2a.sllvm/test/MC/X86/align-branch-64-2c.sllvm/test/MC/ARM/thumb2-beq-fixup.sllvm/test/MC/ELF/relax.sllvm/lib/MC/ELFObjectWriter.cppllvm/test/MC/X86/align-branch-64-2b.sllvm/test/MC/ARM/thumb1-branch-reloc.slld/test/ELF/global-offset-table-position-aarch64.sCommit ada22c804cd956f3ee7cc9dc82e6d54ead8a4ffe by llvm-devFix \"pointer is null\" static analyzer warning. NFCI.clang/include/clang/Basic/SourceManager.hCommit 54b2914accb4f5c9b58305fd6da405d20a47c452 by llvm-devFix \"pointer is null\" static analyzer warnings. NFCI.Use castAs<> instead of getAs<> since the pointers are dereferencedimmediately and castAs will perform the null assertion for us.clang/lib/AST/VTableBuilder.cppCommit 0113cf193f0610bb1a5dfa0bcd29c41a8965938a by jrtc27[RISCV] Check register class for AMO memory operandsSummary: AMO memory operands use a custom parser in order to accept both(reg) and 0(reg). However, the validation predicate used for theseoperands was only checking that they were registers, and not theregister class, so non-GPRs (such as FPRs) were also accepted. Thus, fixthis by making the predicate check that they are GPRs.Reviewers: asb, lenaryReviewed By: asb, lenarySubscribers: hiraditya, rbar, johnrusso, simoncook, sabuasal, niosHD,kito-cheng, shiva0217, MaskRay, zzheng, edward-jones, rogfer01,MartinMosbeck, brucehoult, the_o, rkruppe, PkmX, jocewei, psnobl, benna,Jim, s.egerton, pzheng, sameer.abuasal, apazos, luismarques,llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72471llvm/test/MC/RISCV/rva-aliases-invalid.sllvm/lib/Target/RISCV/RISCVInstrInfoA.tdllvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cppCommit a6342c247a17fb270e0385bd1deb463b7309a43b by czhengsz[SCEV] accurate range for addrecexpr with nuw flagIf addrecexpr has nuw flag, the value should never be less than itsstart value and start value does not required to be SCEVConstant.Reviewed By: nikic, sanjoyDifferential Revision: https://reviews.llvm.org/D71690llvm/lib/Analysis/ScalarEvolution.cppllvm/test/Analysis/ScalarEvolution/range_nw_flag.llCommit 1ad1308b69b89cc87533c16957189a84e1dd9754 by zeratul976[clangd] Assert that the testcases in FindExplicitReferencesTest.Allhave no diagnosticsReviewers: kadircetSubscribers: ilya-biryukov, MaskRay, jkorous, arphaman, usaxena95,cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72355clang-tools-extra/clangd/unittests/FindTargetTests.cppCommit 79a09d8bf4d508b0ae6a1e3c90907488092678c5 by zeratul976[clangd] Show template arguments in type hierarchy when possibleSummary: Fixes https://github.com/clangd/clangd/issues/31Reviewers: kadircetSubscribers: ilya-biryukov, MaskRay, jkorous, arphaman, kadircet,usaxena95, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D71533clang-tools-extra/clangd/XRefs.cppclang-tools-extra/clangd/unittests/TypeHierarchyTests.cppCommit a10527cd3731e2ef246c4797fb099385a948f62f by arsenm2AMDGPU/GlobalISel: Copy type when inserting readfirstlanegetDefIgnoringCopies will fail to find any def if no type is set if wetry to use it on the use's operand, so propagate the type.llvm/test/CodeGen/AMDGPU/GlobalISel/regbankselect-amdgcn.ds.ordered.swap.mirllvm/test/CodeGen/AMDGPU/GlobalISel/regbankselect-amdgcn.s.sendmsg.mirllvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cppllvm/test/CodeGen/AMDGPU/GlobalISel/regbankselect-amdgcn.readlane.mirllvm/test/CodeGen/AMDGPU/GlobalISel/regbankselect-amdgcn.ds.ordered.add.mirllvm/test/CodeGen/AMDGPU/GlobalISel/regbankselect-amdgcn.ds.gws.sema.v.mirllvm/test/CodeGen/AMDGPU/GlobalISel/regbankselect-amdgcn.ds.gws.init.mirllvm/test/CodeGen/AMDGPU/GlobalISel/regbankselect-amdgcn.s.sendmsghalt.mirllvm/test/CodeGen/AMDGPU/GlobalISel/regbankselect-amdgcn.writelane.mirCommit 555e7ee04cb5c44e0b11a2eda999e6910b4b27e1 by arsenm2AMDGPU/GlobalISel: Don't use XEXEC class for SGPRsWe don't use the xexec register classes for arbitrary values anymore.Avoids a test variance beween GlobalISel and SelectionDAG>llvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-ptr-add.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-anyext.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-amdgcn.fract.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-amdgcn.ldexp.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-constant.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-trunc.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-fmaxnum.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-lshr.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-fminnum-ieee.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-load-constant.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-amdgcn.rcp.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-copy.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-extract-vector-elt.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-fabs.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-fmaxnum-ieee.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-phi.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-zext.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-amdgcn.class.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-load-smrd.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-fmul.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-insert.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-sext.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-concat-vectors.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-implicit-def.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-amdgcn.rsq.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-unmerge-values.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-fminnum.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-ptr-mask.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-ashr.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-intrinsic-trunc.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-fceil.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-shl.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-inttoptr.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-fneg.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-ptrtoint.mirllvm/lib/Target/AMDGPU/SIRegisterInfo.cppllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-build-vector.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-extract.mirllvm/test/CodeGen/AMDGPU/GlobalISel/inst-select-merge-values.mirCommit 3c868cbbda7e2ff66b8ed92b632a609aaac324ba by arsenm2AMDGPU: Split test functionThis avoids slightly different scheduling/regalloc behavior, and avoidsa test diff between GlobalISel and SelectionDAG.llvm/test/CodeGen/AMDGPU/write_register.llCommit 52aaf4a27576607dfc0833f5f88e5a15a30ceadb by craig.topper[X86] Use SDNPOptInGlue instead of SDNPInGlue on a couple SDNodes.At least one of these is used without a Glue. This doesn't seem tochange the X86GenDAGISel.inc output so maybe it doesn't matter?llvm/lib/Target/X86/X86InstrFPStack.tdCommit c958639098a8702b831952b1a1a677ae19190a55 by SourabhSingh.Tomar[DWARF5][DebugInfo]: Added support for DebugInfo generation for autoreturn type for C++ member functions.Summary: This patch will provide support for auto return type for theC++ member functions. Before this return type of the member function isdeduced and stored in the DIE. This patch includes llvm sideimplementation of this feature.Patch by: Awanish Pandey <Awanish.Pandey@amd.com>Reviewers: dblaikie, aprantl, shafik, alok, SouraVX, jini.susan.georgeReviewed by: dblaikieDifferential Revision: https://reviews.llvm.org/D70524llvm/test/DebugInfo/X86/debug-info-auto-return.llllvm/lib/CodeGen/AsmPrinter/DwarfUnit.cppCommit 6d6a4590c5d4c7fc7445d72fe685f966b0a8cafb by SourabhSingh.Tomar[DWARF5][clang]: Added support for DebugInfo generation for auto returntype for C++ member functions.Summary: This patch will provide support for auto return type for theC++ member functions.This patch includes clang side implementation of this feature.Patch by: Awanish Pandey <Awanish.Pandey@amd.com>Reviewers: dblaikie, aprantl, shafik, alok, SouraVX, jini.susan.georgeReviewed by: dblaikieDifferential Revision: https://reviews.llvm.org/D70524clang/lib/CodeGen/CGDebugInfo.cppclang/test/CodeGenCXX/debug-info-auto-return.cppclang/lib/CodeGen/CGDebugInfo.hCommit 07028b5a87803a3a857d6dd6320a0f7de4db23ad by sjoerd.meijer[SCEV] Follow up of D71563: addressing post commit comment. NFC.llvm/lib/Analysis/ScalarEvolution.cppCommit 9d3e78e704fa6201bceb48f45fb061f572c5aa2e by sam.parker[NFC] Update loop.decrement.reg intrinsic commentNote that the intrinsic is now understood by SCEV and that otheroptimisations can treat it as a sub.llvm/include/llvm/IR/Intrinsics.tdCommit 3cad8ada4947dc6793e5af56d6dd0e6eed9e570f by zinenkoAdd zero_extendi and sign_extendi to intrinsic namespaceSummary:- update zero_extendi and sign_extendi in edsc/intrinsic namespace- Builder API test for zero_extendi and sign_extendiDifferential Revision: https://reviews.llvm.org/D72298mlir/include/mlir/EDSC/Intrinsics.hmlir/test/EDSC/builder-api-test.cppCommit ddf044290ede7d7fd47f4f673e3e628f551a8aac by Raphael Isemann[lldb] Mark several tests as not dependent on debug infoSummary: This just adds `NO_DEBUG_INFO_TESTCASE` to tests that don'treally exercise anything debug information specific and therefore don'tneed to be rerun for all debug information variants.Reviewers: labath, jingham, aprantl, mib, jfbReviewed By: aprantlSubscribers: dexonsmith, JDevlieghere, lldb-commitsTags: #lldbDifferential Revision: https://reviews.llvm.org/D72447lldb/packages/Python/lldbsuite/test/commands/apropos/with-process/TestAproposWithProcess.pylldb/packages/Python/lldbsuite/test/python_api/watchpoint/watchlocation/TestSetWatchlocation.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/watchpoint_events/TestWatchpointEvents.pylldb/packages/Python/lldbsuite/test/python_api/formatters/TestFormattersSBAPI.pylldb/packages/Python/lldbsuite/test/python_api/watchpoint/condition/TestWatchpointConditionAPI.pylldb/packages/Python/lldbsuite/test/commands/command/script_alias/TestCommandScriptAlias.pylldb/packages/Python/lldbsuite/test/commands/target/create-no-such-arch/TestNoSuchArch.pylldb/packages/Python/lldbsuite/test/python_api/event/TestEvents.pylldb/packages/Python/lldbsuite/test/python_api/watchpoint/watchlocation/TestTargetWatchAddress.pylldb/packages/Python/lldbsuite/test/python_api/findvalue_duplist/TestSBFrameFindValue.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/watchpoint_commands/TestWatchpointCommands.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/watchpoint_set_command/TestWatchLocationWithWatchSet.pylldb/packages/Python/lldbsuite/test/python_api/process/io/TestProcessIO.pylldb/packages/Python/lldbsuite/test/lang/c/offsetof/TestOffsetof.pylldb/packages/Python/lldbsuite/test/commands/process/launch-with-shellexpand/TestLaunchWithShellExpand.pylldb/packages/Python/lldbsuite/test/commands/expression/calculator_mode/TestCalculatorMode.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/watchpoint_commands/command/TestWatchpointCommandLLDB.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/watchpoint_disable/TestWatchpointDisable.pylldb/packages/Python/lldbsuite/test/python_api/rdar-12481949/Test-rdar-12481949.pylldb/packages/Python/lldbsuite/test/python_api/watchpoint/TestWatchpointIgnoreCount.pylldb/packages/Python/lldbsuite/test/python_api/watchpoint/TestWatchpointIter.pylldb/packages/Python/lldbsuite/test/python_api/value/linked_list/TestValueAPILinkedList.pylldb/packages/Python/lldbsuite/test/commands/process/attach-resume/TestAttachResume.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/variable_out_of_scope/TestWatchedVarHitWhenInScope.pylldb/packages/Python/lldbsuite/test/commands/command/nested_alias/TestNestedAlias.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/watchpoint_on_vectors/TestValueOfVectorVariable.pylldb/packages/Python/lldbsuite/test/python_api/sbvalue_persist/TestSBValuePersist.pylldb/packages/Python/lldbsuite/test/python_api/debugger/TestDebuggerAPI.pylldb/packages/Python/lldbsuite/test/python_api/process/TestProcessAPI.pylldb/packages/Python/lldbsuite/test/python_api/default-constructor/TestDefaultConstructorForAPIObjects.pylldb/packages/Python/lldbsuite/test/commands/statistics/basic/TestStats.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/hello_watchlocation/TestWatchLocation.pylldb/packages/Python/lldbsuite/test/python_api/sbdata/TestSBData.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/hello_watchpoint/TestMyFirstWatchpoint.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/watchpoint_commands/command/TestWatchpointCommandPython.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/watchpoint_commands/condition/TestWatchpointConditionCmd.pylldb/packages/Python/lldbsuite/test/commands/watchpoints/step_over_watchpoint/TestStepOverWatchpoint.pylldb/packages/Python/lldbsuite/test/lang/cpp/offsetof/TestOffsetofCpp.pylldb/packages/Python/lldbsuite/test/python_api/signals/TestSignalsAPI.pylldb/packages/Python/lldbsuite/test/python_api/watchpoint/TestSetWatchpoint.pyCommit c9babcbda77e69698825cfb9ce771352be93acee by selliott[RISCV] Collect Statistics on Compressed InstructionsSummary: It is useful to keep statistics on how many instructions wehave compressed, so we can see if future changes are increasing ordecreasing this number.Reviewers: asb, luismarquesReviewed By: asb, luismarquesSubscribers: xbolva00, sameer.abuasal, hiraditya, rbar, johnrusso,simoncook, apazos, sabuasal, niosHD, kito-cheng, shiva0217, jrtc27,MaskRay, zzheng, edward-jones, rogfer01, MartinMosbeck, brucehoult,the_o, rkruppe, PkmX, jocewei, psnobl, benna, Jim, s.egerton, pzheng,llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D67495llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cppllvm/lib/Target/RISCV/RISCVAsmPrinter.cppCommit 734aa1d133f264746f721a244d2c66bc99648ee5 by usx[clangd] Publish xref for macros from Index and AST.Summary: With this patch the `findReferences` API will return Xref formacros. If the symbol under the cursor is a macro then we collect thereferences to it from: 1. Main file by looking at the ParsedAST. (Thesewere added to the ParsedAST in https://reviews.llvm.org/D70008) 2. Filesother than the mainfile by looking at the:* static index (Added in https://reviews.llvm.org/D70489)* file index (Added in https://reviews.llvm.org/D71406) This patchcollects all the xref from the above places and outputs it in`findReferences` API.Reviewers: kadircetSubscribers: ilya-biryukov, MaskRay, jkorous, arphaman, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72395clang-tools-extra/clangd/XRefs.cppclang-tools-extra/clangd/unittests/XRefsTests.cppCommit e45fcfc3aa57bb237fd4fd694d0c257be66d5482 by sam.mccallRevert \"[DWARF5][clang]: Added support for DebugInfo generation for autoreturn type for C++ member functions.\"This reverts commit 6d6a4590c5d4c7fc7445d72fe685f966b0a8cafb, whichintroduces a crash.See https://reviews.llvm.org/D70524 for details.clang/lib/CodeGen/CGDebugInfo.cppclang/lib/CodeGen/CGDebugInfo.hclang/test/CodeGenCXX/debug-info-auto-return.cppCommit 96b8e1ac4674dd3035b6cc7b1b7ed8b946208ab1 by pavel[lldb] Fix eh-frame-small-fde test for changes in lldlld in 2bfee35 started emitting relocations for some intra-section jumpsbetween global symbols. This shifted the code around a bit, invalidatingtext expectations.Change the symbols to local to keep the previous behavior.lldb/test/Shell/Unwind/Inputs/eh-frame-small-fde.sCommit 10c11e4e2d05cf0e8f8251f50d84ce77eb1e9b8d by peter.smithThis option allows selecting the TLS size in the local exec TLS model,which is the default TLS model for non-PIC objects. This allows large/many thread local variables or a compact/fast code in an executable.Specification is same as that of GCC. For example, the code model optionprecedes the TLS size option.TLS access models other than local-exec are not changed. It meanssupoort of the large code model is only in the local exec TLS model.Patch By KAWASHIMA Takahiro (kawashima-fj <t-kawashima@fujitsu.com>)Reviewers: dmgreen, mstorsjo, t.p.northover, peter.smith, ostannardReviewd By: peter.smith Committed by: peter.smithDifferential Revision: https://reviews.llvm.org/D71688clang/include/clang/Basic/CodeGenOptions.defclang/lib/CodeGen/BackendUtil.cppclang/lib/Frontend/CompilerInvocation.cppclang/test/Driver/tls-size.cllvm/lib/Target/AArch64/AArch64ISelLowering.cppllvm/include/llvm/CodeGen/CommandFlags.incllvm/lib/Target/AArch64/AArch64TargetMachine.cppllvm/test/CodeGen/AArch64/arm64-tls-local-exec.llclang/lib/Driver/ToolChains/Clang.cppllvm/test/CodeGen/AArch64/arm64-tls-initial-exec.llclang/include/clang/Driver/Options.tdllvm/lib/Target/AArch64/AArch64ISelLowering.hllvm/test/CodeGen/AArch64/arm64-tls-execs.llllvm/include/llvm/Target/TargetOptions.hCommit add04b9653848de583c542e0596737f7d7c21553 by sjoerd.meijerARMLowOverheadLoops: return earlier to avoid printing irrelevant dbgmsg. NFCllvm/lib/Target/ARM/ARMLowOverheadLoops.cppCommit b6ffa2fe1250a8f506cc66044275b0bced56059e by james.henderson[DebugInfo][Support] Replace DWARFDataExtractor size functionThis patch adds a new size function to the base DataExtractor class,which removes the need for the DWARFDataExtractor size function.It is unclear why DWARFDataExtractor's size function returned zero insome circumstances (i.e. when it is constructed without a section, andwith a different data source instead), so that behaviour has changed.The old behaviour could cause an assertion in the debug line parser, asthe size did not reflect the actual data available, and could be lowerthan the current offset being parsed.Reviewed by: dblaikieDifferential Revision: https://reviews.llvm.org/D72337llvm/unittests/Support/DataExtractorTest.cppllvm/include/llvm/DebugInfo/DWARF/DWARFDataExtractor.hllvm/include/llvm/Support/DataExtractor.hCommit af4adb07cd18b7081ec5818aee385654c8454356 by Raphael Isemann[lldb][NFC] Use range-based for loops in IRInterpreterlldb/source/Expression/IRInterpreter.cppCommit bf7225888a99f49afac0b95a8996d0a942b6b0e3 by jan.kratochvil[lldb] Fix lookup of symbols with the same address range but differentbindingThis fixes a failing testcase on Fedora 30 x86_64 (regression Fedora29->30):PASS:./bin/lldb./lldb-test-build.noindex/functionalities/unwind/noreturn/TestNoreturnUnwind.test_dwarf/a.out-o 'settings set symbols.enable-external-lookup false' -o r -o bt -oquit * frame #0: 0x00007ffff7aa6e75 libc.so.6`__GI_raise + 325   frame #1: 0x00007ffff7a91895 libc.so.6`__GI_abort + 295   frame #2: 0x0000000000401140 a.out`func_c at main.c:12:2   frame #3: 0x000000000040113a a.out`func_b at main.c:18:2   frame #4: 0x0000000000401134 a.out`func_a at main.c:26:2   frame #5: 0x000000000040112e a.out`main(argc=<unavailable>,argv=<unavailable>) at main.c:32:2   frame #6: 0x00007ffff7a92f33 libc.so.6`__libc_start_main + 243   frame #7: 0x000000000040106e a.out`_start + 46vs.FAIL - unrecognized abort() function:./bin/lldb./lldb-test-build.noindex/functionalities/unwind/noreturn/TestNoreturnUnwind.test_dwarf/a.out-o 'settings set symbols.enable-external-lookup false' -o r -o bt -oquit * frame #0: 0x00007ffff7aa6e75 libc.so.6`.annobin_raise.c + 325   frame #1: 0x00007ffff7a91895libc.so.6`.annobin_loadmsgcat.c_end.unlikely + 295   frame #2: 0x0000000000401140 a.out`func_c at main.c:12:2   frame #3: 0x000000000040113a a.out`func_b at main.c:18:2   frame #4: 0x0000000000401134 a.out`func_a at main.c:26:2   frame #5: 0x000000000040112e a.out`main(argc=<unavailable>,argv=<unavailable>) at main.c:32:2   frame #6: 0x00007ffff7a92f33 libc.so.6`.annobin_libc_start.c + 243   frame #7: 0x000000000040106e a.out`.annobin_init.c.hot + 46The extra ELF symbols are there due to Annobin (I did not investigatewhy this problem happened specifically since F-30 and not since F-28).It is due to:Symbol table '.dynsym' contains 2361 entries: Valu e          Size Type Bind   Vis     Name 0000000000022769   5 FUNC   LOCAL  DEFAULT_nl_load_domain.cold 000000000002276e   0 NOTYPE LOCAL  HIDDEN.annobin_abort.c.unlikely... 000000000002276e   0 NOTYPE LOCAL  HIDDEN.annobin_loadmsgcat.c_end.unlikely... 000000000002276e   0 NOTYPE LOCAL  HIDDEN.annobin_textdomain.c_end.unlikely 000000000002276e 548 FUNC   GLOBALDEFAULT abort 000000000002276e 548 FUNC   GLOBAL DEFAULTabort@@GLIBC_2.2.5 000000000002276e 548 FUNC   LOCAL  DEFAULT __GI_abort0000000000022992   0 NOTYPE LOCAL  HIDDEN  .annobin_abort.c_end.unlikelyGDB has some more complicated preferences between overlapping and/orsharing address symbols, I have made here so far the most simple fix forthis case.Differential revision: https://reviews.llvm.org/D63540lldb/source/Symbol/Symtab.cpplldb/source/Plugins/ObjectFile/ELF/ObjectFileELF.cpplldb/test/Shell/SymbolFile/Inputs/symbol-binding.slldb/test/Shell/SymbolFile/symbol-binding.testlldb/include/lldb/Symbol/Symtab.hCommit 7f1cf7d5f658b15abb8bd6840fc01e6d44487a23 by llvm-dev[X86] Fix MSVC \"truncation from 'int' to 'bool'\" warning. NFCI.llvm/lib/Target/X86/Disassembler/X86Disassembler.cppCommit 8f49204f26ea8856b870d4c2344b98f4b706bea0 by llvm-dev[SelectionDAG] ComputeKnownBits - minimum leading/trailing zero bits inLSHR/SHL (PR44526)As detailed in https://blog.regehr.org/archives/1709 we don't make useof the known leading/trailing zeros for shifted values in cases where wedon't know the shift amount value.This patch adds support to SelectionDAG::ComputeKnownBits to useKnownBits::countMinTrailingZeros and countMinLeadingZeros to set theminimum guaranteed leading/trailing known zero bits.Differential Revision: https://reviews.llvm.org/D72573llvm/test/CodeGen/ARM/hoist-and-by-const-from-lshr-in-eqcmp-zero.llllvm/test/CodeGen/ARM/hoist-and-by-const-from-shl-in-eqcmp-zero.llllvm/test/CodeGen/X86/vector-shift-lshr-128.llllvm/test/CodeGen/AArch64/hoist-and-by-const-from-shl-in-eqcmp-zero.llllvm/test/CodeGen/X86/vector-fshl-rot-128.llllvm/test/CodeGen/X86/vector-rotate-128.llllvm/test/CodeGen/AMDGPU/lshr.v2i16.llllvm/test/CodeGen/AMDGPU/shl.llllvm/test/CodeGen/X86/vector-fshr-rot-128.llllvm/test/CodeGen/X86/vector-fshl-128.llllvm/test/CodeGen/AMDGPU/shl.v2i16.llllvm/test/CodeGen/X86/avx2-vector-shifts.llllvm/test/CodeGen/Mips/llvm-ir/lshr.llllvm/test/CodeGen/AArch64/hoist-and-by-const-from-lshr-in-eqcmp-zero.llllvm/test/CodeGen/X86/vector-fshr-128.llllvm/lib/CodeGen/SelectionDAG/SelectionDAG.cppllvm/test/CodeGen/BPF/shifts.llllvm/test/CodeGen/X86/vector-shift-lshr-sub128.llllvm/test/CodeGen/X86/avx2-shift.llllvm/test/CodeGen/X86/hoist-and-by-const-from-lshr-in-eqcmp-zero.llCommit 804dd6722762040e7ce7e04bf97b19d9596fee20 by Milos.Stojanovic[llvm-exegesis][mips] Expand loadImmediate()Add support for loading 32-bit immediates and enable the use of GPR64registers.Differential Revision: https://reviews.llvm.org/D71873llvm/tools/llvm-exegesis/lib/Mips/Target.cppllvm/unittests/tools/llvm-exegesis/Mips/TargetTest.cppllvm/test/tools/llvm-exegesis/Mips/latency-GPR64.sCommit b96ec492d34ecf31fd2c8d2f0033f00e36cc2b9c by oliver.stannard[clangd] Remove raw string literals in macrosOlder (but still supported) versions of GCC don't handle C++11 rawstring literals in macro parameters correctly.clang-tools-extra/clangd/unittests/FormattedStringTests.cppCommit 7efc7ca8edf6762dc64472417dabfbbdd838ceeb by llvm-dev[X86][SSE] Add knownbits test showing missinggetValidMinimumShiftAmountConstant() ISD::SHL supportAs mentioned on D72573llvm/test/CodeGen/X86/combine-shl.llCommit ef5debac4302cd479ddd9e784a5b5acc8c2b9804 by llvm-dev[SelectionDAG] ComputeKnownBits add getValidMinimumShiftAmountConstant()ISD::SHL supportAs mentioned on D72573llvm/test/CodeGen/X86/combine-shl.llllvm/lib/CodeGen/SelectionDAG/SelectionDAG.cppCommit 6c203149b60e92e802df0c7a431744c337830a09 by oliver.stannard[clang] Remove raw string literals in macrosOlder (but still supported) versions of GCC don't handle C++11 rawstring literals in macro parameters correctly.clang/unittests/ASTMatchers/ASTMatchersTraversalTest.cppclang/unittests/AST/ASTTraverserTest.cppCommit c1fbede984ec1eb87b35218d3b8161d3a6e92318 by Raphael Isemann[lldb][NFC] Remove debug print statement from TestExprDiagnostics.pylldb/packages/Python/lldbsuite/test/commands/expression/diagnostics/TestExprDiagnostics.pyCommit a70b993239a829f30ff1e5991670a0b28bf51459 by Milos.Stojanovic[llvm-exegesis] Remove unneeded std::move()Caught by buildbot breakage:/home/docker/worker_env/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp:89:12:error: moving a local object in a return statement prevents copy elision[-Werror,-Wpessimizing-move]   return std::move(Instructions);          ^/home/docker/worker_env/ppc64le-clang-rhel-test/clang-ppc64le-rhel/llvm/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp:89:12:note: remove std::move call here   return std::move(Instructions);          ^~~~~~~~~~            ~llvm/tools/llvm-exegesis/lib/Mips/Target.cppCommit d7d88b9d8b3efd8b4b07074aa64b5b4136a35b2c by arsenm2GlobalISel: Fix assertion on wide G_ZEXT sourcesIt's possible to have a type that needs a mask greater than 64-bits.llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.hllvm/test/CodeGen/AMDGPU/GlobalISel/artifact-combiner-zext.mirCommit 04a86966fbf46809d7a165b1f089e4d076f0f8a5 by ulrich.weigand[FPEnv] Fix chain handling for fpexcept.strict nodesWe need to ensure that fpexcept.strict nodes are not optimized away evenif the result is unused. To do that, we need to chain them into theblock's terminator nodes, like already done for PendingExcepts.This patch adds two new lists of pending chains, PendingConstrainedFPand PendingConstrainedFPStrict to hold constrained FP intrinsic nodeswithout and with fpexcept.strict markers. This allows not only to solvethe above problem, but also to relax chains a bit further by no longerflushing all FP nodes before a store or other memory access. (They arestill flushed before nodes with other side effects.)Reviewed By: craig.topperDifferential Revision: https://reviews.llvm.org/D72341llvm/test/CodeGen/X86/fp-intrinsics.llllvm/test/CodeGen/X86/fp128-libcalls-strict.llllvm/test/CodeGen/X86/vector-constrained-fp-intrinsics.llllvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.hllvm/test/CodeGen/X86/fp128-cast-strict.llllvm/test/CodeGen/PowerPC/ppcf128-constrained-fp-intrinsics.llllvm/test/CodeGen/SystemZ/fp-strict-alias.llllvm/test/CodeGen/X86/vector-constrained-fp-intrinsics-flags.llllvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cppllvm/test/CodeGen/SystemZ/vector-constrained-fp-intrinsics.llCommit 6a634a5dba847e1c1d81bf59f76dfa7d76ac3c4c by oliver.stannardRevert \"[libc++] Explicitly enumerate std::string externalinstantiations.\"This is causing failures for multiple buildbots and bootstrap builds,details at https://reviews.llvm.org/rG61bd1920.This reverts commit 61bd19206f61ace4b007838a2ff8884a13ec0374.libcxx/include/__configlibcxx/include/stringlibcxx/src/string.cpplibcxx/include/__stringCommit 89ba150240a45cac88216b6127efb523fb9506b0 by llvm-dev[X86] Add knownbits tests showing missing shift amount demanded eltshandling.llvm/test/CodeGen/X86/known-bits-vector.llllvm/test/CodeGen/X86/combine-shl.llCommit 6d1a8fd447934387605ea11d35e1b62866b7d093 by llvm-dev[SelectionDAG] ComputeKnownBits - Add DemandedElts support togetValidShiftAmountConstant/getValidMinimumShiftAmountConstant()llvm/test/CodeGen/X86/known-bits-vector.llllvm/test/CodeGen/X86/combine-shl.llllvm/lib/CodeGen/SelectionDAG/SelectionDAG.cppCommit 376bc39c829fab7ad14424c5418c03ed6649d839 by llvm-dev[SelectionDAG] ComputeNumSignBits - Use getValidShiftAmountConstant forshift opcodesgetValidShiftAmountConstant handles out of bounds shift amounts for us,allowing us to remove the local handling.llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cppCommit 26d2ace9e2305266be888e15392be29e3145163d by spatel[InstSimplify] move tests for select from InstCombine; NFCInstCombine has transforms that would enable these simplifications in anindirect way, but those transforms are unsafe and likely to be removed.llvm/test/Transforms/InstCombine/select.llllvm/test/Transforms/InstSimplify/select.llCommit 894f742acb977a09285dcab024e50c2cf6bce578 by Alexander.Richardson[MIPS][ELF] Use PC-relative relocations in .eh_frame when possibleWhen compiling position-independent executables, we now useDW_EH_PE_pcrel | DW_EH_PE_sdata4. However, the MIPS ABI does not definea 64-bit PC-relative ELF relocation so we cannot use sdata8 for thelarge code model case. When using the large code model, we fall back tothe previous behaviour of generating absolute relocations.With this change clang-generated .o files can be linked by LLD withouthaving to pass -Wl,-z,notext (which creates text relocations). This issimpler than the approach used by ld.bfd, which rewrites the.eh_frame section to convert absolute relocations into relativereferences.I saw in D13104 that apparently ld.bfd did not accept pc-relativerelocations for MIPS ouput at some point. However, I also checked thatrecent ld.bfd can process the clang-generated .o files so this no longerseems true.Reviewed By: atanasyan Differential Revision:https://reviews.llvm.org/D72228lld/test/ELF/mips-eh_frame-pic.sllvm/test/MC/Mips/eh-frame.sllvm/lib/Object/RelocationResolver.cppllvm/lib/MC/MCObjectFileInfo.cppllvm/test/DebugInfo/Mips/eh_frame.llCommit 8e8ccf4712cf58562a91c197da3efd4f9963ce0d by Alexander.Richardson[MIPS] Don't emit R_(MICRO)MIPS_JALR relocations against data symbolsThe R_(MICRO)MIPS_JALR optimization only works when used againstfunctions. Using the relocation against a data symbol (e.g. functionpointer) will cause some linkers that don't ignore the hint in this case(e.g. LLD prior to commit 5bab291b7b) to generate a relative branch tothe data symbol which crashes at run time. Before this patch, LLVM waserroneously emitting these relocations against local-dynamic TLSfunction pointers and global function pointers with internal visibility.Reviewers: atanasyan, jrtc27, vstefanovic Reviewed By: atanasyanDifferential Revision: https://reviews.llvm.org/D72571llvm/test/CodeGen/Mips/reloc-jalr.llllvm/lib/Target/Mips/MipsISelLowering.cppCommit da33762de8531914d4d0dae16bfce2192f02bc79 by pablo.barrio[AArch64] Emit HINT instead of PAC insns in Armv8.2-A or belowSummary: The Pointer Authentication Extension (PAC) was added inArmv8.3-A. Some instructions are implemented in the HINT space to allowcompiling code common to CPUs regardless of whether they feature PAC ornot, and still benefit from PAC protection in the PAC-enabled CPUs.The 8.3-specific mnemonics were currently enabled in any architecture,and LLVM was emitting them in assembly files when PAC code generationwas enabled. This was ok for compilations where both LLVM codegen andthe integrated assembler were used. However, the LLVM codegen was notcompatible with other assemblers (e.g. GAS). Given the fact that theapproach from these assemblers (i.e. to disallow Armv8.3-A mnemonics ifcompiling for Armv8.2-A or lower) is entirely reasonable, this patchmakes LLVM to emit HINT when building for Armv8.2-A and below, insteadof PACIASP, AUTIASP and friends. Then, LLVM assembly should becompatible with other assemblers.Reviewers: samparker, chill, LukeCheesemanSubscribers: kristof.beyls, hiraditya, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D71658llvm/test/CodeGen/AArch64/machine-outliner-retaddr-sign-same-scope-diff-key.llllvm/lib/Target/AArch64/AArch64InstrInfo.tdllvm/test/CodeGen/AArch64/machine-outliner-retaddr-sign-same-scope-same-key-a.llllvm/test/MC/AArch64/armv8.3a-signed-pointer.sllvm/test/CodeGen/AArch64/machine-outliner-retaddr-sign-same-scope-same-key-b.llllvm/test/CodeGen/AArch64/machine-outliner-retaddr-sign-thunk.llllvm/test/CodeGen/AArch64/machine-outliner-retaddr-sign-non-leaf.llllvm/test/CodeGen/AArch64/sign-return-address.llllvm/test/CodeGen/AArch64/machine-outliner-retaddr-sign-diff-scope-same-key.llllvm/test/CodeGen/AArch64/machine-outliner-retaddr-sign-cfi.llllvm/test/CodeGen/AArch64/speculation-hardening-dagisel.llllvm/test/CodeGen/AArch64/machine-outliner-retaddr-sign-subtarget.llllvm/test/CodeGen/AArch64/speculation-hardening-loads.llCommit 0b91e78a719065c67b33bf82b0cde3d4ecfe3b7d by sam.mccallAdd missing triples to tests in 0c29d3ff2233696f663ae34a8aeda23c750ac68fso they target the right arch.llvm/test/CodeGen/X86/align-branch-boundary-default.sllvm/test/CodeGen/X86/align-branch-boundary-default.llCommit 7af67259cdd66811941514a263dd0f81c491d8f1 by llvm-devSema::getOwningModule - take const Decl* type.Fixes static analyzer warning that const_cast was being used despiteonly const methods being called.clang/include/clang/Sema/Sema.hclang/lib/Sema/SemaOverload.cppCommit 40311f9724953541ab7b755fb6a96b31c1e63f00 by llvm-devFix \"pointer is null\" static analyzer warnings. NFCI.Use castAs<> instead of getAs<> since the pointers are alwaysdereferenced and castAs will perform the null assertion for us.clang/lib/AST/ASTContext.cppCommit 025941785faf25a3d9ba2c1e7682ca6c2ad063af by llvm-devFix some cppcheck shadow variable warnings. NFCI.clang/lib/AST/ASTContext.cppCommit 4647aae72f33b8742eb42c1fb869ebd4fdbb3038 by llvm-devMerge isVectorType() and getAs<VectorType> calls to silence clang staticanalyzer warning. NFCI.clang/lib/AST/ASTDiagnostic.cppCommit b11027a08620dce2887377c830be239a4af478b6 by llvm-devFix cppcheck uninitialized variable in DiffTree() constructor warning.NFCI.clang/lib/AST/ASTDiagnostic.cppCommit 043c5eafa8789d76b06b93d157c928830c4d0814 by luismarques[RISCV] Handle globals and block addresses in asm operandsSummary: These seem to be the machine operand types currently needed bythe RISC-V target.Reviewers: asb, lenary Reviewed By: lenary Tags: #llvm DifferentialRevision: https://reviews.llvm.org/D72275llvm/test/CodeGen/RISCV/inline-asm.llllvm/lib/Target/RISCV/RISCVAsmPrinter.cppCommit b4a99a061f517e60985667e39519f60186cbb469 by alexandre.ganea[Clang][Driver] Re-use the calling process instead of creating a newprocess for the cc1 invocationWith this patch, the clang tool will now call the -cc1 invocationdirectly inside the same process. Previously, the -cc1 invocation wascreating, and waiting for, a new process. This patch therefore reducesthe number of created processes during a build, thus it reduces buildtimes on platforms where process creation can be costly (Windows) and/orimpacted by a antivirus. It also makes debugging a bit easier, asthere's no need to attach to the secondary -cc1 process anymore,breakpoints will be hit inside the same process.Crashes or signaling inside the -cc1 invocation will have the sameside-effect as before, and will be reported through the same means.This behavior can be controlled at compile-time through theCLANG_SPAWN_CC1 cmake flag, which defaults to OFF. Setting it to ON willrevert to the previous behavior, where any -cc1 invocation willcreate/fork a secondary process. At run-time, it is also possible totweak the CLANG_SPAWN_CC1 environment variable. Setting it and willoverride the compile-time setting. A value of 0 calls -cc1 inside thecalling process; a value of 1 will create a secondary process, asbefore.Differential Revision: https://reviews.llvm.org/D69825clang/test/Driver/clang_f_opts.cclang/lib/Driver/Job.cppclang/include/clang/Driver/Job.hclang/test/Driver/fsanitize-blacklist.cclang/test/Driver/unknown-arg.cclang/include/clang/Config/config.h.cmakeclang/test/Driver/warning-options_pedantic.cppclang/tools/driver/driver.cppclang/test/Driver/cc1-spawnprocess.cclang/test/CMakeLists.txtclang/include/clang/Driver/Driver.hclang/lib/Driver/ToolChains/Clang.cppclang/CMakeLists.txtCommit e653d306ce90e5612796d8adce9eb34b1c10e85a by ntv[mlir][Linalg] Update ReshapeOp::build to be more idiomaticSummary: This diff makes it easier to create a `linalg.reshape` op andadds an EDSC builder api test to exercise the new builders.Reviewers: ftynse, jpienaarSubscribers: mehdi_amini, rriddle, burmako, shauheen, antiagainst,arpith-jacob, mgester, lucyrfox, aartbik, liufengdb, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72580mlir/include/mlir/Dialect/Linalg/IR/LinalgOps.tdmlir/lib/Dialect/Linalg/IR/LinalgOps.cppmlir/include/mlir/Dialect/Linalg/EDSC/Intrinsics.hmlir/test/EDSC/builder-api-test.cppCommit 6b686703e63f0e992438ce445cbe4b3e78b94ea4 by kazu[Inlining] Add PreInlineThreshold for the new pass managerSummary: This patch makes it easy to try out different preinliningthresholds with a command-line switch just like -preinline-threshold forthe legacy pass manager.Reviewers: davidxlSubscribers: hiraditya, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72618llvm/lib/Passes/PassBuilder.cppCommit 202ab273e6eca134b69882f100c666fcd3affbcf by julian.gross[mlir] Added missing GPU lowering ops.Summary: This diff adds missing GPU lowering ops to MLIR.Reviewers: herhut, pifon2a, ftynseTags: #pre-merge_beta_testing, #llvmDifferential Revision: https://reviews.llvm.org/D72439mlir/lib/Conversion/GPUToNVVM/LowerGpuOpsToNVVMOps.cppmlir/lib/Conversion/GPUToROCDL/LowerGpuOpsToROCDLOps.cppmlir/test/Conversion/GPUToROCDL/gpu-to-rocdl.mlirmlir/test/Conversion/GPUToNVVM/gpu-to-nvvm.mlirCommit 81e7922e83cf9782a39f4072e20eab8ab1e99828 by zinenko[mlir] m_Constant()Summary: Introduce m_Constant() which allows matching a constantoperation without forcing the user also to capture the attribute value.Differential Revision: https://reviews.llvm.org/D72397mlir/test/lib/IR/TestMatchers.cppmlir/include/mlir/IR/Matchers.hmlir/test/IR/test-matchers.mlirmlir/lib/IR/Builders.cppCommit 07804f75a6cc506fada40c474f1e60840ce737d8 by james.henderson[DebugInfo] Make debug line address size mismatch non-fatal to parsingReasonable assumptions can be made when a parsed address length does notmatch the expected length, so there's no need for this to be fatal.Reviewed by: ikudrinDifferential Revision: https://reviews.llvm.org/D72154llvm/unittests/DebugInfo/DWARF/DWARFDebugLineTest.cppllvm/lib/DebugInfo/DWARF/DWARFDebugLine.cppCommit 2af97be8027a0823b88d4b6a07fc5eedb440bc1f by tejohnson[ThinLTO] Add additional ThinLTO pipeline testing with new PMSummary: I've added some more extensive ThinLTO pipeline testing withthe new PM, motivated by the bug fixed in D72386.I beefed up llvm/test/Other/new-pm-pgo.ll a little so that it testsThinLTO pre and post link with PGO, similar to the testing for thedefault pipelines with PGO.Added new pre and post link PGO tests for both instrumentation andsample PGO that exhaustively test the pipelines at differentoptimization levels via opt.Added a clang test to exhaustively test the post link pipeline invokedfor distributed builds. I am currently only testing O2 and O3 sincethese are the most important for performance.It would be nice to add similar exhaustive testing for full LTO, and forthe old PM, but I don't have the bandwidth now and this is a start tocover some of the situations that are not currently default and wereunder tested.Reviewers: wmiSubscribers: mehdi_amini, inglorion, hiraditya, steven_wu, dexonsmith,jfb, cfe-commits, llvm-commitsTags: #clang, #llvmDifferential Revision: https://reviews.llvm.org/D72538llvm/test/Other/new-pm-pgo.llclang/test/CodeGen/thinlto-distributed-newpm.llllvm/test/Other/Inputs/new-pm-thinlto-prelink-pgo-defaults.proftextllvm/test/Other/new-pm-thinlto-postlink-samplepgo-defaults.llllvm/test/Other/new-pm-thinlto-prelink-pgo-defaults.llllvm/test/Other/new-pm-thinlto-prelink-samplepgo-defaults.llllvm/test/Other/Inputs/new-pm-thinlto-samplepgo-defaults.profllvm/test/Other/new-pm-thinlto-postlink-pgo-defaults.llCommit 2d7e757a836abb54590daa25fce626283adafadf by danilo.carvalho.grael[AArch64][SVE] Add patterns for some arith SVE instructions.Summary: Add patterns for the following instructions:- smax, smin, umax, uminReviewers: sdesmalen, huntergr, rengolin, efriedma, c-rhodes, mgudim,kmclaughlinSubscribers: amehsanDifferential Revision: https://reviews.llvm.org/D71779llvm/lib/Target/AArch64/AArch64ISelLowering.cppllvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cppllvm/lib/Target/AArch64/AArch64InstrFormats.tdllvm/lib/Target/AArch64/SVEInstrFormats.tdllvm/lib/Target/AArch64/AArch64SVEInstrInfo.tdllvm/test/CodeGen/AArch64/sve-int-arith-imm.llCommit 90555d9253437d53fe03c26db73faf9c0ca14c82 by david.green[Scheduler] Remove superfluous casts. NFCllvm/lib/Target/ARM/ARMBaseInstrInfo.cppllvm/lib/CodeGen/TargetInstrInfo.cppCommit ee4aa1a228b31ec8b8bd3c4a793c7fa92fec88d6 by llvm-dev[X86] Add AVX2 known signbits codegen testsllvm/test/CodeGen/X86/known-signbits-vector.llCommit 7afaa0099b907842b281c25c2a57937a2c307d3b by llvm-dev[X86][SSE] Add sitofp(ashr(x,y)) test case with non-uniform shift valuellvm/test/CodeGen/X86/known-signbits-vector.llCommit 38e2c01221a9751c0b797417747200d2e9513b9f by llvm-dev[SelectionDAG] ComputeNumSignBits addgetValidMinimumShiftAmountConstant() ISD::SRA supportAllows us to handle more non-uniform SRA sign bits casesllvm/test/CodeGen/X86/known-signbits-vector.llllvm/lib/CodeGen/SelectionDAG/SelectionDAG.cppCommit 05366870eed154c7eb48c7cc3873ea5188f54cc9 by weiwei64[LegalizeTypes] Add SoftenFloatResult support forSTRICT_SINT_TO_FP/STRICT_UINT_TO_FPSome target like arm/riscv with soft-float will have compiling crashwhen using -fno-unsafe-math-optimization option. This patch will add themissing strict FP support to SoftenFloatRes_XINT_TO_FP.Differential Revision: https://reviews.llvm.org/D72277llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cppllvm/test/CodeGen/ARM/fp-intrinsics.llCommit f2bbe8ede057af13b56949f24bbfb436f8a55f97 by Jonas Devlieghere[lldb/Scripts] Remove SWIG botThis is no longer used or maintained.Differential revision: https://reviews.llvm.org/D72539lldb/scripts/swig_bot_lib/client.pylldb/scripts/swig_bot_lib/remote.pylldb/scripts/swig_bot.pylldb/scripts/swig_bot_lib/local.pylldb/scripts/swig_bot_lib/server.pyCommit bb2e5f5e454245c8e7e9e4c9bf7a463c64604292 by tejohnsonFix tests for builtbot failuresShould fix most of the buildbot failures from2af97be8027a0823b88d4b6a07fc5eedb440bc1f, by loosening up the matchingon the AnalysisProxy output.Added in --dump-input=fail on the one test that appears to be somethingdifferent, so I can hopefully debug it better.llvm/test/Other/new-pm-thinlto-prelink-pgo-defaults.llclang/test/CodeGen/thinlto-distributed-newpm.llllvm/test/Other/new-pm-thinlto-postlink-pgo-defaults.llllvm/test/Other/new-pm-thinlto-postlink-samplepgo-defaults.llllvm/test/Other/new-pm-thinlto-prelink-samplepgo-defaults.llCommit 9d30d769041b14c0ff29770d59027e679e6b7edc by Jonas Devlieghere[lldb/Docs] Extend description section of the main pageThe current description is a bit terse. I've copy/pasted theintroduction form the website.lldb/docs/man/lldb.rstCommit ffc05d0dbc88b89756d553ff32abefe720d27742 by llvm-dev[X86][SSE] Add sitofp(shl(sext(x),y)) test case with non-uniform shiftvalueShows that for non-uniform SHL shifts we fail to determine the minimumnumber of sign bits remaining (based off the maximum shift amount value)llvm/test/CodeGen/X86/known-signbits-vector.llCommit 7d9b0a61c32b95fdc73228266d3f14687a8ada95 by arsenm2AMDGPU/GlobalISel: Simplify assertllvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cppCommit ca19d7a3993c69633826ae388155c9ad176b11df by arsenm2AMDGPU/GlobalISel: Fix branch targets when emitting SI_IFThe branch target needs to be changed depending on whether there is anunconditional branch or not.Loops also need to be similarly fixed, but compiling a simple testcaseend to end requires another set of patches that aren't upstream yet.llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cppllvm/test/CodeGen/AMDGPU/GlobalISel/divergent-control-flow.llCommit 2f090cc8f1a3144c81b024bdc52ec1ae49dc0def by arsenm2AMDGPU/GlobalISel: Add some baseline tests for vector extractA future change will try to fold constant offsets into the loop whichthese will stress.llvm/test/CodeGen/AMDGPU/GlobalISel/regbankselect-extract-vector-elt.mirCommit 3d8f1b2d22be79aab3d246fa5bc9c24b911b0bd2 by arsenm2AMDGPU/GlobalISel: Set insert point after waterfall loopThe current users of the waterfall loop utility functions do not makeuse of the restored original insert point. The insertion is either done,or they set the insert point somewhere else. A future change will wantto insert instructions after the waterfall loop, but figuring out thepoint after the loop is more difficult than ensuring the insert point isthere after the loop.llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cppCommit c6fcd5d115b62280669719c5ead436904c93d6cb by llvm-dev[SelectionDAG] ComputeNumSignBits addgetValidMaximumShiftAmountConstant() for ISD::SHL supportAllows us to handle non-uniform SHL shifts to determine the minimumnumber of sign bits remaining (based off the maximum shift amount value)llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cppllvm/test/CodeGen/X86/known-signbits-vector.llCommit 203801425d222555fa2617fff19ecd861525429f by arsenm2AMDGPU/GlobalISel: Select llvm.amdgcn.ds.ordered.{add|swap}llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.hllvm/test/CodeGen/AMDGPU/GlobalISel/llvm.amdgcn.ds.ordered.add.gfx10.llllvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cppllvm/test/CodeGen/AMDGPU/GlobalISel/llvm.amdgcn.ds.ordered.swap.llllvm/test/CodeGen/AMDGPU/GlobalISel/llvm.amdgcn.ds.ordered.add.llCommit 292562c0046c72ea1ed229dbe13a89dca73e5b89 by tejohnsonTry number 2 for fixing bot failuresAdditional fixes for bot failures from2af97be8027a0823b88d4b6a07fc5eedb440bc1f. Remove more exact matching onAnalyisManagers, as they can vary. Also allow different orders betweenLoopAnalysis and BranchProbabilityAnalysis as that can vary due to bothbeing accessed in the parameter list of a call.llvm/test/Other/new-pm-thinlto-postlink-samplepgo-defaults.llllvm/test/Other/new-pm-thinlto-prelink-samplepgo-defaults.llclang/test/CodeGen/thinlto-distributed-newpm.llllvm/test/Other/new-pm-thinlto-prelink-pgo-defaults.llllvm/test/Other/new-pm-thinlto-postlink-pgo-defaults.llCommit a2cd4fe6bf2a4e37d5f69b0b19cb1134a14e2970 by benny.kraUnbreak the mlir build after 202ab273e6eca134b69882f100c666fcd3affbcfmlir/lib/Conversion/GPUToNVVM/LowerGpuOpsToNVVMOps.cppmlir/lib/Conversion/GPUToROCDL/LowerGpuOpsToROCDLOps.cppCommit fb79ef524171c96a9f3df025ac7a8a3e00fdc0b4 by aaronFix readability-identifier-naming missing member variablesFixes PR41122 (missing fixes for member variables in a destructor) andPR29005 (does not rename class members in all locations).clang-tools-extra/clang-tidy/readability/IdentifierNamingCheck.cppclang-tools-extra/test/clang-tidy/checkers/readability-identifier-naming-member-decl-usage.cppCommit 7aed43b60739653b13b8503f9df4c958c44feed8 by tejohnsonHopefully last fix for bot failuresHopefully final bot fix for last few failures from2af97be8027a0823b88d4b6a07fc5eedb440bc1f.Looks like sometimes the \"llvm::\" preceeding objects get printed in thedebug pass manager output and sometimes they don't. Replace withwildcard matching.llvm/test/Other/new-pm-thinlto-postlink-samplepgo-defaults.llllvm/test/Other/new-pm-thinlto-prelink-pgo-defaults.llllvm/test/Other/new-pm-thinlto-prelink-samplepgo-defaults.llllvm/test/Other/new-pm-thinlto-postlink-pgo-defaults.llclang/test/CodeGen/thinlto-distributed-newpm.llCommit 484a7472f1aa6906f2b66dc33bcf69cc8d5b9f29 by puyan[llvm][MIRVRegNamerUtils] Adding hashing on FrameIndex MachineOperands.This patch makes it so that cases where multiple instructions thatdiffer only in their FrameIndex MachineOperand values no longer collide.For instance:%1:_(p0) = G_FRAME_INDEX %stack.0%2:_(p0) = G_FRAME_INDEX %stack.1Prior to this patch these instructions would collide together.Differential Revision: https://reviews.llvm.org/D71583llvm/test/CodeGen/MIR/X86/mir-namer-hash-frameindex.mirllvm/lib/CodeGen/MIRVRegNamerUtils.cppCommit 64a93afc3c630c39e5c583e4f67aef5821d635b6 by maskray[X86][Disassembler] Fix a bug when disassembling an empty stringreadPrefixes() assumes insn->bytes is non-empty. The code path is notexercised in llvm-mc because llvm-mc does not feed empty input toMCDisassembler::getInstruction().This bug is uncovered by a5994c789a2982a770254ae1607b5b4cb641f73c. Anempty string did not crash before because the deleted regionReader()allowed UINT64_C(-1) as insn->readerCursor.  Bytes.size() <= Address -> R->Base 0 <= UINT64_C(-1) - UINT32_C(-1)llvm/unittests/MC/Disassembler.cppllvm/lib/Target/X86/Disassembler/X86Disassembler.cppCommit cb988a858abbaf1a1ae0fe03f2a1dae692131ea9 by tejohnsonAdd a couple of missed wildcards in debug-pass-manager output checkingAlong with the previous fix for bot failures from2af97be8027a0823b88d4b6a07fc5eedb440bc1f, need to add a wildcard in acouple of places where my local output did not print \"llvm::\" but thebot is.clang/test/CodeGen/thinlto-distributed-newpm.llllvm/test/Other/new-pm-thinlto-prelink-pgo-defaults.llCommit 6288f86e870c7bb7fe47cc138320b9eb34c93941 by tejohnsonRevert \"[ThinLTO] Add additional ThinLTO pipeline testing with new PM\"This reverts commit 2af97be8027a0823b88d4b6a07fc5eedb440bc1f.After attempting to fix bot failures from matching issues (mostly due toinconsistent printing of \"llvm::\" prefixes on objects, andAnalysisManager objects being printed differntly, I am now seeing somedifferences I don't understand (real differences in the passes beingprinted). Giving up at this point to allow the bots to recover. Willrevisit later.llvm/test/Other/Inputs/new-pm-thinlto-prelink-pgo-defaults.proftextllvm/test/Other/new-pm-thinlto-prelink-samplepgo-defaults.llclang/test/CodeGen/thinlto-distributed-newpm.llllvm/test/Other/new-pm-pgo.llllvm/test/Other/new-pm-thinlto-postlink-samplepgo-defaults.llllvm/test/Other/Inputs/new-pm-thinlto-samplepgo-defaults.profllvm/test/Other/new-pm-thinlto-postlink-pgo-defaults.llllvm/test/Other/new-pm-thinlto-prelink-pgo-defaults.llCommit 2b530053e9d696ada9269e7396180fc6262d2861 by thakis[gn build] (manually) port b4a99a061f51llvm/utils/gn/secondary/clang/include/clang/Config/BUILD.gnCommit 15078d7202b410fd15eedc49d2ab2e4fe9a9f177 by kadircet[clangd] Render header of hover card as a headingReviewers: sammccallSubscribers: ilya-biryukov, MaskRay, jkorous, arphaman, usaxena95,cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72625clang-tools-extra/clangd/FormattedString.hclang-tools-extra/clangd/unittests/FormattedStringTests.cppclang-tools-extra/clangd/unittests/HoverTests.cppclang-tools-extra/clangd/FormattedString.cppclang-tools-extra/clangd/Hover.cppCommit f5465e74ef4c9e24f867002aa598dc9e6481ead3 by kadircet[clangd] Include expression in DecltypeTypeLoc sourcerange whilebuilding SelectionTreeSummary: Currently AST only contains the location for `decltype`keyword, therefore we were skipping expressions inside decltype whilebuilding selection tree.This patch extends source range in such cases to contain the expressionas well. A proper fix would require changes to Sema and DecltypeTypeLocto contain these location information.Fixes https://github.com/clangd/clangd/issues/250.Reviewers: sammccallSubscribers: ilya-biryukov, MaskRay, jkorous, arphaman, usaxena95,cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72594clang-tools-extra/clangd/unittests/SelectionTests.cppclang-tools-extra/clangd/Selection.cppCommit 2bb154591fab6c1d3a99d63ef03c234f0a363410 by apl[lldb-server] Remove dead CMake codeNo files in lldb-server are including a header from a plugin without thewhole path to the header relative to the lldb source directory. There isno need to include the specific directories as a result.lldb/tools/lldb-server/CMakeLists.txtCommit 231875e111facf6d15553dff9d7c04d3e9e4a404 by phosek[Clang] Always set -z now linker option on FuchsiaThis should be the default on Fuchsia.Differential Revision: https://reviews.llvm.org/D70576clang/test/Driver/fuchsia.cppclang/lib/Driver/ToolChains/Fuchsia.cppclang/test/Driver/fuchsia.cCommit a0f4600f4f0ece1d4779544513f5a70c6f0d78bf by daniel_l_sandersRework be15dfa88fb1 such that it works with GlobalISel which doesn't useEVTSummary: be15dfa88fb1 broke GlobalISel's usage of getSetCCInverse()which currently appears to be limited to our out-of-tree backend.GlobalISel doesn't use EVT's and isn't able to derive them from theinformation it has as it doesn't distinguish between integer andfloating point types (that distinction is made by operations rather thanvalues). Bring back the bool version of getSetCCInverse() in a way thatdoesn't break the intent of be15dfa88fb1 but also allows GlobalISel tocontinue using it.Reviewers: spatel, bogner, arichardsonReviewed By: arichardsonSubscribers: rovka, hiraditya, Petar.Avramovic, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72309llvm/include/llvm/CodeGen/ISDOpcodes.hllvm/lib/CodeGen/SelectionDAG/SelectionDAG.cppCommit d0aad9f56e1588effa94b15804b098e6307da6b4 by tejohnson[LTO] Constify lto::Config reference passed to backends (NFC)The lto::Config object saved on the global LTO object should not beupdated by any of the LTO backends. Otherwise we could run intointerference between threads utilizing it. Motivated by some proposedchanges that would have caused it to get modified in the ThinLTObackends.llvm/include/llvm/LTO/LTOBackend.hllvm/lib/LTO/LTOBackend.cppllvm/lib/LTO/LTO.cppllvm/include/llvm/LTO/LTO.hCommit f163755eb0a86508d3bfe1822b7f635952b66104 by a.v.lapshin[Dsymutil][Debuginfo][NFC] #3 Refactor dsymutil to separate DWARFoptimizing part.Summary: This is the next portion of patches for dsymutil.Create DwarfEmitter interface to generate all debug info tables. PutDwarfEmitter into DwarfLinker library and maketools/dsymutil/DwarfStreamer to be child of DwarfEmitter.It passes check-all testing. MD5 checksum for clang .dSYM bundle matchesfor the dsymutil with/without that patch.Reviewers: JDevlieghere, friss, dblaikie, aprantlReviewed By: JDevlieghereSubscribers: merge_guards_bot, hiraditya, thegameg, probinson,llvm-commitsTags: #llvm, #debug-infoDifferential Revision: https://reviews.llvm.org/D72476llvm/tools/dsymutil/DwarfLinkerForBinary.hllvm/tools/dsymutil/DwarfLinkerForBinary.cppllvm/lib/DWARFLinker/DWARFLinker.cppllvm/tools/dsymutil/DwarfStreamer.cppllvm/tools/dsymutil/DwarfStreamer.hllvm/include/llvm/DWARFLinker/DWARFLinker.hCommit 69f4cea413991a2a96635c58272bd4205f3e0c36 by spatel[InstCombine] add tests for select --> copysign; NFCThis is testing for another (possibly final) transform suggested in:https://bugs.llvm.org/show_bug.cgi?id=44153llvm/test/Transforms/InstCombine/select.llCommit c1b13a1b17719aebace1b3be7a6ac7f90b1901a6 by aaronFix a test case by adding -fno-delayed-template-parsing.clang-tools-extra/test/clang-tidy/checkers/readability-identifier-naming-member-decl-usage.cppCommit b7526cc21ce55c8b53250df3d659fbdae3f894a7 by puyan[NFC][clang][IFS] Adding braces to if-statement as prep for D71301.Just trying to make https://reviews.llvm.org/D71301 look cleaner.clang/lib/Frontend/InterfaceStubFunctionsConsumer.cppCommit bd8c8827d96f09be502f0da6897c1aef89e45c30 by puyan[clang][IFS] Prevent Clang-IFS from Leaking symbols from inside a block.Built libdispatch with clang interface stubs. Ran into some blockrelated issues. Basically VarDecl symbols can leak out because I wasn'tchecking the case where a VarDecl is contained inside a BlockDecl(versus a method or function).This patch checks that a VarDecl is not a child decl of a BlockDecl.This patch also does something very similar for c++ lambdas as well.Differential Revision: https://reviews.llvm.org/D71301clang/test/InterfaceStubs/blocks.cclang/test/InterfaceStubs/lambda.cppclang/lib/Frontend/InterfaceStubFunctionsConsumer.cppCommit 577efd09e3b7b3a1ec7fcf0597397f137da99843 by Raphael Isemann[lldb] Revert ddf044290ede for TestProcessAPI.pyIt seems ddf044290ede7d7fd47f4f673e3e628f551a8aac caused the test totime out on the Windows bot, but it's unclear to me why.lldb/packages/Python/lldbsuite/test/python_api/process/TestProcessAPI.pyCommit 26c7a4ed101fae85d2041ee1c8e8483b96e4460e by craig.topper[LegalizeIntegerTypes][X86] Add support for expanding input ofSTRICT_SINT_TO_FP/STRICT_UINT_TO_FP into a libcall.Needed to support i128->fp128 on 32-bit X86.Add full set of strict sint_to_fp/uint_to_fp conversion tests for fp128.llvm/test/CodeGen/X86/fp128-cast-strict.llllvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cppCommit 4268e4f4b84b85266426e99050d31ec63f3ce8aa by riverriddle[mlir] Change the syntax of AffineMapAttr and IntegerSetAttr to avoidconflicts with function types.Summary: The current syntax for AffineMapAttr and IntegerSetAttrconflict with function types, making it currently impossible toround-trip function types(and e.g. FuncOp) in the IR. This revisionchanges the syntax for the attributes by wrapping them in a keyword.AffineMapAttr is wrapped with `affine_map<>` and IntegerSetAttr iswrapped with `affine_set<>`.Reviewed By: nicolasvasilache, ftynseDifferential Revision: https://reviews.llvm.org/D72429mlir/test/Transforms/constant-fold.mlirmlir/test/mlir-cpu-runner/linalg_integration_test.mlirmlir/test/Transforms/Vectorize/vectorize_outer_loop_2d.mlirmlir/test/Transforms/Vectorize/compose_maps.mlirmlir/test/Dialect/Linalg/fusion.mlirmlir/test/Transforms/canonicalize.mlirmlir/test/AffineOps/canonicalize.mlirmlir/test/Transforms/Vectorize/vectorize_outer_loop_transpose_2d.mlirmlir/test/Transforms/Vectorize/vectorize_1d.mlirmlir/docs/Dialects/Standard.mdmlir/test/AffineOps/load-store-invalid.mlirmlir/test/Transforms/lower-affine.mlirmlir/docs/LangRef.mdmlir/test/Transforms/dma-generate.mlirmlir/test/Transforms/Vectorize/normalize_maps.mlirmlir/test/IR/print-op-local-scope.mlirmlir/test/Transforms/loop-fusion.mlirmlir/docs/Dialects/Affine.mdmlir/test/Dialect/Linalg/affine.mlirmlir/test/Transforms/memref-bound-check.mlirmlir/test/Dialect/Linalg/invalid.mlirmlir/test/Dialect/SPIRV/composite-ops.mlirmlir/test/IR/invalid-ops.mlirmlir/test/Transforms/loop-fusion-slice-computation.mlirmlir/include/mlir/IR/DialectImplementation.hmlir/test/AffineOps/load-store.mlirmlir/test/IR/invalid-affinemap.mlirmlir/test/Conversion/StandardToLLVM/convert-memref-ops.mlirmlir/test/IR/opaque_locations.mlirmlir/test/IR/memory-ops.mlirmlir/test/Transforms/strip-debuginfo.mlirmlir/test/IR/affine-map.mlirmlir/test/Dialect/VectorOps/vector-transforms.mlirmlir/test/Transforms/Vectorize/vectorize_transpose_2d.mlirmlir/test/AffineOps/ops.mlirmlir/test/Conversion/StandardToLLVM/convert-to-llvmir.mlirmlir/test/Dialect/Linalg/tile_conv.mlirmlir/test/Dialect/Linalg/transform-patterns.mlirmlir/test/Transforms/affine-loop-invariant-code-motion.mlirmlir/test/Transforms/pipeline-data-transfer.mlirmlir/test/Transforms/memref-normalize.mlirmlir/include/mlir/IR/OpImplementation.hmlir/test/Dialect/VectorOps/invalid.mlirmlir/test/Transforms/Vectorize/vectorize_3d.mlirmlir/test/IR/core-ops.mlirmlir/test/IR/pretty-locations.mlirmlir/test/Transforms/unroll.mlirmlir/lib/Dialect/Linalg/IR/LinalgOps.cppmlir/test/Conversion/VectorToLoops/vector-to-loops.mlirmlir/test/Dialect/VectorOps/ops.mlirmlir/test/Transforms/slicing-utils.mlirmlir/lib/Parser/TokenKinds.defmlir/test/Dialect/Linalg/tile.mlirmlir/test/Dialect/Linalg/roundtrip.mlirmlir/test/Transforms/memref-dataflow-opt.mlirmlir/test/IR/locations.mlirmlir/test/Transforms/loop-tiling.mlirmlir/test/Dialect/Linalg/loops.mlirmlir/test/AffineOps/dma.mlirmlir/test/AffineOps/invalid.mlirmlir/test/IR/parser.mlirmlir/test/Dialect/Linalg/llvm.mlirmlir/test/Conversion/StandardToLLVM/standard-to-llvm.mlirmlir/lib/IR/AsmPrinter.cppmlir/lib/Parser/Parser.cppmlir/test/Transforms/affine-data-copy.mlirmlir/test/Transforms/cse.mlirmlir/test/Transforms/loop-invariant-code-motion.mlirmlir/test/AffineOps/inlining.mlirmlir/test/Dialect/Linalg/tile_indexed_generic.mlirmlir/test/Transforms/memref-dependence-check.mlirmlir/test/Transforms/simplify-affine-structures.mlirmlir/test/AffineOps/memref-stride-calculation.mlirmlir/test/EDSC/builder-api-test.cppmlir/test/Transforms/Vectorize/vectorize_2d.mlirmlir/test/Dialect/Linalg/promote.mlirmlir/test/Transforms/unroll-jam.mlirmlir/test/IR/invalid.mlirCommit 349636d2bfc39a5c81a835a95d203a42d9f9301a by erich.keaneImplement VectorType conditional operator GNU extension.GCC supports the conditional operator on VectorTypes that acts as a'select' in C++ mode. This patch implements the support. Types areconverted as closely to GCC's behavior as possible, though in a fewplaces consistency with our existing vector type support was preferred.Note that this implementation is different from the OpenCL version in anumber of ways, so it unfortunately required a different implementation.First, the SEMA rules and promotion rules are significantly different.Secondly, GCC implements COND[i] != 0 ? LHS[i] : RHS[i] (where i is inthe range 0- VectorSize, for each element).  In OpenCL, the condition isCOND[i] < 0 ? LHS[i]: RHS[i].In the process of implementing this, it was also required to make theexpression COND ? LHS : RHS type dependent if COND is type dependent,since the type is now dependent on the condition.  For example:    T ? 1 : 2;Is not typically type dependent, since the result can be deduced fromthe operands.  HOWEVER, if T is a VectorType now, it could change thisto a 'select' (basically a swizzle with a non-constant mask) with the 1and 2 being promoted to vectors themselves.While this is a change, it is NOT a standards incompatible change. Basedon my (and D. Gregor's, at the time of writing the code) reading of thestandard, the expression is supposed to be type dependent if ANYsub-expression is type dependent.Differential Revision: https://reviews.llvm.org/D71463clang/lib/CodeGen/CGExprScalar.cppclang/lib/Sema/SemaExprCXX.cppclang/include/clang/Sema/Sema.hclang/test/SemaCXX/vector-conditional.cppclang/docs/LanguageExtensions.rstclang/test/Sema/vector-gcc-compat.cppclang/include/clang/AST/Expr.hclang/test/CodeGenCXX/vector-conditional.cppclang/lib/AST/ExprConstant.cppclang/include/clang/Basic/DiagnosticSemaKinds.tdCommit 80a094e1348ae850cd996e947d70e34abf331685 by spatel[InstCombine] add FMF to tests for more coverage; NFCllvm/test/Transforms/InstCombine/select.llCommit 810b28edb3f64569054d49d6ddf18a4d802d9b11 by martin[ItaniumCXXABI] Make tls wrappers properly comdatJust marking a symbol as weak_odr/linkonce_odr isn't enough for actuallytolerating multiple copies of it at linking on windows, it has to bemade a proper comdat; make it comdat for all platforms for consistency.This should hopefully fixhttps://bugzilla.mozilla.org/show_bug.cgi?id=1566288.Differential Revision: https://reviews.llvm.org/D71572clang/lib/CodeGen/ItaniumCXXABI.cppclang/test/CodeGenCXX/cxx11-thread-local-reference.cppclang/test/CodeGenCXX/cxx11-thread-local.cppclang/test/CodeGenCXX/tls-init-funcs.cppclang/test/OpenMP/threadprivate_codegen.cppCommit 31441a3e007833a180b0112550eddb78547771f2 by tejohnson[ThinLTO/WPD] Fix index-based WPD for alias vtablesSummary: A recent fix in D69452 fixed index based WPD in the presence ofavailable_externally vtables. It added a cast of the vtable def summaryto a GlobalVarSummary. However, in some cases one def may be an alias,in which case we need to get the base object before casting, otherwisewe will crash.Reviewers: evgeny777, steven_wu, aganeaSubscribers: mehdi_amini, inglorion, hiraditya, dexonsmith, arphaman,llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D71040llvm/test/ThinLTO/X86/devirt_alias.llllvm/test/ThinLTO/X86/Inputs/devirt_alias.llllvm/lib/Transforms/IPO/WholeProgramDevirt.cppCommit f0719bf2196c807351137ff30e39fd12aa5aa884 by erich.keanePR44514: Fix recovery from noexcept with non-convertible expressionsWe currently treat noexcept(not-convertible-to-bool) as 'none', whichresults in the typeloc info being a different size, and causing anassert later on in the process.  In order to make recovery lessdestructive, replace this with noexcept(false) and a constructed 'false'expression.Bug Report: https://bugs.llvm.org/show_bug.cgi?id=44514Differential Revision: https://reviews.llvm.org/D72621clang/lib/Sema/SemaExceptionSpec.cppclang/test/SemaCXX/cxx0x-noexcept-expression.cppCommit cb89c7e3f744c1fede60f7d1c43528654de676bd by riverriddle[mlir] Remove unnecessary assert for single region.This was left over debugging.mlir/lib/Transforms/Utils/RegionUtils.cppCommit 328e0f3dcac52171b8cdedeaba22c98e7fbb75ea by akhuangRevert \"[DWARF5][DebugInfo]: Added support for DebugInfo generation forauto return type for C++ member functions.\"This reverts commit c958639098a8702b831952b1a1a677ae19190a55, whichcauses a crash. See https://reviews.llvm.org/D70524 for details.llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cppllvm/test/DebugInfo/X86/debug-info-auto-return.llCommit a506f7f9105eec4baac296d21c922457d6f4b52a by puyan[clang][IFS][test] Fixing mangled name of a test for Darwin.Darwin adds an extra '_' before every C/global function mangled name andbecause of this, this test was breaking on Darwin.This is a fix for commit: https://reviews.llvm.org/D71301clang/test/InterfaceStubs/lambda.cppCommit 7b9f8e17d15d7516b186c0a85de71133b780f939 by yamauchi[PGO][CHR] Guard against 0-to-0 branch weight and avoid division by zerocrash.Summary: This fixes a crash in internal builds under SamplePGO.Reviewers: davidxlSubscribers: hiraditya, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72653llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cppllvm/test/Transforms/PGOProfile/chr.llCommit 6d57511e0b6f95a369efe7274923a36de3489e7b by apl[lldb-server] Prefer target_include_directoriesIn the documentation of `include_directories`, it notes that`target_include_directories` is preferred because it affects specifictargets intead of propagating include search paths to the entireproject.lldb/tools/lldb-server/CMakeLists.txtCommit 6fca03f0cae77c275870c4569bfeeb7ca0f561a6 by riverriddle[mlir] Update the use-list algorithms in SymbolTable to support nestedreferences.Summary: This updates the use list algorithms to support querying from aspecific symbol, allowing for the collection and detection of nestedreferences. This works by walking the parent \"symbol scopes\" andapplying the existing algorithm at each level.Reviewed By: jpienaarDifferential Revision: https://reviews.llvm.org/D72042mlir/test/IR/test-symbol-rauw.mlirmlir/include/mlir/IR/SymbolTable.hmlir/lib/IR/SymbolTable.cppmlir/test/lib/IR/TestSymbolUses.cppmlir/test/IR/test-symbol-uses.mlirCommit c7748404920b3674e79059cbbe73b6041a214444 by riverriddle[mlir] Update the CallGraph for nested symbol references, and simplifyCallableOpInterfaceSummary: This enables tracking calls that cross symbol table boundaries.It also simplifies some of the implementation details ofCallableOpInterface, i.e. there can only be one region within thecallable operation.Depends On D72042Reviewed By: jpienaarDifferential Revision: https://reviews.llvm.org/D72043mlir/lib/Transforms/Inliner.cppmlir/include/mlir/Analysis/CallInterfaces.tdmlir/lib/Transforms/Utils/InliningUtils.cppmlir/test/lib/TestDialect/TestOps.tdmlir/lib/Analysis/CallGraph.cppmlir/test/Analysis/test-callgraph.mlirmlir/include/mlir/IR/Function.hCommit 53539bb032d162e0147c0e9650a5d1c7ca77dae0 by akhuang[DebugInfo] Add another level to DebugInfoKind called ConstructorThe option will limit debug info by only emitting complete class typeinformation when its constructor is emitted. This patch changescomparisons with LimitedDebugInfo to use the new level instead.Differential Revision: https://reviews.llvm.org/D72427clang/lib/CodeGen/CGDebugInfo.cppclang/lib/CodeGen/CodeGenModule.cppclang/include/clang/Basic/DebugInfoOptions.hclang/lib/CodeGen/CodeGenFunction.cppclang/lib/Frontend/CompilerInvocation.cppclang/lib/CodeGen/CGStmt.cppclang/lib/Driver/ToolChains/Clang.cppclang/lib/CodeGen/CGDecl.cppclang/lib/CodeGen/CGBlocks.cppclang/include/clang/Basic/CodeGenOptions.hclang/lib/CodeGen/CGStmtOpenMP.cppCommit 9b92e4fbdb5bc4fdd21702e0ce104dfcac6a54a7 by riverriddle[mlir] Add support for attaching a visibility to symbols.Summary: The visibility defines the structural reachability of thesymbol within the IR. Symbols can define one of three visibilities:* Public The symbol \\may be accessed from outside of the visible IR. Wecannot assume that we can observe all of the uses of this symbol.* Private The symbol may only be referenced from within the operationsin the current symbol table, via SymbolRefAttr.* Nested The symbol may be referenced by operations in symbol tablesabove the current symbol table, as long as each symbol table parent alsodefines a non-private symbol. This allows or referencing the symbol fromoutside of the defining symbol table, while retaining the ability forthe compiler to see all uses.These properties help to reason about the properties of a symbol, andwill be used in a follow up to implement a dce pass on dead symbols.A few examples of what this would look like in the IR are shown below:  module @public_module {   // This function can be accessed by 'live.user'   func @nested_function() attributes { sym_visibility = \"nested\" }    // This function cannot be accessed outside of 'public_module'  func @private_function() attributes { sym_visibility = \"private\" } }  // This function can only be accessed from within this module. func @private_function() attributes { sym_visibility = \"private\" }  // This function may be referenced externally. func @public_function()  \"live.user\"() {uses = [@public_module::@nested_function,                                     @private_function,                                     @public_function]} : () -> ()Depends On D72043Reviewed By: mehdi_aminiDifferential Revision: https://reviews.llvm.org/D72044mlir/lib/IR/Module.cppmlir/test/IR/traits.mlirmlir/lib/IR/SymbolTable.cppmlir/test/lib/TestDialect/TestOps.tdmlir/include/mlir/IR/SymbolTable.hCommit 03edd6d6a693e5bc7b0df488c4d4901cc55d3566 by riverriddle[mlir] NFC: Remove unused variable.mlir/test/lib/IR/TestSymbolUses.cppCommit 989bed989a41732d1b70314bd9063ccd6e74fe5c by richardRe-enable testing of .s tests under test/CodeGen/X86.These were temporarily disabled in 2013 and we apparently forgot to everturn them back on again.Fix spelling of flag to llvm-mc in recently-added test that wasn'tactually being run due to this.llvm/test/CodeGen/X86/align-branch-boundary-default.sllvm/test/CodeGen/X86/lit.local.cfgCommit e68e4cbcc50ba7ab8df5e09023f15e6cc2223bef by efriedma[GlobalISel] Change representation of shuffle masks in MachineOperand.We're planning to remove the shufflemask operand from ShuffleVectorInst(D72467); fix GlobalISel so it doesn't depend on that Constant.The change to prelegalizercombiner-shuffle-vector.mir happens becausethe input contains a literal \"-1\" in the mask (so the parser/verifierweren't really handling it properly). We now treat it as equivalent to\"undef\" in all contexts.Differential Revision: https://reviews.llvm.org/D72663llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cppllvm/test/CodeGen/AArch64/GlobalISel/prelegalizercombiner-shuffle-vector.mirllvm/lib/CodeGen/MachineVerifier.cppllvm/lib/CodeGen/GlobalISel/CombinerHelper.cppllvm/include/llvm/CodeGen/MachineFunction.hllvm/include/llvm/CodeGen/MachineInstrBuilder.hllvm/include/llvm/CodeGen/MachineOperand.hllvm/lib/CodeGen/MIRParser/MIParser.cppllvm/lib/Target/AArch64/AArch64InstructionSelector.cppllvm/lib/CodeGen/MachineFunction.cppllvm/lib/CodeGen/GlobalISel/IRTranslator.cppllvm/lib/CodeGen/MachineOperand.cppCommit 09db6e320985f2bee22634049857224e0a5e58f8 by Jonas Devlieghere[llvm-exegesis] Initialize const bitvector memberThis causes an error with older versions of clang: constructor for'llvm::exegesis::InstructionsCache' must explicitly initialize the constmember 'BVC'llvm/tools/llvm-exegesis/lib/MCInstrDescView.cppCommit fb51ce10d7dcab9209d0cd059d907810dbd0197d by ditaliano[LanguageRuntime] Retire an unused member function. NFCI.lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCRuntimeV2.hlldb/source/Plugins/LanguageRuntime/ObjC/ObjCLanguageRuntime.hlldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/AppleObjCRuntimeV2.cpplldb/source/Plugins/LanguageRuntime/ObjC/ObjCLanguageRuntime.cppCommit 84baf123a5213512e92e7deca2d111e00c2b97da by thakistry to fix InterfaceStubs/lambda.cpp on Windows after bd8c8827d96f0clang/test/InterfaceStubs/lambda.cppCommit d1e3b23be46ac3ada8f5fe844629ad5bc233c24d by Jonas Devlieghere[lldb/Utility] Add std::move to make placate clang 3.8This fixes an error thrown by clang 3.8 that no viable conversion fromreturned value to the function return type.lldb/source/Utility/StructuredData.cppCommit 3818101f7f8a631f4d2e4c639420fa9d6ab325e9 by ajcbik[mlir] [VectorOps] fixed typo in verifier of slice opReviewers: nicolasvasilache, andydavis1, rriddleReviewed By: nicolasvasilache, rriddleSubscribers: merge_guards_bot, mehdi_amini, rriddle, jpienaar, burmako,shauheen, antiagainst, nicolasvasilache, arpith-jacob, mgester,lucyrfox, liufengdb, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72664mlir/lib/Dialect/VectorOps/VectorOps.cppCommit 1ab13f8cc3f79d67c9b337cc0f4ac1dde0460be8 by mgorny[clang] [test] Fix riscv-toolchain-extra to be less picky about pathsFix riscv-toolchain-extra tests to pass when CLANG_RESOURCE_DIR is setto another value than the default.Differential Revision: https://reviews.llvm.org/D72591clang/test/Driver/riscv32-toolchain-extra.cclang/test/Driver/riscv64-toolchain-extra.cCommit 1768ed7f8b1f53b5b4b3ff80da6ae2dce22b74a9 by craig.topper[X86] Add test to show that nofpexcept flag is not preserved by stackreload folding.llvm/test/CodeGen/X86/stack-folding-fp-nofpexcept.mirCommit b1dcd84c7ea3c97ddd73f629441be24791f23624 by craig.topper[X86] Copy the nofpexcept flag when folding a load into an instructionusing the load folding tables./llvm/test/CodeGen/X86/stack-folding-fp-nofpexcept.mirllvm/lib/Target/X86/X86InstrInfo.cppCommit a7cac2bd4b6812ea6b59b5fa0298eadf3815a3b0 by aminim[MLIR] Fix broken link locations after move to monorepoI used the codemod python tool to do this with the following commands:codemod 'tensorflow/mlir/blob/master/include''llvm/llvm-project/blob/master/mlir/include' codemod'tensorflow/mlir/blob/master' 'llvm/llvm-project/blob/master/mlir'codemod 'tensorflow/mlir' 'llvm-project/llvm'Differential Revision: https://reviews.llvm.org/D72244mlir/docs/Dialects/Vector.mdmlir/examples/toy/Ch2/include/toy/Dialect.hmlir/examples/toy/Ch5/include/toy/Dialect.hmlir/examples/toy/Ch4/include/toy/Dialect.hmlir/docs/Tutorials/Toy/Ch-7.mdmlir/examples/toy/README.mdmlir/examples/toy/Ch6/include/toy/Dialect.hmlir/examples/toy/Ch3/include/toy/Dialect.hmlir/examples/toy/Ch7/include/toy/Dialect.hCommit 671544c25b1215433bc22d475db7eaef51096ea5 by czhengsz[PowerPC] [NFC] set instruction number as 1st priority of lsr costmodel.llvm/test/CodeGen/PowerPC/lsr-insns-cost.llCommit 0136f226c4e46258ea73fcb994f6559cec4a9aa2 by maskray[MC] Don't resolve relocations referencing STB_LOCAL STT_GNU_IFUNCllvm/lib/MC/ELFObjectWriter.cppllvm/test/MC/ELF/target-in-same-section.sCommit 7cd429f27d4886bb841ed0e3702e970f5f6cccd1 by maskray[ELF] Add -z force-ibt and -z shstk for Intel Control-flow EnforcementTechnologyThis patch is a joint work by Rui Ueyama and me based on D58102 by XiangZhang.It adds Intel CET (Control-flow Enforcement Technology) support to lld.The implementation follows the draft version of psABI which you candownload from https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI.CET introduces a new restriction on indirect jump instructions so thatyou can limit the places to which you can jump to using indirect jumps.In order to use the feature, you need to compile source files with-fcf-protection=full.* IBT is enabled if all input files are compiled with the flag. To forceenabling ibt, pass -z force-ibt.* SHSTK is enabled if all input files are compiled with the flag, or if-z shstk is specified.IBT-enabled executables/shared objects have two PLT sections, \".plt\" and\".plt.sec\".  For the details as to why we have two sections, please readthe comments.Reviewed By: xiangzhangllvmDifferential Revision: https://reviews.llvm.org/D59780lld/test/ELF/x86-64-feature-cet.slld/test/ELF/i386-feature-cet.slld/ELF/Config.hlld/ELF/Arch/X86.cpplld/ELF/Target.hlld/ELF/Driver.cpplld/ELF/SyntheticSections.hlld/ELF/SyntheticSections.cpplld/ELF/Arch/X86_64.cpplld/docs/ld.lld.1lld/test/ELF/i386-cet.slld/ELF/Options.tdlld/ELF/Writer.cpplld/test/ELF/x86-64-cet.sCommit 84637408f2e63821014974dac08dee50bb197c1b by protze[OpenMP][Tool] Make tests for archer dependent on TSanIf the openmp project is built standalone, the test compiler is featuretested for an available -fsanitize=thread flag. If the openmp project isbuilt as part of llvm, the target tsan is needed to test archer.An additional line (requires tsan) was introduced to the tests, thispatch updates the line numbers for the race.Follow-up for 77ad98cReviewed By: jdoerfertDifferential Revision: https://reviews.llvm.org/D71914openmp/tools/archer/tests/races/lock-unrelated.copenmp/tools/archer/tests/races/task-dependency.copenmp/tools/archer/tests/CMakeLists.txtopenmp/cmake/DetectTestCompiler/CMakeLists.txtopenmp/tools/archer/tests/races/lock-nested-unrelated.copenmp/tools/archer/tests/races/critical-unrelated.copenmp/tools/archer/tests/races/task-two.copenmp/tools/archer/tests/races/task-taskwait-nested.copenmp/cmake/OpenMPTesting.cmakeopenmp/tools/archer/tests/lit.site.cfg.inopenmp/tools/archer/tests/lit.cfgopenmp/tools/archer/tests/races/task-taskgroup-unrelated.copenmp/tools/archer/tests/races/parallel-simple.cCommit d9819f366233e53427d0929729a58f85dc748cfb by maskray[ELF] Delete unintended --force-btilld/ELF/Options.tdCommit ed810da73270267082c347bc2919eebb7978a2fe by protze[OpenMP][Tool] Improving stack trace for ArcherThe OpenMP runtime is not instrumented, so entering the runtime leavesno hint on the source line of the pragma on ThreadSanitizer's functionstack.This patch adds function entry/exit annotations for OpenMP parallelregions, and synchronization regions (barrier, taskwait, taskgroup).Reviewed By: jdoerfertDifferential Revision: https://reviews.llvm.org/D70408openmp/tools/archer/ompt-tsan.cppCommit 63c3691f79179db9a16f260f1cf81475fdfef060 by jay.foad[AMDGPU] Add gfx9 assembler and disassembler test casesSummary: This adds assembler tests for cases that were previously onlyin the disassembler tests, and vice versa.Reviewers: rampitec, arsenm, nhaehnleSubscribers: kzhuravl, jvesely, wdng, yaxunl, dstuttard, tpr, t-tye,jfb, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72592llvm/test/MC/Disassembler/AMDGPU/gfx9_dasm_all.txtllvm/test/MC/AMDGPU/gfx9_asm_all.sCommit 0950de264e37264b9f767a898bd839d9fcb7328f by jay.foad[AMDGPU] Improve error checking in gfx10 assembler testsSummary: This adds checks that the expected error was actually reportedagainst the correct instruction, and fixes a couple of problems thatthat showed up: one incorrect W32-ERR: v_cmp_class_f16_sdwa vcc, v1, v2 src0_sel:DWORD src1_sel:DWORD// W64: encoding: [0xf9,0x04,0x1e,0x7d,0x01,0x00,0x06,0x06]-// W32-ERR: error: invalid operand for instruction+// W32-ERR: error: {{instruction not supported on this GPU|invalidoperand for instruction}}and one missing W32-ERR: v_cmp_class_f16_sdwa s[6:7], v1, v2 src0_sel:DWORD src1_sel:DWORD// W64: encoding: [0xf9,0x04,0x1e,0x7d,0x01,0x86,0x06,0x06]+// W32-ERR: error: invalid operand for instructionReviewers: rampitec, arsenmSubscribers: kzhuravl, jvesely, wdng, nhaehnle, yaxunl, dstuttard, tpr,t-tye, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72611llvm/test/MC/AMDGPU/gfx10_asm_all.sCommit 440ce5164f52a6b7cdf70322cc1c95656cac9aa9 by jay.foad[AMDGPU] Remove duplicate gfx10 assembler and disassembler testsSummary: Depends on D72611.Reviewers: rampitec, arsenmSubscribers: kzhuravl, jvesely, wdng, nhaehnle, yaxunl, dstuttard, tpr,t-tye, jfb, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72616llvm/test/MC/Disassembler/AMDGPU/gfx10_dasm_all.txtllvm/test/MC/AMDGPU/gfx10_asm_all.sCommit 61b6a4e82653e1209126404d33ad20a268f55db1 by Raphael Isemann[lldb] Fix that SBThread.GetStopDescription is returning strings withuninitialized memory at the end.Summary:`SBThread.GetStopDescription` is a curious API as it takes a bufferlength as a parameter that specifies how many bytes the buffer we passhas. Then we fill the buffer until the specified length (or the lengthof the stop description string) and return the string length. If thebuffer is a nullptr however, we instead return how many bytes we wouldhave written to the buffer so that the user can allocate a buffer withthe right size and pass that size to a subsequent`SBThread.GetStopDescription` call.Funnily enough, it is not possible to pass a nullptr via the Python SWIGbindings, so that might be the first API in LLDB that is not only hardto use correctly but impossible to use correctly. The only way to callthis function via Python is to throw in a large size limit that ishopefully large enough to contain the stop description (otherwise weonly get the truncated stop description).Currently passing a size limit that is smaller than the returned stopdescription doesn't cause the Python bindings to return the stopdescription but instead the truncated stop description + uninitializedcharacters at the end of the string. The reason for this is that wereturn the result of `snprintf` from the method which returns the amountof bytes that *would* have been written (which is larger than thebuffer). This causes our Python bindings to return a string that is aslarge as full stop description but the buffer that has been filled isonly as large as the passed in buffer size.This patch fixes this issue by just recalculating the string length inour buffer instead of relying on the wrong return value. We also have todo this in a new type map as the old type map is also used for allmethods with the given argument pair `char *dst, size_t dst_len` (e.g.SBProcess.GetSTDOUT`). These methods have different semantics for thesearguments and don't null-terminate the returned buffer (they insteadreturn the size in bytes) so we can't change the existing typemapwithout breaking them.Reviewers: labath, jinghamReviewed By: labathSubscribers: clayborg, shafik, abidh, JDevlieghere, lldb-commitsTags: #lldbDifferential Revision: https://reviews.llvm.org/D72086lldb/bindings/interface/SBThread.illdb/packages/Python/lldbsuite/test/python_api/thread/TestThreadAPI.pylldb/bindings/python/python-typemaps.swigCommit f18370fe0e7576fb9947e49d66f7a6962c6822ce by Raphael Isemann[lldb] Don't defend against internal LLVM errors in IRInterpreterSummary: Whenever we cast an LLVM instruction to one of its subclasses,we do a double check if the RTTI enum value actually allows us to castthe class. I don't see a way this can ever happen as even when LLVM'sRTTI system has some corrupt internal state (which we probably shouldnot test in the first place) we just reuse LLVM RTTI to do the secondcheck.This also means that if we ever make an actual programming error in thisfunction (e.g., have a enum value and then cast it to a differentsubclass), we just silently fall back to the JIT in our tests.We also can't test this code in any reasonable way.This removes the checks and uses `llvm::cast` instead which will raise afatal error when casting fails.Reviewers: labath, mibReviewed By: labathSubscribers: abidh, JDevlieghere, lldb-commitsTags: #lldbDifferential Revision: https://reviews.llvm.org/D72596lldb/source/Expression/IRInterpreter.cppCommit 547abdd921e45fd65a2fa60f21715facb4af31b2 by sam.mccall[mlir] Fix -Wunusedmlir/lib/Dialect/Linalg/IR/LinalgOps.cppCommit eca44745871bc46728903aaa262abc6344d4f959 by Stanislav.Mekhanoshin[AMDGPU] Fix getInstrLatency() always returning 1We do not have InstrItinerary so generic getInstLatency() was alwaysdefaulting to return 1 cycle. We need to use TargetSchedModel instead tocompute an instruction's latency.Differential Revision: https://reviews.llvm.org/D72655llvm/lib/Target/AMDGPU/SIInstrInfo.hllvm/test/CodeGen/AMDGPU/max.i16.llllvm/lib/Target/AMDGPU/SIInstrInfo.cppllvm/test/CodeGen/AMDGPU/scheduler-handle-move-bundle.mirCommit d8ffd601d523fa0c0a55e25e62af9ffaa618629d by Raphael Isemann[lldb][NFC] Rewrite python_api/rdar-12481949 testSummary: This renames the test `rdar-12481949` to `get-value-32bit-int`as it just tests that we return the correct result get callingGetValueAsSigned/GetValueAsUnsigned on 32-bit integers.It also deletes all the strange things going on in this test includingresetting the data formatters (which are to my knowledge not used tocalculate scalar values) and testing Python's long integers (let's justassume that our Python distribution works correctly). Also modernisesthe setup code.Reviewers: labath, aprantlReviewed By: aprantlSubscribers: JDevlieghere, lldb-commitsTags: #lldbDifferential Revision: https://reviews.llvm.org/D72593lldb/packages/Python/lldbsuite/test/python_api/get-value-32bit-int/TestGetValue32BitInt.pylldb/packages/Python/lldbsuite/test/python_api/get-value-32bit-int/Makefilelldb/packages/Python/lldbsuite/test/python_api/rdar-12481949/main.cpplldb/packages/Python/lldbsuite/test/python_api/rdar-12481949/Makefilelldb/packages/Python/lldbsuite/test/python_api/get-value-32bit-int/main.cpplldb/packages/Python/lldbsuite/test/python_api/rdar-12481949/Test-rdar-12481949.pyCommit 6d8abe424a77f736fbed114eeac574b9bfe6b0c1 by bion[libcxx] [test] Add casts to avoid signed/unsigned mismatch warnings onMSVC++A bug was filed that these warnings should not be emitted asDevCom-883961. (https://developercommunity.visualstudio.com/content/problem/883961/c4389-signedunsigned-mismatch-should-not-be-emitte.html)libcxx/test/std/algorithms/alg.modifying.operations/alg.reverse/reverse_copy.pass.cpplibcxx/test/std/algorithms/alg.modifying.operations/alg.remove/remove_copy.pass.cpplibcxx/test/std/algorithms/alg.modifying.operations/alg.remove/remove_copy_if.pass.cppCommit ad741853c38880dff99cd5b5035b8965c5a73011 by Stanislav.Mekhanoshin[AMDGPU] Model distance to instruction in bundleThis change allows to model the height of the instruction within abundle for latency adjustment purposes.Differential Revision: https://reviews.llvm.org/D72669llvm/lib/Target/AMDGPU/AMDGPUSubtarget.cppllvm/test/CodeGen/AMDGPU/bundle-latency.mirCommit ec6579fc047f9ac18588b833dfde0b69064e013a by grimar[llvm-readobj][test] - Fix grammar in comments.This addresses post commit review comments for D71766.llvm/test/tools/llvm-readobj/ELF/file-header-os-abi.testllvm/test/tools/llvm-readobj/ELF/file-header-abi-version.testCommit 45924eb4671692b3fa9fd52fe39c81ec0647a848 by malcolm.parsons[clang-tidy] Ignore implicit casts in modernize-use-default-member-initSummary: Initialising a pointer from nullptr involves an implicit cast.Ignore it after getting initialiser from InitListExpr.Fixes: PR44440Reviewers: aaron.ballman, alexfh, JonasTothReviewed By: JonasTothSubscribers: xazax.hun, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72630clang-tools-extra/test/clang-tidy/checkers/modernize-use-default-member-init.cppclang-tools-extra/clang-tidy/modernize/UseDefaultMemberInitCheck.cppCommit 3388b0f59dcc7813278c753f96b66229f290cc59 by simon.tatham[TableGen] Introduce a `defvar` statement.Summary: This allows you to define a global or local variable to anarbitrary value, and refer to it in subsequent definitions.The main use I anticipate for this is if you have to compute somedifficult function of the parameters of a multiclass, and then use itmany times. For example:  multiclass Foo<int i, string s> {   defvar op = !cast<BaseClass>(\"whatnot_\" # s # \"_\" # i);   def myRecord {     dag a = (op this, (op that, the other), (op x, y, z));     int b = op.subfield;   }   def myOtherRecord<\"template params including\", op>; }There are a couple of ways to do this already, but they're not reallysatisfactory. You can replace `defvar x = y` with a loop over asingleton list, `foreach x = [y] in { ... }` - but that's unintuitive tosomeone who hasn't seen that workaround idiom before, and requires anextra pair of braces that you often didn't really want. Or you candefine a nested pair of multiclasses, with the inner one taking `x` as atemplate parameter, and the outer one instantiating it just once withthe desired value of `x` computed from its other parameters - but thatmakes it awkward to sequentially compute each value based on theprevious ones. I think `defvar` makes things considerably easier.You can also use `defvar` at the top level, where it inserts globalsinto the same map used by `defset`. That allows you to define globalconstants without having to make a dummy record for them to live in:  defvar MAX_BUFSIZE = 512;  // previously: // def Dummy { int MAX_BUFSIZE = 512; } // and then refer to Dummy.MAX_BUFSIZE everywhereReviewers: nhaehnle, hfinkelReviewed By: hfinkelSubscribers: hiraditya, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D71407llvm/lib/TableGen/TGLexer.hllvm/test/TableGen/defvar.tdllvm/lib/TableGen/TGParser.cppllvm/lib/TableGen/TGParser.hllvm/docs/TableGen/LangRef.rstllvm/lib/TableGen/TGLexer.cppCommit ddbc0b1e516407a24d986a1998026f1ac5864270 by simon.tatham[TableGen] Introduce an if/then/else statement.Summary: This allows you to make some of the defs in a multiclass or`foreach` conditional on an expression computed from the parameters oriteration variables.It was already possible to simulate an if statement using a `foreach`with a dummy iteration variable and a list constructed using `!if` sothat it had length 0 or 1 depending on the condition, e.g.  foreach unusedIterationVar = !if(condition, [1], []<int>) in { ... }But this syntax is nicer to read, and also more convenient because itallows an else clause.To avoid upheaval in the implementation, I've implemented `if` as puresyntactic sugar on the `foreach` implementation: internally, `ParseIf`actually does construct exactly the kind of foreach shown above (andanother reversed one for the else clause if present).Reviewers: nhaehnle, hfinkelReviewed By: hfinkelSubscribers: hiraditya, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D71474llvm/lib/TableGen/TGLexer.hllvm/test/TableGen/ifstmt.tdllvm/lib/TableGen/TGLexer.cppllvm/lib/TableGen/TGParser.cppllvm/docs/TableGen/LangRef.rstllvm/test/TableGen/defvar.tdllvm/lib/TableGen/TGParser.hCommit 41b520188820a732e6de4865c08704f412013209 by sam.mccall[Target] Fix uninitialized value in10c11e4e2d05cf0e8f8251f50d84ce77eb1e9b8dllvm/include/llvm/Target/TargetOptions.hCommit 72ca86fd34ecc5f7ccbaf923d2d508dad2a6a64c by anna.welker[ARM][MVE] Masked gathers from base + vector of offsetsEnables the masked gather pass to create a masked gather loading from abase and vector of offsets. This also enables v8i16 and v16i8 gatherloads.Differential Revision: https://reviews.llvm.org/D72330llvm/test/CodeGen/Thumb2/mve-gather-ind16-scaled.llllvm/lib/Target/ARM/MVEGatherScatterLowering.cppllvm/test/CodeGen/Thumb2/mve-gather-ind16-unscaled.llllvm/test/CodeGen/Thumb2/mve-gather-ind32-scaled.llllvm/test/CodeGen/Thumb2/mve-gather-ind32-unscaled.llllvm/test/CodeGen/Thumb2/mve-gather-ptrs.llllvm/test/CodeGen/Thumb2/mve-gather-scatter-opt.llllvm/test/CodeGen/Thumb2/mve-gather-ind8-unscaled.llCommit 018b042593f007456b0695421942ec84ec816a30 by Adrian Prantl[mlir] Add loop.parallel, loop.reduce and loop.reduce.return operations.Summary: These operations can be used to specify a loop nest with a bodythat can contain reductions. The iteration space can be iterated in anyorder.RFC:https://groups.google.com/a/tensorflow.org/d/topic/mlir/pwtSgiKFPis/discussionDifferential Revision: https://reviews.llvm.org/D72394mlir/lib/Dialect/LoopOps/LoopOps.cppmlir/include/mlir/Dialect/LoopOps/LoopOps.tdmlir/test/Dialect/Loops/invalid.mlirmlir/test/Dialect/Loops/ops.mlirCommit 5a6eae3dea2342c2a83e4502de43927808f8ca21 by Adrian Prantl[mlir] Ran git-clang-format.Summary: I forgot to ran git-clang-format before committing.mlir/lib/Dialect/LoopOps/LoopOps.cppCommit 9492e9d8cfd356109276da5aa926b297db0e16db by Raphael Isemann[lldb][NFC] Cleanup ClangASTContext::CompleteTagDeclarationDefinitionMakes this function exit early instead of nesting if statements.Also removed all the if (tag_type->getDecl()) checks. If we created aTagType with a nullptr as a Decl then Clang would have alreadydeferenced that nullptr during TagType creation so there is no point ingracefully handling a nullptr here.lldb/source/Symbol/ClangASTContext.cppCommit 4624a1e8ac8a3f69cc887403b976f538f587744a by herhut[mlir] Create a gpu.module operation for the GPU Dialect.Summary: This is based on the use of code constantly checking for anattribute on a model and instead represents the distinct operaion with adifferent op. Instead, this op can be used to provide better filtering.Reviewers: herhut, mravishankar, antiagainst, rriddleReviewed By: herhut, antiagainst, rriddleSubscribers: liufengdb, aartbik, jholewinski, mgorny, mehdi_amini,rriddle, jpienaar, burmako, shauheen, antiagainst, nicolasvasilache,csigg, arpith-jacob, mgester, lucyrfox, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72336mlir/test/Conversion/GPUToCUDA/lower-nvvm-kernel-to-cubin.mlirmlir/lib/Dialect/GPU/Transforms/KernelOutlining.cppmlir/lib/Conversion/GPUToSPIRV/ConvertGPUToSPIRVPass.cppmlir/test/Dialect/GPU/ops.mlirmlir/include/mlir/Dialect/GPU/GPUOps.tdmlir/test/Conversion/GPUToCUDA/lower-launch-func-to-cuda.mlirmlir/test/Conversion/GPUToNVVM/memory-attrbution.mlirmlir/test/Conversion/GPUToNVVM/gpu-to-nvvm.mlirmlir/test/Dialect/GPU/outlining.mlirmlir/lib/Conversion/GPUToCUDA/ConvertLaunchFuncToCudaCalls.cppmlir/test/Conversion/GPUToSPIRV/loop.mlirmlir/lib/Conversion/GPUToNVVM/LowerGpuOpsToNVVMOps.cppmlir/include/mlir/Conversion/GPUToNVVM/GPUToNVVMPass.hmlir/lib/Conversion/GPUToSPIRV/CMakeLists.txtmlir/test/Conversion/GPUToSPIRV/builtins.mlirmlir/lib/Dialect/GPU/IR/GPUDialect.cppmlir/test/Conversion/GPUToSPIRV/simple.mlirmlir/lib/Conversion/GPUToSPIRV/ConvertGPUToSPIRV.cppmlir/include/mlir/Conversion/GPUToCUDA/GPUToCUDAPass.hmlir/lib/Conversion/GPUToCUDA/ConvertKernelFuncToCubin.cppmlir/lib/Conversion/GPUToSPIRV/GPUToSPIRV.tdmlir/test/Dialect/GPU/invalid.mlirmlir/tools/mlir-cuda-runner/mlir-cuda-runner.cppmlir/test/Conversion/GPUToSPIRV/load-store.mlirCommit 3d6c492d7a9830a1a39b85dfa215743581d52715 by jrtc27[RISCV] Fix ILP32D lowering for double+double/double+int return typesSummary: Previously, since these aggregates are > 2*XLen, Clang wouldthink they were being returned indirectly and thus would decrease thenumber of available GPRs available by 1. For long argument lists thiscould lead to a struct argument incorrectly being passed indirectly.Reviewers: asb, lenaryReviewed By: asb, lenarySubscribers: luismarques, rbar, johnrusso, simoncook, apazos, sabuasal,niosHD, kito-cheng, shiva0217, zzheng, edward-jones, rogfer01,MartinMosbeck, brucehoult, the_o, rkruppe, PkmX, jocewei, psnobl, benna,Jim, lenary, s.egerton, pzheng, sameer.abuasal, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D69590clang/test/CodeGen/riscv32-ilp32d-abi.cclang/lib/CodeGen/TargetInfo.cppCommit d6ea8ff0d74bfe5cd181ccfe91c2c300c5f7a35d by zinenko[mlir] Fix translation of splat constants to LLVM IRSummary: When converting splat constants for nested sequential LLVM IRtypes wrapped in MLIR, the constant conversion was erroneously assumingit was always possible to recursively construct a constant of asequential type given only one value. Instead, wait until all sequentialtypes are unpacked recursively before constructing a scalar constant andwrapping it into the surrounding sequential type.Subscribers: mehdi_amini, rriddle, jpienaar, burmako, shauheen,antiagainst, nicolasvasilache, arpith-jacob, mgester, lucyrfox, aartbik,liufengdb, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72688mlir/test/Target/llvmir.mlirmlir/lib/Target/LLVMIR/ModuleTranslation.cppCommit e73b20c57dc7a8c847ebadeb7e19c08ec84f5bd7 by sam.parker[ARM][MVE] Disallow VPSEL for tail predicationDue to the current way that we collect predicated instructions, we can'teasily handle vpsel in tail predicated loops. There are a couple ofissues: 1) It will use the VPR as a predicate operand, but doesn't haveto be  instead a VPT block, which means we can assert while building up  the VPT block because we don't find another VPST to being a new  one. 2) VPSEL still requires a VPR operand even after tailpredicating,  which means we can't remove it unless there is another  instruction, such as vcmp, that can provide the VPR def.The first issue should be a relatively simple fix in the logic of theLowOverheadLoops pass, whereas the second will require us to representthe 'implicit' tail predication with an explicit value.Differential Revision: https://reviews.llvm.org/D72629llvm/test/CodeGen/Thumb2/LowOverheadLoops/inloop-vpnot-1.mirllvm/test/CodeGen/Thumb2/LowOverheadLoops/inloop-vpsel-2.mirllvm/test/CodeGen/Thumb2/LowOverheadLoops/inloop-vpnot-3.mirllvm/lib/Target/ARM/ARMLowOverheadLoops.cppllvm/lib/Target/ARM/ARMInstrMVE.tdllvm/test/CodeGen/Thumb2/LowOverheadLoops/inloop-vpnot-2.mirllvm/test/CodeGen/Thumb2/LowOverheadLoops/inloop-vpsel-1.mirCommit a43b0065c5c78eba3fb83881fb628f5b8182db64 by llvm-dev[SelectionDAG] ComputeKnownBits - mergegetValidMinimumShiftAmountConstant() and generic ISD::SRL handling.As mentioned by @nikic on rGef5debac4302 (although that was just aboutSHL), we can merge the guaranteed top zero bits from the shifted value,and then, if a min shift amount is known, zero out the top bits as well.SHL tests / handling will be added in a follow up patch.llvm/test/CodeGen/X86/vector-idiv-udiv-128.llllvm/test/CodeGen/X86/vector-idiv-udiv-256.llllvm/lib/CodeGen/SelectionDAG/SelectionDAG.cppCommit fd42a4ac7a69adb92f87c7fa927509f177dcc6ca by llvm-dev[X86][SSE] Add add(shl(and(x,c1),c2),c3) test case with non-uniformshift valueAs mentioned by @nikic on rGef5debac4302, we should merge the guaranteedtop zero bits from the shifted value and min shift amount code so theycan both set the high bits to zero.llvm/test/CodeGen/X86/combine-shl.llCommit d94d079a6a5b12156e4b818c8ba46eb143f335b9 by diogo.sampaio[ARM][Thumb2] Fix ADD/SUB invalid writes to SPSummary: This patch fixes pr23772  [ARM] r226200 can emit illegal thumb2instruction: \"sub sp, r12, #80\". The violation was that SUB and ADD(reg, immediate) instructions can only write to SP if the sourceregister is also SP. So the above instructions was unpredictable. Toenforce that the instruction t2(ADD|SUB)ri does not write to SP we nowenforce the destination register to be rGPR (That exclude PC and SP).Different than the ARM specification, that defines one instruction thatcan read from SP, and one that can't, here we inserted one that can'twrite to SP, and other that can only write to SP as to reuse most of thehard-coded size optimizations. When performing this change, it uncoveredthat emitting Thumb2 Reg plus Immediate could not emit all variants ofADD SP, SP #imm instructions before so it was refactored to be able to.(see test/CodeGen/Thumb2/mve-stacksplot.mir where we use a subw sp, sp,Imm12 variant ) It also uncovered a disassembly issue of adr.winstructions, that were only written as SUBW instructions (seellvm/test/MC/Disassembler/ARM/thumb2.txt).Reviewers: eli.friedman, dmgreen, carwil, olista01, efriedma, andreadbReviewed By: efriedmaSubscribers: gbedwell, john.brawn, efriedma, ostannard, kristof.beyls,hiraditya, dmgreen, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D70680llvm/test/MC/ARM/register-token-source-loc.sllvm/test/CodeGen/Thumb2/mve-stacksplot.mirllvm/lib/Target/ARM/Thumb2InstrInfo.cppllvm/test/CodeGen/Thumb2/fp16-stacksplot.mirllvm/lib/Target/ARM/ARMInstrThumb2.tdllvm/test/MC/Disassembler/ARM/thumb2-v8.txtllvm/test/MC/ARM/negative-immediates.sllvm/test/MC/Disassembler/ARM/invalid-thumbv7.txtllvm/lib/Target/ARM/ARMBaseInstrInfo.cppllvm/test/CodeGen/MIR/ARM/thumb2-sub-sp-t3.mirllvm/lib/Target/ARM/ARMLoadStoreOptimizer.cppllvm/test/CodeGen/ARM/GlobalISel/thumb-select-arithmetic-ops.mirllvm/lib/Target/ARM/ARMAsmPrinter.cppllvm/test/MC/Disassembler/ARM/thumb2.txtllvm/test/CodeGen/ARM/GlobalISel/thumb-select-load-store.mirllvm/lib/Target/ARM/AsmParser/ARMAsmParser.cppllvm/test/MC/ARM/thumb-diagnostics.sllvm/test/MC/Disassembler/ARM/thumb-tests.txtllvm/test/tools/llvm-mca/ARM/simple-cortex-m33.sllvm/test/CodeGen/Thumb2/peephole-addsub.mirllvm/test/CodeGen/Thumb2/peephole-cmp.mirllvm/test/CodeGen/Thumb2/t2peephole-t2ADDrr-to-t2ADDri.llllvm/test/MC/ARM/invalid-addsub.sllvm/test/MC/ARM/basic-thumb2-instructions.sllvm/test/CodeGen/Thumb2/bug-subw.llllvm/lib/Target/ARM/Disassembler/ARMDisassembler.cppCommit bad6032bc15fa8d16b67b86ef2b2fe48724e756e by sam.parker[ARM][LowOverheadLoops] Change predicate inspectionUse the already provided helper function to get the operand type so thatwe can detect whether the vpr is being used as a predicate or not. Alsouse existing helpers to get the predicate indices when we converting thevpt blocks. This enables us to support both types of vpr predicateoperand.Differential Revision: https://reviews.llvm.org/D72504llvm/test/CodeGen/Thumb2/LowOverheadLoops/vmaxmin_vpred_r.mirllvm/lib/Target/ARM/ARMLowOverheadLoops.cppCommit c05a11108b9a9deb266c3c1758677462df61e05e by llvm-dev[SelectionDAG] ComputeKnownBits - mergegetValidMinimumShiftAmountConstant() and generic ISD::SHL handling.As mentioned by @nikic on rGef5debac4302, we can merge the guaranteedbottom zero bits from the shifted value, and then, if a min shift amountis known, zero out the bottom bits as well.llvm/test/CodeGen/X86/combine-shl.llllvm/lib/CodeGen/SelectionDAG/SelectionDAG.cppCommit 31aed2e0dad25d43039a9b933b1b95fbdeb27704 by llvm-devFix \"MIParser::getIRValue(unsigned int)’ defined but not used\" warning.NFCI.llvm/lib/CodeGen/MIRParser/MIParser.cppCommit e27632c3026328e41b0d7dbf25631041e979a2f9 by sam.parker[ARM][LowOverheadLoops] Allow all MVE instrs.We have a whitelist of instructions that we allow when tail predicating,since these are trivial ones that we've deemed need no special handling.Now change ARMLowOverheadLoops to allow the non-trivial instructions ifthey're contained within a valid VPT block. Since a valid block is onethat is predicated upon the VCTP so we know that these non-trivialinstructions will still behave as expected once the implicit predicationis used instead.This also fixes a previous test failure.Differential Revision: https://reviews.llvm.org/D72509llvm/test/CodeGen/Thumb2/LowOverheadLoops/vmldava_in_vpt.mirllvm/unittests/Target/ARM/MachineInstrTest.cppllvm/lib/Target/ARM/ARMLowOverheadLoops.cppllvm/test/CodeGen/Thumb2/LowOverheadLoops/add_reduce.mirCommit 877723b7ce813d25fc4a358b7d2cb90468733a72 by medismail.bennani[lldb/Expression] Improve interpreter error message with a non-runningtargetWhen trying to interpret an expression with a function call, if theprocess hasn't been launched, the expression fails to be interpreted andthe user gets the following  error message:```error: Can't run the expression locally```This message doesn't explain why the expression failed to beinterpreted, that's why this patch improves the error message that isdisplayed when trying to run an expression while no process is running.rdar://11991708Differential Revision: https://reviews.llvm.org/D72510Signed-off-by: Med Ismail Bennani <medismail.bennani@gmail.com>lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionParser.cpplldb/packages/Python/lldbsuite/test/commands/expression/dont_allow_jit/TestAllowJIT.pyCommit 71d5454b377239213874a0d762860e6a3e60bf54 by simon.tatham[ARM,MVE] Use the new Tablegen `defvar` and `if` statements.Summary: This cleans up a lot of ugly `foreach` bodges that I've beenusing to work around the lack of those two language features. Now theyboth exist, I can make then all into something more legible!In particular, in the common pattern in `ARMInstrMVE.td` where amulticlass defines an `Instruction` instance plus one or more `Pat` thatselect it, I've used a `defvar` to wrap `!cast<Instruction>(NAME)` sothat the patterns themselves become a little more legible.Replacing a `foreach` with a `defvar` removes a level of blockstructure, so several pieces of code have their indentation changed bythis patch. Best viewed with whitespace ignored.NFC: the output of `llvm-tblgen -print-records` on the two affectedTablegen sources is exactly identical before and after this change, sothere should be no effect at all on any of the other generated files.Reviewers: MarkMurrayARM, miyukiReviewed By: MarkMurrayARMSubscribers: kristof.beyls, hiraditya, dmgreen, cfe-commits,llvm-commitsTags: #clang, #llvmDifferential Revision: https://reviews.llvm.org/D72690clang/include/clang/Basic/arm_mve.tdllvm/lib/Target/ARM/ARMInstrMVE.tdCommit bff33bd5c83b947cccb4d6cf6ebca9dc021f716b by Milos.Stojanovic[unittests] Fix \"comparison of integers of different signs\" warningsA warning is sent because `std::distance()` returns a signed type so`CmpHelperEQ()` gets instantiated into a function that comparesdifferently signed arguments.Differential Revision: https://reviews.llvm.org/D72632llvm/unittests/ExecutionEngine/JITLink/LinkGraphTests.cppllvm/unittests/Object/MinidumpTest.cppCommit df186507e1d07c3ddba091a076ba7a33dbdc5867 by benny.kraMake helper functions static or move them into anonymous namespaces.NFC.mlir/lib/Conversion/LoopsToGPU/LoopsToGPU.cppllvm/lib/Target/Mips/MipsLegalizerInfo.cppmlir/lib/Dialect/SPIRV/SPIRVDialect.cppllvm/lib/CodeGen/MIRParser/MIParser.cppmlir/lib/Dialect/Linalg/Transforms/Tiling.cppmlir/lib/Dialect/SPIRV/Serialization/TranslateRegistration.cppmlir/lib/IR/SymbolTable.cppmlir/lib/Dialect/LoopOps/LoopOps.cppclang/lib/CodeGen/CGBuiltin.cppclang/lib/AST/ASTImporter.cppclang/lib/StaticAnalyzer/Checkers/CheckPlacementNew.cppmlir/lib/Dialect/SDBM/SDBMExpr.cppmlir/lib/Pass/PassStatistics.cppmlir/test/lib/TestDialect/TestPatterns.cppmlir/lib/Conversion/VectorToLLVM/ConvertVectorToLLVM.cppmlir/lib/Conversion/LinalgToLLVM/LinalgToLLVM.cppmlir/lib/Dialect/VectorOps/VectorOps.cppmlir/lib/Analysis/Liveness.cppmlir/lib/Analysis/AffineStructures.cppclang/lib/Driver/ToolChains/Arch/ARM.cppmlir/lib/Dialect/VectorOps/VectorTransforms.cppllvm/lib/Transforms/InstCombine/InstructionCombining.cppmlir/lib/Transforms/Utils/LoopUtils.cppmlir/lib/Dialect/AffineOps/AffineOps.cppmlir/lib/Dialect/QuantOps/Transforms/ConvertSimQuant.cppmlir/lib/Dialect/Linalg/Transforms/LinalgToLoops.cppclang/lib/CodeGen/CGOpenMPRuntime.cppmlir/lib/ExecutionEngine/ExecutionEngine.cppmlir/lib/Analysis/AffineAnalysis.cppmlir/lib/Dialect/GPU/IR/GPUDialect.cppllvm/lib/Target/AArch64/AArch64FrameLowering.cppmlir/lib/Analysis/Utils.cppmlir/lib/Conversion/StandardToSPIRV/ConvertStandardToSPIRV.cppmlir/lib/Dialect/Linalg/IR/LinalgOps.cppclang/lib/StaticAnalyzer/Checkers/FuchsiaHandleChecker.cppCommit 81ee484484a0be59da8f749a9b4cf56bb8d37402 by ulrich.weigand[FPEnv] Fix chain handling regression after 04a8696Code in getRoot made the assumption that every node in PendingLoads mustalways itself have a dependency on the current DAG root node.After the changes in 04a8696, it turns out that this assumption nolonger holds true, causing wrong codegen in some cases (e.g. storesafter constrained FP intrinsics might get deleted).To fix this, we now need to make sure that the TokenFactor created bygetRoot always includes the previous root, if there is no implicitdependency already present.The original getControlRoot code already has exactly this check, so thispatch simply reuses that code now for getRoot as well. This fixes theregression.NFC if no constrained FP intrinsic is present.llvm/test/CodeGen/SystemZ/fp-strict-alias.llllvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cppllvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.hCommit dee6e39c7561a8b733cc260738ff7ea3ae78ee0c by selliott[RISCV][NFC] Deduplicate Atomic Intrinsic DefinitionsSummary: This is a slight cleanup, to use multiclasses to avoid theduplication between the different atomic intrinsic definitions. Theproduced intrinsics are unchanged, they're just generated in a moresuccinct way.Reviewers: asb, luismarques, jrtc27Reviewed By: luismarques, jrtc27Subscribers: Jim, rbar, johnrusso, simoncook, sabuasal, niosHD,kito-cheng, shiva0217, jrtc27, MaskRay, zzheng, edward-jones, rogfer01,MartinMosbeck, brucehoult, the_o, rkruppe, jfb, PkmX, jocewei, psnobl,benna, s.egerton, pzheng, sameer.abuasal, apazos, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D71777llvm/include/llvm/IR/IntrinsicsRISCV.tdCommit 6aca3e8dfa228fb75e410e34db74982a0ab3939f by ulrich.weigand[FPEnv] Add some comments to IRBuilder.hAs requested via post-commit comment for D71467, this adds commentsdocumenting CreateFCmp vs. CreateFCmpS to the header file.llvm/include/llvm/IR/IRBuilder.hCommit 3f944a8b8ca895667f04748f62d350f07ee1416b by Raphael Isemann[lldb][NFC] Make name parameter in AddMethodToCXXRecordType a StringReflldb/source/Symbol/ClangASTContext.cpplldb/include/lldb/Symbol/ClangASTContext.hCommit e3ed63e83ab6194aaf6711b97bdf09f16dcf2401 by simon.tatham[TableGen] Update editor modes for new keywords.Summary: D71407 and D71474 added new keywords to the Tablegen language:`defvar`, `if`, `then` and `else`. This commit updates the variouseditor modes to highlight them appropriately.Some of the modes also didn't include `defset`, so I've added that toowhile I was there.Reviewers: MaskRay, lebedev.ri, plotfiReviewed By: lebedev.riSubscribers: llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72693llvm/utils/kate/llvm-tablegen.xmlllvm/utils/emacs/tablegen-mode.elllvm/utils/vim/syntax/tablegen.vimllvm/utils/vscode/tablegen/syntaxes/TableGen.tmLanguageCommit cfe2fab708de3a1d8e05a829a132f335a189acc9 by spatel[InstSimplify] add tests for vector select; NFCllvm/test/Transforms/InstCombine/select.llllvm/test/Transforms/InstSimplify/select.llCommit 77cc690bae310f4cba0a34f2da8a37a7c9a10a82 by Tim NorthoverAArch64: fix bitcode upgrade of @llvm.neon.addp.We were upgrading it to faddp, but a version taking two type parametersinstead of one. This then got upgraded a second time to the version withjust one parameter, but occasionally (for reasons I don't understand)this unusual two-stage process corrupted a use-list, leading to a crashwhen the two faddp declarations didn't match.llvm/lib/IR/AutoUpgrade.cppllvm/test/Bitcode/aarch64-addp-upgrade.llllvm/test/Bitcode/aarch64-addp-upgrade.bcCommit a705cf1acbe94498f7fcca4e89be6d4820271227 by pavelExpression eval lookup speedup by not returning methods inManualDWARFIndex::GetFunctionsSummary: This change is connected with https://reviews.llvm.org/D69843In large codebases, we sometimes see Module::FindFunctions (when calledfrom ClangExpressionDeclMap::FindExternalVisibleDecls) returning hugeamounts of functions.In current fix I trying to return only function_fullnames fromManualDWARFIndex::GetFunctions when eFunctionNameTypeFull is passed asargument.Reviewers: labath, jarin, aprantlReviewed By: labathSubscribers: shafik, clayborg, teemperor, arphaman, lldb-commitsTags: #lldbDifferential Revision: https://reviews.llvm.org/D70846lldb/source/Plugins/ExpressionParser/Clang/ClangExpressionDeclMap.cpplldb/test/Shell/SymbolFile/DWARF/find-basic-function.cpplldb/source/Plugins/SymbolFile/DWARF/ManualDWARFIndex.cpplldb/packages/Python/lldbsuite/test/lang/cpp/printf/TestPrintf.pyCommit 7ec7a6e5bfa745c285d5c651af02b93f2cb923e1 by llvm-devFix \"null pointer passed to nonnull argument\" clang static analyzerwarnings. NFCI.Assert that the memcpy arguments are valid.clang/lib/AST/NestedNameSpecifier.cppCommit 25dc5c7cd159522ec2375544f473c757ee13a03b by llvm-devFix \"pointer is null\" static analyzer warnings. NFCI.Use castAs<> instead of getAs<> since the pointer is dereferencedimmediately below and castAs will perform the null assertion for us.clang/lib/CodeGen/CGObjC.cppCommit cc8a1504283731f05f937464b631f170d748b7b0 by llvm-devMerge isa<> and getAs<> calls to fix \"pointer is null\" static analyzerwarnings. NFCI.clang/lib/Sema/SemaExprObjC.cppCommit 9d905e8ceddda8b103e208ed43a117cb4445e682 by llvm-devRemove duplicate variable. NFCI.clang/lib/Sema/SemaExprObjC.cppCommit 591cd40584300a1d5d33bfaefa4698c02ef56887 by llvm-devFix \"pointer is null\" static analyzer warnings. NFCI.Use cast<> instead of cast_or_null<> since the pointers are alwaysdereferenced and cast<> will perform the null assertion for us.clang/lib/Sema/SemaTemplate.cppCommit 1d6b964ed1f7a77b178e86bef7d569611f2c0983 by llvm-devFix \"pointer is null\" static analyzer warning. NFCI.Remove Ctx null test as clang static analyzer assumes that this can fail- replace it with an assertion as the pointer is always dereferencedbelow.clang/lib/Sema/SemaTemplate.cppCommit e1f524ea43f920767259c47e201405091d7e76fd by grimar[llvm-readobj][llvm-readelf][test] - Add a few more dynamic sectiontests.This adds a few more tests for dynamic section.We only had tests for simple unknown values for 64-bits target, in thispatch I've added OS specific and processor specific tags. Also it testsboth 32 and 64-bits targets now.It will help to fix the formatting issues we have and diagnose apossible new ones.Differential revision: https://reviews.llvm.org/D71896llvm/test/tools/llvm-readobj/ELF/dynamic-tags.testllvm/test/tools/llvm-objdump/elf-dynamic-section.testCommit 4b5bc38802dcc7d2c6d7f5af1eca1755bd0fd9cb by pavel[lldb/DWARF] Move location list sections into DWARFContextThese are the last sections not managed by the DWARFContext object. Ialso introduce separate SectionType enums for dwo section variants, asthis is necessary for proper handling of single-file split dwarf.lldb/source/Plugins/SymbolFile/DWARF/DWARFContext.hlldb/include/lldb/lldb-enumerations.hlldb/test/Shell/ObjectFile/ELF/section-types.yamllldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.cpplldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpplldb/source/Plugins/ObjectFile/ELF/ObjectFileELF.cpplldb/source/Core/Section.cpplldb/source/Symbol/ObjectFile.cpplldb/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpplldb/source/Plugins/SymbolFile/DWARF/DWARFContext.cpplldb/test/Shell/SymbolFile/DWARF/debug_loclists-dwo.slldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.hCommit 25a8aec7f37b970849ccf5f2893431e2ca858709 by Xiangling.Liao[AIX] ExternalSymbolSDNode loweringFor memcpy/memset/memmove etc., replace ExternalSymbolSDNode with aMCSymbolSDNode, which have a prefix dot before function name as entrypoint symbol.Differential Revision: https://reviews.llvm.org/D70718llvm/lib/Target/PowerPC/PPCISelLowering.cppllvm/test/CodeGen/PowerPC/aix-user-defined-memcpy.llllvm/test/CodeGen/PowerPC/aix-external-sym-sdnode-lowering.llCommit 35787e3a062a4a21c145137552d20cb1169c74fc by Tom.Weaver[DBG][LIVEDEBUGVALUES][NFC] Add Targeted LiveDebugValues BehaviourTests.Adds 22 distinct tests that exercise the live-debug-values passesexpected behaviour.reviewers: aprantl, vskDifferential revision: https://reviews.llvm.org/D72515llvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_two_backedge.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_one_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_diamond.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_diamond_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop_outer_moved.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_bb_to_bb_move_to_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_early_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_match_move.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_loop.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_break_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_break.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_one_move.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop_moved.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_two_backedge_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_match_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_bb_to_bb.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_bb_to_bb_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_diamond_move.mirCommit 92451f0904ceab1d81d71a9f17ab366bf57eddc7 by sven.vanhaastregt[OpenCL] Add MSAA sharing extension builtin functionsAdd the MSAA sharing builtin functions from the OpenCL ExtensionSpecification.Patch by Pierre Gondois and Sven van Haastregt.clang/lib/Sema/OpenCLBuiltins.tdCommit 192cce10f67e4f22be6d9b8c0975f78ad246d1bd by floRevert \"Recommit \"[GlobalOpt] Pass DTU to removeUnreachableBlocksinstead of recomputing.\"\"This reverts commit a03d7b0f24b65d69721dbbbc871df0629efcf774.As discussed in D68298, this causes a compile-time regression, in casethe DTs requested are not used elsewhere in GlobalOpt. We should onlyget the DTs if they are available here, but this seems not possible withthe legacy pass manager from a module pass.llvm/lib/Transforms/IPO/GlobalOpt.cppCommit 1cc8fff420a76ae869f73ce2b19e7c1fc73da3ed by Sanne.Wouda[AArch64] Fix save register pairing for Windows AAPCSSummary: On Windows, when a function does not have an unwind table (forexample, EH filtering funclets), we don't correctly pair FP and LR toform the frame record in all circumstances.Fix this by invalidating a pair when the second register is FP whencompiling for Windows, even when CFI is not needed.Fixes PR44271 introduced by D65653.Reviewers: efriedma, sdesmalen, rovka, rengolin, t.p.northover,thegameg, greenedReviewed By: rengolinSubscribers: kristof.beyls, hiraditya, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D71754llvm/lib/Target/AArch64/AArch64FrameLowering.cppllvm/test/CodeGen/AArch64/win64-no-uwtable.llCommit b10f6b7112278ba91d57173466bff7fc85d4bf0d by Tom.WeaverRevert \"[DBG][LIVEDEBUGVALUES][NFC] Add Targeted LiveDebugValuesBehaviour Tests.\"This reverts commit 35787e3a062a4a21c145137552d20cb1169c74fc.llvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_two_backedge.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_diamond_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_diamond_move.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_one_move.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_break.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop_outer_moved.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_match_move.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_bb_to_bb_move_to_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_one_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_match_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_early_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_diamond.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_bb_to_bb.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_two_backedge_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_break_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_loop.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop_moved.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_bb_to_bb_clobbered.mirCommit 9738c757bd9bc2fdca935f2b4e356f1d5e5f3682 by malcolm.parsons[clang-tidy] Match InitListExpr in modernize-use-default-member-initSummary: modernize-use-default-member-init wasn't warning aboutredundant initialisers when the initialiser was an InitListExpr.  AddinitListExpr to the matcher.Fixes: PR44439Reviewers: aaron.ballman, alexfh, JonasTothReviewed By: aaron.ballmanSubscribers: xazax.hun, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72691clang-tools-extra/clang-tidy/modernize/UseDefaultMemberInitCheck.cppclang-tools-extra/test/clang-tidy/checkers/modernize-use-default-member-init.cppCommit 3b929fe7763570fc1d4a4691a53257a4a0b7760e by ibiryukov[Syntax] Assert invariants on tree structure and fix a bug in mutationsAdd checks for some structural invariants when building and mutating thesyntax trees.Fix a bug failing the invariants after mutations: the parent of nodesadded into the tree was null.clang/lib/Tooling/Syntax/Synthesis.cppclang/include/clang/Tooling/Syntax/Tree.hclang/lib/Tooling/Syntax/BuildTree.cppclang/lib/Tooling/Syntax/Mutations.cppclang/lib/Tooling/Syntax/Tree.cppCommit 07a41018e9d27f67f7b4295eb7e00e0345c0aacf by ibiryukov[Syntax] Mark synthesized nodes as modifiableThis was an oversight in the original patch. Also add correspondingtests.clang/lib/Tooling/Syntax/Synthesis.cppclang/unittests/Tooling/Syntax/TreeTest.cppclang/include/clang/Tooling/Syntax/Tree.hCommit e7b2d9f4702cb8882aa275bcb8eab37be17601e1 by Tom.Weaver[DBG][LIVEDEBUGVALUES][NFC] Add Targeted LiveDebugValues BehaviourTests.Adds 22 distinct tests that exercise the live-debug-values passesexpected behaviour.reviewers: aprantl, vskDifferential revision: https://reviews.llvm.org/D72515llvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_one_move.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop_outer_moved.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_break.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_break_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_match_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_loop.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_diamond.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_two_backedge.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_bb_to_bb_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_match_move.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_diamond_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop_moved.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_two_backedge_clobbered.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_bb_to_bb.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_diamond_move.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_basic_diamond_one_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_bb_to_bb_move_to_clobber.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_within_loop.mirllvm/test/DebugInfo/MIR/X86/livedebugvalues_loop_early_clobber.mirCommit 9ef6faf49670e18eb1ba04105a7c70b450cdaa71 by kostyak[scudo][standalone] Fork supportSummary: fork() wasn't well (or at all) supported in Scudo. Thismaterialized in deadlocks in children.In order to properly support fork, we will lock the allocator pre-forkand unlock it post-fork in parent and child. This is done via a`pthread_atfork` call installing the necessary handlers.A couple of things suck here: this function allocates - so this has tobe done post initialization as our init path is not reentrance, and itdoesn't allow for an extra pointer - so we can't pass the allocator weare currently working with.In order to work around this, I added a post-init template parameterthat gets executed once the allocator is initialized for the currentthread. Its job for the C wrappers is to install the atfork handlers.I reorganized a bit the impacted area and added some tests, courtesy ofcferris@ that were deadlocking prior to this fix.Subscribers: jfb, #sanitizers, llvm-commitsTags: #sanitizers, #llvmDifferential Revision: https://reviews.llvm.org/D72470compiler-rt/lib/scudo/standalone/tsd_exclusive.hcompiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cppcompiler-rt/lib/scudo/standalone/CMakeLists.txtcompiler-rt/lib/scudo/standalone/wrappers_c.inccompiler-rt/lib/scudo/standalone/primary64.hcompiler-rt/lib/scudo/standalone/tests/tsd_test.cppcompiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cppcompiler-rt/lib/scudo/standalone/wrappers_c.cppcompiler-rt/lib/scudo/standalone/combined.hcompiler-rt/lib/scudo/standalone/quarantine.hcompiler-rt/lib/scudo/standalone/primary32.hcompiler-rt/lib/scudo/standalone/bytemap.hcompiler-rt/lib/scudo/standalone/wrappers_c_bionic.cppcompiler-rt/lib/scudo/standalone/wrappers_cpp.cppcompiler-rt/lib/scudo/standalone/tests/CMakeLists.txtcompiler-rt/lib/scudo/standalone/stats.hcompiler-rt/lib/scudo/standalone/tsd.hcompiler-rt/lib/scudo/standalone/tsd_shared.hCommit 013c07f697886649b068cd97127e528b4fe7c03e by ibiryukov[Syntax] Unset IsOriginal flag on nodes removed from the treeAnd add a corresponding test. Only nodes inside the TranslationUnitsubtree can be marked as original, computeReplacements() relies on this.clang/unittests/Tooling/Syntax/TreeTest.cppclang/lib/Tooling/Syntax/Tree.cppCommit a08c0adee072226179736c4f6caf3dd0b7a7c9af by sjoerd.meijer[ARM][MVE] VTP Block Pass fixFix a missing and broken test: 2 VPT blocks predicated on the same VCMPinstruction that can be folded. The problem was that for each VPT block,we record the predicate statements with a list, but the same instructionwas added twice. Thus, we were running in an assert trying to remove thesame instruction twice. To avoid this the instructions are now recordedwith a set.Differential Revision: https://reviews.llvm.org/D72699llvm/lib/Target/ARM/MVEVPTBlockPass.cppllvm/test/CodeGen/Thumb2/mve-vpt-2-blocks-1-pred.mirCommit e2b8e2113a4929027a237b67f7be86db4ec103d3 by Jinsong Ji[clang][OpenCL] Fix covered switch warning-Werror clang build is broken now.tools/clang/lib/Sema/OpenCLBuiltins.inc:11824:5: error: default label inswitch which covers all enumeration values[-Werror,-Wcovered-switch-default]   default:We don't need default now, since all enumeration values are covered.Reviewed By: svenvhDifferential Revision: https://reviews.llvm.org/D72707clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cppCommit ab9dbc1d124cdf288474073f5233e3fd6ee8e9c3 by llvm-devFix \"pointer is null\" clang static analyzer warnings. NFCI.Use cast<>/castAs<> instead of dyn_cast<>/getAs<> since the pointers arealways dereferenced and cast<>/castAs<> will perform the null assertionfor us.clang/lib/Sema/SemaOverload.cppCommit cfd366ba74c566038c6f417da9c9becc321fd737 by llvm-devFix \"pointer is null\" static analyzer warnings. NFCI.Use castAs<> instead of getAs<> since the pointer is dereferencedimmediately in all cases and castAs will perform the null assertion forus.clang/lib/Sema/SemaDeclCXX.cppCommit c8a14c2d4773841daa303736332d0038ead6f36a by spatel[IR] fix potential crash in Constant::isElementWiseEqual()There's only one user of this API currently, and it seems impossiblethat it would compare values with different types.But that's not true in general, so we need to make sure the types arethe same.As denoted by the FIXME comments, we will also crash on FP values.That's what brought me here, but we can make that a follow-up patch.llvm/unittests/IR/ConstantsTest.cppllvm/lib/IR/Constants.cppCommit fd19ffc6a502f8e647696d550abb04a6c8c1b182 by Jonas Devlieghere[lldb/Utility] Use assert instead of llvm_unreachable for LLDBAssertllvm_unreachable is marked noreturn so the compiler can assume the codefor printing the error message in release builds isn't hit which defeatsthe purpose.lldb/source/Utility/LLDBAssert.cppCommit 57cf6ee9c84434161088c39a6f8dd2aae14eb12d by scott.egerton[RISCV] Add Clang frontend support for Bitmanip extensionSummary: This adds the __riscv_bitmanip macro and the 'b' target featureto enable it.Reviewers: asb, simoncook, lewis-revill, PaoloS, lenaryReviewed By: lenarySubscribers: Jim, rbar, johnrusso, sabuasal, niosHD, kito-cheng,shiva0217, jrtc27, MaskRay, zzheng, edward-jones, rogfer01,MartinMosbeck, brucehoult, the_o, rkruppe, PkmX, jocewei, psnobl, benna,pzheng, sameer.abuasal, apazos, luismarques, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D71553clang/lib/Basic/Targets/RISCV.hclang/test/Preprocessor/riscv-target-features.cclang/lib/Basic/Targets/RISCV.cppclang/lib/Driver/ToolChains/Arch/RISCV.cppCommit 0877843ddacca0bea049b65d8a328e5038c72b66 by aqjune[test] Make data layout of load-bitcast64.ll explicit, useupdate_test_checks.pyllvm/test/Transforms/InstCombine/load-bitcast64.llCommit 2948ec5ca98f8593584f2117bc92fe8d75f6f098 by gribozavrRemoved PointerUnion3 and PointerUnion4 aliases in favor of the variadictemplatellvm/lib/Transforms/IPO/LowerTypeTests.cppllvm/unittests/ADT/PointerUnionTest.cppclang/include/clang/AST/ExprObjC.hclang/include/clang/AST/DeclCXX.hllvm/include/llvm/Support/SourceMgr.hclang/unittests/CodeGen/IRMatchers.hclang/include/clang/AST/TemplateName.hclang/lib/AST/ASTContext.cppclang/tools/libclang/CXCursor.hclang/include/clang/AST/Decl.hclang/include/clang/AST/DeclTemplate.hllvm/include/llvm/ADT/PointerUnion.hllvm/tools/llvm-pdbutil/InputFile.hCommit 40c5bd4212a51216a489fdaaf59060921d677009 by maskray[ELF] --exclude-libs: don't assign VER_NDX_LOCAL to undefined symbolsSuggested by Peter Collingbourne.Non-VER_NDX_GLOBAL versions should not be assigned to defined symbols.--exclude-libs violates this and can cause a spurious error \"cannotrefer to absolute symbol\" after D71795.excludeLibs incorrectly assigns VER_NDX_LOCAL to an undefined weaksymbol => isPreemptible is false => R_PLT_PC is optimized to R_PC => inisStaticLinkTimeConstant, an error is emitted.Reviewed By: pcc, grimarDifferential Revision: https://reviews.llvm.org/D72681lld/test/ELF/exclude-libs-undef.slld/ELF/Driver.cppCommit 3e32b7e12701de772b1cdf855b42253650a1e997 by aqjune[InstCombine] Let combineLoadToNewType preserve ABI alignment of theload (PR44543)Summary: If aligment on `LoadInst` isn't specified, load is assumed tobe ABI-aligned. And said aligment may be different for different types.So if we change load type, but don't pay extra attention to the aligment(i.e. keep it unspecified), we may either overpromise (if the defaultaligment of the new type is higher), or underpromise (if the defaultaligment of the new type is smaller).Thus, if no alignment is specified, we need to manually preserve theimplied ABI alignment.This addresses https://bugs.llvm.org/show_bug.cgi?id=44543 by makingcombineLoadToNewType preserve ABI alignment of the load.Reviewers: spatel, lebedev.riSubscribers: hiraditya, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72710llvm/test/Transforms/InstCombine/load-bitcast64.llllvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cppCommit eb23cc136b68b24e63dd765b87d1facecd622695 by diggerlin[AIX][XCOFF] Supporting the ReadOnlyWithRel SectionKndSUMMARY: In this patch we put the global variable in a Csect which'sSectionKind is \"ReadOnlyWithRel\" into Data Section.Reviewers: hubert.reinterpretcast,jasonliu,Xiangling_L Subscribers:wuzish, nemanjai, hiradityaDifferential Revision: https://reviews.llvm.org/D72461llvm/test/CodeGen/PowerPC/aix-readonly-with-relocation.llllvm/lib/CodeGen/TargetLoweringObjectFileImpl.cppllvm/lib/Target/PowerPC/PPCAsmPrinter.cppCommit f7e9f4f4c50245d10ca9869a9f8f3d431dfb6948 by warren_ristowSCC: Allow ReplaceNode to safely support insertionIf scc_iterator::ReplaceNode is inserting a new entry in the map, ratherthan replacing an existing entry, the possibility of growing the mapcould cause a failure.  This change safely implements the insertion.Reviewed By: probinsonDifferential Revision: https://reviews.llvm.org/D72469llvm/include/llvm/ADT/SCCIterator.hCommit 98c54fb1feba081c509f7e389877550df130a80d by craig.topper[X86] Directly emit a BROADCAST_LOAD from constant pool inlowerUINT_TO_FP_vXi32 to avoid double loads seen in D71971By directly emitting the constants as a constant pool load we seem toavoid the build_vector/extract_subvector combines that resulted in theduplicate loads we had before.Differential Revision: https://reviews.llvm.org/D72307llvm/test/CodeGen/X86/vec-strict-inttofp-256.llllvm/lib/Target/X86/X86ISelLowering.cppllvm/test/CodeGen/X86/vec_int_to_fp.llllvm/test/CodeGen/X86/vector-constrained-fp-intrinsics.llCommit 7dc4bbf8ab311606388faacca58b6c3e3e508b77 by tejohnson[ThinLTO] Handle variable with twice promoted name (Rust)Summary: Ensure that we can internalize values produced from two roundsof promotion.Note that this cannot happen currently via clang, but in other use casessuch as the Rust compiler which does a first round of ThinLTO on librarycode, producing bitcode, and a second round on the final binary.In particular this can happen if a function is exported and promoted,ending up with a \".llvm.${hash}\" suffix, and then goes through a roundof optimization creating an internal switch table expansion variablethat is internal and contains the promoted name of the enclosingfunction. This variable will be promoted in the second round of ThinLTOif @foo is imported again, and therefore ends up with two\".llvm.${hash}\" suffixes. Only the final one should be stripped whenconsulting the index to locate the summary.Reviewers: wmiSubscribers: mehdi_amini, inglorion, hiraditya, JDevlieghere, steven_wu,dexonsmith, arphaman, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72711llvm/include/llvm/IR/ModuleSummaryIndex.hllvm/test/ThinLTO/X86/Inputs/thinlto-internalize-doublepromoted.llllvm/test/ThinLTO/X86/thinlto-internalize-doublepromoted.llCommit bec1b55c64cf33d5f33c8cb7cc10d02e25811bef by maskray[ELF] Delete the RelExpr member R_HINT. NFCR_HINT is ignored like R_NONE. There are no strong reasons to keepR_HINT. The largest RelExpr member R_RISCV_PC_INDIRECT is 60 now.Differential Revision: https://reviews.llvm.org/D71822lld/ELF/Relocations.cpplld/ELF/Arch/ARM.cpplld/ELF/Relocations.hCommit 2cefb93951cca01dcdde6fe5c7354dc8bcd796d6 by tejohnson[ThinLTO/WPD] Remove an overly-aggressive assertSummary: An assert added to the index-based WPD was trying to verifythat we only have multiple vtables for a given guid when they are allnon-external linkage. This is too conservative because we may havemultiple external vtable with the same guid when they are in comdat.Remove the assert, as we don't have comdat information in the index, thelinker should issue an error in this case.See discussion on D71040 for more information.Reviewers: evgeny777, aganeaSubscribers: mehdi_amini, inglorion, hiraditya, steven_wu, dexonsmith,llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72648llvm/test/ThinLTO/X86/Inputs/devirt_external_comdat_same_guid.llllvm/test/ThinLTO/X86/devirt_external_comdat_same_guid.llllvm/lib/Transforms/IPO/WholeProgramDevirt.cppCommit cd800f3b226b25142f233beca846715fc601809b by lewis-revill[RISCV] Allow shrink wrapping for RISC-VEnabling shrink wrapping requires ensuring the insertion point of theepilogue is correct for MBBs without a terminator, in which case theinstruction to adjust the stack pointer is the last instruction in theblock.Differential Revision: https://reviews.llvm.org/D62190llvm/lib/Target/RISCV/RISCVFrameLowering.cppllvm/test/CodeGen/RISCV/shrinkwrap.llCommit 36fcbb838c8f293f46bfed78c6ed8c177f1e3485 by aaronAdded readability-qualified-auto checkAdds a check that detects any auto variables that are deduced to apointer or a const pointer then adds in the const and asteriskaccording. Will also check auto L value references that could be writtenas const. This relates to the coding standardhttps://llvm.org/docs/CodingStandards.html#beware-unnecessary-copies-with-autoclang-tools-extra/docs/clang-tidy/checks/list.rstclang-tools-extra/clang-tidy/readability/CMakeLists.txtclang-tools-extra/clang-tidy/readability/QualifiedAutoCheck.cppclang-tools-extra/test/clang-tidy/checkers/readability-qualified-auto-cxx20.cppclang-tools-extra/docs/clang-tidy/checks/llvm-qualified-auto.rstclang-tools-extra/clang-tidy/readability/ReadabilityTidyModule.cppclang-tools-extra/clang-tidy/llvm/LLVMTidyModule.cppclang-tools-extra/docs/clang-tidy/checks/readability-qualified-auto.rstclang-tools-extra/docs/ReleaseNotes.rstclang-tools-extra/test/clang-tidy/checkers/readability-qualified-auto.cppclang-tools-extra/clang-tidy/readability/QualifiedAutoCheck.hCommit 527f5a471eac75fd7d6ed48bd1e242ef8ea98dd0 by llvmgnsyncbot[gn build] Port 36fcbb838c8llvm/utils/gn/secondary/clang-tools-extra/clang-tidy/readability/BUILD.gnCommit ab72db7fc85266f094cc6b9452dd01f175c04cab by stilis[lldb/test] test_breakpoints_func_full fromTestNamespace.NamespaceBreakpointTestCase is now passing on WindowsAfter https://reviews.llvm.org/D70846, the test is now passing onWindowslldb/packages/Python/lldbsuite/test/lang/cpp/namespace/TestNamespace.pyCommit b777e551f044bbc7245a0b535e46000469479ff6 by jay.foad[MachineScheduler] Reduce reordering due to mem op clusteringSummary: Mem op clustering adds a weak edge in the DAG between two loadsor stores that should be clustered, but the direction of this edge ispretty arbitrary (it depends on the sort order of MemOpInfo, whichrepresents the operands of a load or store). This often means that twoloads or stores will get reordered even if they would naturally havebeen scheduled together anyway, which leads to test case churn and goesagainst the scheduler's \"do no harm\" philosophy.The fix makes sure that the direction of the edge always matches theoriginal code order of the instructions.Reviewers: atrick, MatzeB, arsenm, rampitec, t.p.northoverSubscribers: jvesely, wdng, nhaehnle, kristof.beyls, hiraditya,javed.absar, arphaman, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72706llvm/test/CodeGen/AMDGPU/insert_vector_elt.llllvm/test/CodeGen/AMDGPU/kernel-argument-dag-lowering.llllvm/test/CodeGen/AMDGPU/cvt_f32_ubyte.llllvm/test/CodeGen/AMDGPU/kernel-args.llllvm/test/CodeGen/AArch64/global-merge-group-by-use.llllvm/test/CodeGen/AMDGPU/ds_read2.llllvm/test/CodeGen/AArch64/expand-select.llllvm/test/CodeGen/AMDGPU/vgpr-descriptor-waterfall-loop-idom-update.llllvm/test/CodeGen/AMDGPU/insert-subvector-unused-scratch.llllvm/test/CodeGen/AMDGPU/chain-hi-to-lo.llllvm/test/CodeGen/AArch64/machine-scheduler.mirllvm/test/CodeGen/AMDGPU/bitcast-constant-to-vector.llllvm/test/CodeGen/AMDGPU/byval-frame-setup.llllvm/test/CodeGen/AMDGPU/call-argument-types.llllvm/lib/CodeGen/MachineScheduler.cppllvm/test/CodeGen/AArch64/aarch64-stp-cluster.llllvm/test/CodeGen/AArch64/arm64-memset-inline.llllvm/test/CodeGen/AMDGPU/promote-constOffset-to-imm.llllvm/test/CodeGen/AMDGPU/shift-i128.llllvm/test/CodeGen/AArch64/arm64-ldp-cluster.llllvm/test/CodeGen/AMDGPU/frame-index-elimination.llllvm/test/CodeGen/AMDGPU/max.i16.llCommit 57cb4685140284907d16673b555fd62307b4cd76 by spatel[InstCombine] add test for possible cast-of-select transform; NFCllvm/test/Transforms/InstCombine/trunc.llCommit 88b8cb7215d4333ab990c99f21c7f92262ef02ef by alexandre.ganeaFix NetBSD bot after b4a99a061f517e60985667e39519f60186cbb469([Clang][Driver] Re-use the calling process instead of creating a newprocess for the cc1 invocation)clang/test/Driver/cc1-spawnprocess.cCommit 2d287bec3c5b63b7df9946163ba02987858b1736 by jonathanchesterfield[nfc][libomptarget] Refactor amdgcn target_implSummary:[nfc][libomptarget] Refactor amdgcn target_implRemoves references to internal libraries from the header Standardises onC++ mangling for all the target_impl functions Update comment blockclang-format Move some functions into a new target_impl.hip source fileThis lays the groundwork for implementing the remaining unresolvedsymbols in the target_impl.hip source.Reviewers: jdoerfert, grokos, ABataev, ronliebReviewed By: jdoerfertSubscribers: jvesely, mgorny, jfb, openmp-commitsTags: #openmpDifferential Revision: https://reviews.llvm.org/D72712openmp/libomptarget/deviceRTLs/amdgcn/src/target_impl.hipopenmp/libomptarget/deviceRTLs/amdgcn/CMakeLists.txtopenmp/libomptarget/deviceRTLs/amdgcn/src/target_impl.hCommit 2a43688a0a074a70e395491fa0c3cdb4556ccea4 by jonathanchesterfield[nfc][libomptarget] Refactor nvptx/target_impl.cuSummary:[nfc][libomptarget] Refactor nxptx/target_impl.cuUse __kmpc_impl_atomic_add instead of atomicAdd to match the rest of thefile. Alternatively, target_impl.cu could use the cuda functionsdirectly. Using a mixture in this file was an oversight, happy toresolve in either direction.Removed some comments that look outdated.Call __kmpc_impl_unset_lock directly to avoid a redundant diagnostic andremove an implict dependency on interface.h.Reviewers: ABataev, grokos, jdoerfertReviewed By: jdoerfertSubscribers: jfb, openmp-commitsTags: #openmpDifferential Revision: https://reviews.llvm.org/D72719openmp/libomptarget/deviceRTLs/nvptx/src/target_impl.cuCommit fa632340938cc02e03262e1318cb06b34c32f5fe by nikita.ppv[InstCombine] Add test for iterator invalidation bug; NFCllvm/test/Transforms/InstCombine/bitcast-phi-uselistorder.llCommit 652cd7c1007aa5a13ad9864fadc939c5710c5199 by nikita.ppv[InstCombine] Fix user iterator invalidation in bitcast of phi transformThis fixes the issue encountered in D71164. Instead of using arange-based for, manually iterate over the users and advance theiterator beforehand, so we do not skip any users due to iteratorinvalidation.Differential Revision: https://reviews.llvm.org/D72657llvm/lib/Transforms/InstCombine/InstCombineCasts.cppllvm/test/Transforms/InstCombine/bitcast-phi-uselistorder.llCommit b4dd928ffbb8232d6909b640d3affcd531681ffb by nikita.ppv[InstCombine] Make combineLoadToNewType a method; NFCSo it can be reused as part of other combines. In particular for D71164.llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cppllvm/lib/Transforms/InstCombine/InstCombineInternal.hCommit 65c0805be523445d7ad0f12e90f53648e1ae9f84 by nikita.ppv[InstCombine] Fix infinite loop due to bitcast <-> phi transformsFix for https://bugs.llvm.org/show_bug.cgi?id=44245.The optimizeBitCastFromPhi() and FoldPHIArgOpIntoPHI() end up fightingagainst each other, because optimizeBitCastFromPhi() assumes thatbitcasts of loads will get folded. This doesn't happen here, because adangling phi node prevents the one-use fold inhttps://github.com/llvm/llvm-project/blob/master/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp#L620-L628from triggering.This patch fixes the issue by explicitly performing the load combine aspart of the bitcast of phi transform. Other attempts to force the loadto be combined first were ultimately too unreliable.Differential Revision: https://reviews.llvm.org/D71164llvm/lib/Transforms/InstCombine/InstCombineCasts.cppllvm/test/Transforms/InstCombine/pr44245.llCommit 48bad08aa3b3bf6ad5dabe858fa655a623757395 by a.bataev[OPENMP]Improve handling of possibly incorrectly mapped types.Need to analayze the type of the expression for mapping, not the type ofthe declaration.clang/lib/Sema/SemaOpenMP.cppclang/test/OpenMP/target_map_messages.cppCommit 410331869defbde0f6e5b7b3f8ee30c10b7f6be3 by nikita.ppv[NewPM] Port MergeFunctions passThis ports the MergeFunctions pass to the NewPM. This was ratherstraightforward, as no analyses are used.Additionally MergeFunctions needs to be conditionally enabled in thePassBuilder, but I left that part out of this patch.Differential Revision: https://reviews.llvm.org/D72537llvm/lib/Transforms/IPO/IPO.cppllvm/include/llvm/InitializePasses.hllvm/lib/Passes/PassBuilder.cppllvm/lib/Transforms/IPO/MergeFunctions.cppllvm/test/Transforms/MergeFunc/merge-block-address.llllvm/include/llvm/Transforms/IPO/MergeFunctions.hllvm/lib/Passes/PassRegistry.defCommit 2d4571bf3060f8f3d8417a0ec55e21a280158069 by protze[OpenMP][Tool] Runtime warning for missing TSan-optionTSan spuriously reports for any OpenMP application a race on theinitialization of a runtime internal mutex:``` Atomic read of size 1 at 0x7b6800005940 by thread T4: #0 pthread_mutex_lock <null> (a.out+0x43f39e) #1 __kmp_resume_64 <null> (libomp.so.5+0x84db4)Previous write of size 1 at 0x7b6800005940 by thread T7: #0 pthread_mutex_init <null> (a.out+0x424793) #1 __kmp_suspend_initialize_thread <null> (libomp.so.5+0x8422e)```According to @AndreyChurbanov this is a false positive report, as thecontrol flow of the runtime guarantees the ordering of the mutexinitialization and the lock:https://software.intel.com/en-us/forums/intel-open-source-openmp-runtime-library/topic/530363To suppress this report, I suggest the use ofTSAN_OPTIONS='ignore_uninstrumented_modules=1'. With this patch, aruntime warning is provided in case an OpenMP application is built withTsan and executed without this Tsan-option.Reviewed By: jdoerfertDifferential Revision: https://reviews.llvm.org/D70412openmp/tools/archer/ompt-tsan.cppopenmp/CREDITS.txtCommit 5d1b3ba687690bbb37f911f66a2c2c5f19d60032 by maskray[Driver] Ignore -fno-semantic-interpositionFedora wants to build projects with -fno-semantic-interposition (e.g.https://fedoraproject.org/wiki/Changes/PythonNoSemanticInterpositionSpeedup),which is supported by GCC>=5.Clang's current behavior is similar to -fno-semantic-interposition andthe end goal is to make it more so(https://lists.llvm.org/pipermail/llvm-dev/2016-November/107625.html).Ignore this option.We should let users know -fsemantic-interposition is not currentlysupported, so it should remain a hard error.Reviewed By: serge-sans-pailleDifferential Revision: https://reviews.llvm.org/D72724clang/test/Driver/clang_f_opts.cclang/include/clang/Driver/Options.tdCommit 26d96126a0d258afccfeec1fbaa727bfeb820308 by danilo.carvalho.grael[SVE] Add patterns for MUL immediate instruction.Summary: Add the missing MUL pattern for integer immediate instructions.Reviewers: sdesmalen, huntergr, efriedma, c-rhodes, kmclaughlinSubscribers: tschuett, hiraditya, rkruppe, psnobl, llvm-commits, amehsanTags: #llvmDifferential Revision: https://reviews.llvm.org/D72654llvm/test/CodeGen/AArch64/sve-neg-int-arith-imm-2.llllvm/lib/Target/AArch64/SVEInstrFormats.tdllvm/lib/Target/AArch64/AArch64SVEInstrInfo.tdllvm/test/CodeGen/AArch64/sve-int-arith-imm.llllvm/test/CodeGen/AArch64/sve-neg-int-arith-imm.llCommit 337e4359645ebd0f35136dbec9b51c48b9071f9c by martin[libcxx] [Windows] Make a more proper implementation of strftime_l formingw with msvcrt.dllThis also makes this function consistent with the rest of the libc++provided fallbacks.The locale support in msvcrt.dll is very limited anyway; it can only beconfigured processwide, not per thread, and it only seems to support thelocales \"C\" and \"\" (the user set locale), so it's hard to make anymeaningful automatic test for it. But manually tested, this change doesmake time formatting locale code in libc++ output times in the userrequested format, when using locale \"\".Differential Revision: https://reviews.llvm.org/D69554libcxx/include/support/win32/locale_win32.hlibcxx/src/support/win32/locale_win32.cppCommit b53d44b17a1685e405415cd32c4b6eb89cc4c3a1 by Adrian Prantldotest.py: Add option to pass extra lldb settings to dotestThe primary motivation for this is to add another dimension to the SwiftLLDB test matrix, but this seems generally useful.Differential Revision: https://reviews.llvm.org/D72662lldb/packages/Python/lldbsuite/test/dotest.pylldb/packages/Python/lldbsuite/test/configuration.pylldb/packages/Python/lldbsuite/test/dotest_args.pyCommit 5ee616a710bcb52cf9f1f7951644d098d38e7b6a by jranieri[analyzer] Fix SARIF column locationsDifferential revision: https://reviews.llvm.org/D70689clang/lib/StaticAnalyzer/Core/SarifDiagnostics.cppclang/test/Analysis/diagnostics/Inputs/expected-sarif/sarif-diagnostics-taint-test.c.sarifclang/test/Analysis/diagnostics/sarif-multi-diagnostic-test.cclang/test/Analysis/diagnostics/Inputs/expected-sarif/sarif-multi-diagnostic-test.c.sarifCommit 651128f557229e79598e22102edb7fad3bf288c0 by akhuang[DebugInfo] Add option to clang to limit debug info that is emitted forclasses.Summary: This patch adds an option to limit debug info by only emittingcomplete class type information when its constructor is emitted. Thisapplies to classes that have nontrivial user defined constructors.I implemented the option by adding another level to `DebugInfoKind`, anda flag `-flimit-debug-info-constructor`.Total object file size on Windows, compiling with RelWithDebInfo: before: 4,257,448 kb after:  2,104,963 kbAnd on Linux before: 9,225,140 kb after:  4,387,464 kbAccording to the Windows clang.pdb files, here is a list of types thatare no longer complete with this option enabled:https://reviews.llvm.org/P8182Reviewers: rnk, dblaikieSubscribers: aprantl, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72427clang/lib/CodeGen/CGDebugInfo.cppclang/test/CodeGenCXX/debug-info-limited-ctor.cppCommit 04e586151e7987089d760662126e247012431e90 by nikita.ppv[InstCombine] Fix worklist management when removing guard intrinsicWhen multiple guard intrinsics are merged into one, currently the resultof eraseInstFromFunction() is returned -- however, this should only bedone if the current instruction is being removed. In this case we'reremoving a different instruction and should instead report that thecurrent one has been modified by returning it.For this test case, this reduces the number of instcombine iterationsfrom 5 to 2 (the minimum possible).Differential Revision: https://reviews.llvm.org/D72558llvm/lib/Transforms/InstCombine/InstCombineCalls.cppllvm/test/Transforms/InstCombine/call-guard.llCommit 986202fad41529af8288aca54f2ff62d4c501d71 by Jan Korous[clang][test][NFC] Use more widely supported sanitizer for filedependency testsThe tests aren't concerned at all by the actual sanitizer - only byblacklist being reported as a dependency. We're unfortunately limited byplatform support for any particular sanitizer but we can at least useone that is widely supported.Post-commit review: https://reviews.llvm.org/D72729clang/test/Frontend/Inputs/resource_dir_with_cfi_blacklist/share/cfi_blacklist.txtclang/test/Frontend/dependency-gen.cclang/test/Frontend/Inputs/resource_dir_with_sanitizer_blacklist/share/ubsan_blacklist.txtCommit fe37d9ecaabda4f9948f35bb20c1a13687a7eaca by fedor.sergeev[GVN] fix comment/argument name to match actual implementation. NFCllvm/include/llvm/Transforms/Scalar/GVN.hCommit 9ee90ea55c1656b75e40f595dc351fbf667f5b79 by craig.topper[LegalizeTypes] Remove untested code from ExpandIntOp_UINT_TO_FPThis code is untested in tree because the\"APFloat::semanticsPrecision(sem) >= SrcVT.getSizeInBits() - 1\" check isfalse for most combinations for int and fp types except maybe i32 andf64. For that you would need i32 to be an illegal type, but f64 to belegal and have custom handling for legalizing the split sint_to_fp. Theprecision check itself was added in 2010 to fix a double rounding issuein the algorithm that would occur if the sint_to_fp was not able to dothe conversion without rounding.Differential Revision: https://reviews.llvm.org/D72728llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cppCommit 1ca51c06729d7f7326fcc2a826e07d1c92158dfd by maskray[Driver][test] Fix Driver/hexagon-toolchain-elf.c for-DCLANG_DEFAULT_LINKER=lld buildsReviewed By: nathanchance, sidneymDifferential Revision: https://reviews.llvm.org/D72668clang/test/Driver/hexagon-toolchain-elf.cCommit 6078f2fedcac5797ac39ee5ef3fd7a35ef1202d5 by Amara Emerson[AArch64][GlobalISel]: Support @llvm.{return,frame}address selection.These intrinsics expand to a variable number of instructions so justlike in ISelLowering.cpp we use custom code to deal with them.Committing Tim's original patch.Differential Revision: https://reviews.llvm.org/D65656llvm/test/CodeGen/AArch64/GlobalISel/select-frameaddr.llllvm/lib/Target/AArch64/AArch64InstructionSelector.cppllvm/test/CodeGen/AArch64/GlobalISel/select-returnaddr.llCommit a3490e3e3d38d502179329f76138d96c5b2bab88 by michael.hliaoRemove trailing `;`. NFC.clang/lib/Tooling/Syntax/Tree.cppCommit 1bd14ce39293df61888042916a7e43b9e502a4de by riverriddle[mlir] Use double format when parsing bfloat16 hexadecimal valuesSummary: bfloat16 doesn't have a valid APFloat format, so we have to usedouble semantics when storing it. This change makes sure thathexadecimal values can be round-tripped properly given this fact.Reviewed By: mehdi_aminiDifferential Revision: https://reviews.llvm.org/D72667mlir/test/IR/invalid.mlirmlir/lib/Parser/Parser.cppmlir/test/IR/parser.mlirCommit a48600c0a653d34f4af760f117755ed1776adf9d by a.bataev[OPENMP]Do not emit special virtual function for NVPTX target.There are no special virtual function handlers (like __cxa_pure_virtual)defined for NVPTX target, so just emit such functions as null pointersto prevent issues with linking and unresolved references.clang/lib/CodeGen/CGVTables.cppclang/test/OpenMP/nvptx_target_pure_deleted_codegen.cppCommit 8d07f8d98c48ee0a9dca450aaf4e1cabc621ff68 by michael.hliao[DAGCombine] Replace `getIntPtrConstant()` with `getVectorIdxTy()`.- Prefer `getVectorIdxTy()` as the index operand type for `EXTRACT_SUBVECTOR` as targets expect different types by overloading `getVectorIdxTy()`.llvm/test/CodeGen/AMDGPU/extract-subvector.llllvm/lib/CodeGen/SelectionDAG/DAGCombiner.cppCommit f52d71736b10e87b1aa1880b777dc9462a0085ce by ntv[mlir][Linalg] Update the semantics, verifier and test for Linalg withtensors.Summary: This diff fixes issues with the semantics of linalg.generic ontensors that appeared when converting directly from HLO tolinalg.generic. The changes are self-contained within MLIR and can becaptured and tested independently of XLA.The linalg.generic and indexed_generic are updated to:To allow progressive lowering from the value world (a.k.a tensor values)to the buffer world (a.k.a memref values), a linalg.generic op acceptsmixing input and output ranked tensor values with input and outputmemrefs.```%1 = linalg.generic #trait_attribute %A, %B {other-attributes} : tensor<?x?xf32>, memref<?x?xf32, stride_specification> -> (tensor<?x?xf32>)```In this case, the number of outputs (args_out) must match the sum of (1)the number of output buffer operands and (2) the number of tensor returnvalues. The semantics is that the linalg.indexed_generic op produces(i.e. allocates and fills) its return values.Tensor values must be legalized by a buffer allocation pass before mosttransformations can be applied. Such legalization moves tensor returnvalues into output buffer operands and updates the region argumentaccordingly.Transformations that create control-flow around linalg.indexed_genericoperations are not expected to mix with tensors because SSA values donot escape naturally. Still, transformations and rewrites that takeadvantage of tensor SSA values are expected to be useful and will beadded in the near future.Subscribers: bmahjour, mehdi_amini, rriddle, jpienaar, burmako,shauheen, antiagainst, arpith-jacob, mgester, lucyrfox, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72555mlir/lib/Dialect/Linalg/Transforms/Promotion.cppmlir/include/mlir/Dialect/Linalg/IR/LinalgStructuredOps.tdmlir/lib/Dialect/Linalg/Transforms/LinalgToLoops.cppmlir/test/Dialect/Linalg/roundtrip.mlirmlir/include/mlir/Dialect/Linalg/Utils/Utils.hmlir/lib/Dialect/Linalg/IR/LinalgOps.cppmlir/lib/Dialect/Linalg/Transforms/Fusion.cppmlir/lib/Dialect/Linalg/Transforms/LinalgTransforms.cppmlir/lib/Dialect/Linalg/Transforms/Tiling.cppmlir/include/mlir/Dialect/Linalg/IR/LinalgTraits.hmlir/lib/Dialect/Linalg/Analysis/DependenceAnalysis.cppmlir/test/Dialect/Linalg/invalid.mlirCommit 729530f68fe135ad41d470fbed019cc5e31ac8a5 by l.lunak-fmodules-codegen should not emit extern templatesIf a header contains 'extern template', then the template should beprovided somewhere by an explicit instantiation, so it is not necessaryto generate a copy. Worse, this can lead to an unresolved symbol,because the codegen's object file will not actually contain functionsfrom such a template because of the GVA_AvailableExternally, but theobject file for the explicit instantiation will not contain them eitherbecause it will be blocked by the information provided by the module.Differential Revision: https://reviews.llvm.org/D69779clang/test/Modules/codegen-extern-template.hclang/test/Modules/codegen-extern-template.cppclang/test/Modules/codegen-extern-template.modulemapclang/lib/Serialization/ASTWriterDecl.cppCommit b5b2cf7af47f1ca04635dae7b787c8a81d5af4c9 by l.lunakfix recent -fmodules-codegen fix testclang/test/Modules/codegen-extern-template.modulemapclang/test/Modules/Inputs/codegen-extern-template.modulemapclang/test/Modules/codegen-extern-template.cppCommit cbc9d22e49b434b6ceb2eb94b67079d02e0a7b74 by l.lunakmake -fmodules-codegen and -fmodules-debuginfo work also with PCHsAllow to build PCH's (with -building-pch-with-obj and the extra .o file)with -fmodules-codegen -fmodules-debuginfo to allow emitting shared codeinto the extra .o file, similarly to how it works with modules. A bit ofa misnomer, but the underlying functionality is the same. This saves upto 20% of build time here.Differential Revision: https://reviews.llvm.org/D69778clang/lib/Serialization/ASTReaderDecl.cppclang/lib/Serialization/ASTWriterDecl.cppclang/lib/Serialization/ASTReader.cppclang/test/PCH/codegen.cppclang/lib/Serialization/ASTWriter.cppclang/test/Modules/Inputs/codegen-flags/foo.hCommit 20c6e0749461147df19a3b126d1a48106c63c351 by riverriddle[mlir] Enable printing of FuncOp in the generic form.Summary: This was previously disabled as FunctionType TypeAttrs couldnot be roundtripped in the IR. This has been fixed, so we can nowgenerically print FuncOp.Depends On D72429Reviewed By: jpienaar, mehdi_aminiDifferential Revision: https://reviews.llvm.org/D72642mlir/lib/IR/AsmPrinter.cppmlir/test/IR/wrapping_op.mlirCommit 23058f9dd4d7e18239fd63b6da52549514b45fda by a.bataev[OPENMP]Do not use RTTI by default for NVPTX devices.NVPTX does not support RTTI, so disable it by default.clang/lib/Driver/ToolChain.cppclang/test/Driver/openmp-offload-gpu.cppCommit fa9dd8336bbd1167926f93fe2018d0c47839d5d6 by riverriddle[mlir] Refactor ModuleState into AsmState and expose it to users.Summary: This allows for users to cache printer state, which can becostly to recompute. Each of the IR print methods gain a new overloadtaking this new state class.Depends On D72293Reviewed By: jpienaarDifferential Revision: https://reviews.llvm.org/D72294mlir/lib/IR/AsmPrinter.cppmlir/include/mlir/IR/Block.hmlir/include/mlir/IR/AsmState.hmlir/include/mlir/IR/OpDefinition.hmlir/include/mlir/IR/Value.hmlir/include/mlir/IR/Module.hmlir/include/mlir/IR/Operation.hCommit 60d39479221d6bc09060f7816bcd7c54eb286603 by xur[remark][diagnostics] Using clang diagnostic handler for IR input filesFor IR input files, we currently use LLVM diagnostic handler even thecompilation is from clang. As a result, we are not able to use -Rpass toget the transformation reports. Some warnings are not handled properlyeither: We found many mysterious warnings in our ThinLTO backendcompilations in SamplePGO and CSPGO. An example of the warning:\"warning: net/proto2/public/metadata_lite.h:51:21: 0.02% (1 / 4999)\"This turns out to be a warning by Wmisexpect, which is supposed to befiltered out by default. But since the filter is in clang's diagnostichander, we emit these incomplete warnings from LLVM's diagnostichandler.This patch uses clang diagnostic handler for IR input files. We create afake backendconsumer just to install the diagnostic handler.With this change, we will have proper handling of all the warnings andwe can use -Rpass* options in IR input files compilation. Also note thatwith is patch, LLVM's diagnostic options, like\"-mllvm -pass-remarks=*\", are no longer be able to get optimizationremarks.Differential Revision: https://reviews.llvm.org/D72523clang/test/CodeGen/thinlto-clang-diagnostic-handler-in-be.cclang/test/CodeGen/Inputs/thinlto_expect1.proftextclang/test/CodeGen/Inputs/thinlto_expect2.proftextclang/test/CodeGen/thinlto-diagnostic-handler-remarks-with-hotness.llclang/lib/CodeGen/CodeGenAction.cppCommit 47c6ab2b97773ee5fb360fc093a5824be64b8c68 by antiagainst[mlir][spirv] Properly support SPIR-V conversion targetThis commit defines a new SPIR-V dialect attribute for specifying aSPIR-V target environment. It is a dictionary attribute containing theSPIR-V version, supported extension list, and allowed capability list. ASPIRVConversionTarget subclass is created to take in the targetenvironment and sets proper dynmaically legal ops by querying the opavailability interface of SPIR-V ops to make sure they are available inthe specified target environment. All existing conversions targetingSPIR-V is changed to use this SPIRVConversionTarget. It probes whetherthe input IR has a `spv.target_env` attribute, otherwise, it uses thedefault target environment: SPIR-V 1.0 with Shader capability and noextra extensions.Differential Revision: https://reviews.llvm.org/D72256mlir/test/Dialect/SPIRV/target-env.mlirmlir/include/mlir/Dialect/SPIRV/TargetAndABI.hmlir/include/mlir/Dialect/SPIRV/SPIRVLowering.hmlir/lib/Dialect/SPIRV/Transforms/LowerABIAttributesPass.cppmlir/lib/Dialect/SPIRV/SPIRVDialect.cppmlir/test/Dialect/SPIRV/TestAvailability.cppmlir/test/Dialect/SPIRV/target-and-abi.mlirmlir/lib/Dialect/SPIRV/TargetAndABI.cppmlir/docs/Dialects/SPIR-V.mdmlir/lib/Dialect/SPIRV/SPIRVLowering.cppmlir/lib/Conversion/GPUToSPIRV/ConvertGPUToSPIRVPass.cppmlir/lib/Conversion/StandardToSPIRV/ConvertStandardToSPIRVPass.cppmlir/include/mlir/Dialect/SPIRV/TargetAndABI.tdCommit 01a4b83154760ea286117ac4de9576b8a215cb8d by michael.hliao[codegen,amdgpu] Enhance MIR DIE and re-arrange it for AMDGPU.Summary:- `dead-mi-elimination` assumes MIR in the SSA form and cannot be arranged after phi elimination or DeSSA. It's enhanced to handle the dead register definition by skipping use check on it. Once a register def is `dead`, all its uses, if any, should be `undef`.- Re-arrange the DIE in RA phase for AMDGPU by placing it directly after `detect-dead-lanes`.- Many relevant tests are refined due to different register assignment.Reviewers: rampitec, qcolombet, sunfishSubscribers: arsenm, kzhuravl, jvesely, wdng, nhaehnle, yaxunl,dstuttard, tpr, t-tye, hiraditya, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72709llvm/test/CodeGen/AMDGPU/spill-vgpr-to-agpr.llllvm/test/CodeGen/AMDGPU/dead-mi-use-same-intr.mirllvm/test/CodeGen/AMDGPU/dead-machine-elim-after-dead-lane.llllvm/test/CodeGen/AMDGPU/idot8u.llllvm/test/CodeGen/AMDGPU/bswap.llllvm/test/CodeGen/AMDGPU/llvm.amdgcn.ds.ordered.swap.llllvm/test/CodeGen/AMDGPU/loop_break.llllvm/test/CodeGen/AMDGPU/select.f16.llllvm/lib/CodeGen/DeadMachineInstructionElim.cppllvm/test/CodeGen/AMDGPU/atomic_optimizations_local_pointer.llllvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cppllvm/test/CodeGen/AMDGPU/llvm.round.f64.llllvm/test/CodeGen/AMDGPU/copy-illegal-type.llllvm/test/CodeGen/AMDGPU/insert_vector_elt.llCommit e244145ab08ae79ea3d22c2fe479ec084dbd7742 by georgios.rokos[LIBOMPTARGET] Do not increment/decrement the refcount for \"declaretarget\" objectsThe reference counter for global objects marked with declare target isINF. This patch prevents the runtime from incrementing /decrementing INFrefcounts. Without it, the map(delete: global_object) directive actuallydeallocates the global on the device. With this patch, such a directivebecomes a no-op.Differential Revision: https://reviews.llvm.org/D72525openmp/libomptarget/src/omptarget.cppopenmp/libomptarget/src/device.hopenmp/libomptarget/src/device.cppopenmp/libomptarget/test/mapping/delete_inf_refcount.cCommit c9ee5e996e3c89a751a35e8b771870e0ec24f3c0 by xurFix windows bot failures in c410adb092c9cb51ddb0b55862b70f2aa8c5b16f(clang diagnostic handler for IR input files)clang/test/CodeGen/thinlto-clang-diagnostic-handler-in-be.cCommit ab9aefee9fa09957d1a3e76fcc47abda0d002255 by phosek[libcxx] Use C11 thread API on FuchsiaOn Fuchsia, pthread API is emulated on top of C11 thread API. Using C11thread API directly is more efficient.While this implementation is only used by Fuchsia at the moment, it'snot Fuchsia specific, and could be used by other platforms that use C11threads rather than pthreads in the future.Differential Revision: https://reviews.llvm.org/D64378libcxx/include/__threading_supportlibcxx/include/__configCommit ab035647061272b7efa39364c42e48972cebc0ab by ataei[mlir] : Fix ViewOp shape folder for identity affine mapsSummary: Fix the ViewOpShapeFolder in case of no affine mappingassociated with a Memref construct identity mapping.Reviewers: nicolasvasilacheSubscribers: mehdi_amini, rriddle, jpienaar, burmako, shauheen,antiagainst, arpith-jacob, mgester, lucyrfox, liufengdb, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D72735mlir/test/Transforms/canonicalize.mlirmlir/lib/Dialect/StandardOps/Ops.cppCommit 57eb56b83926675dd8a554fc8a8e28ee57278f90 by craig.topper[X86] Swap the 0 and the fudge factor in the constant pool for the32-bit mode i64->f32/f64/f80 uint_to_fp algorithm.This allows us to generate better code for selecting the fixup to load.Previously when the sign was set we had to load offset 0. And when itwas clear we had to load offset 4. This required a testl, setns, zeroextend, and finally a mul by 4. By switching the offsets we can justshift the sign bit into the lsb and multiply it by 4.llvm/test/CodeGen/X86/fp-cvt.llllvm/test/CodeGen/X86/half.llllvm/test/CodeGen/X86/fp-intrinsics.llllvm/test/CodeGen/X86/pr15309.llllvm/test/CodeGen/X86/fp80-strict-scalar.llllvm/test/CodeGen/X86/vec-strict-inttofp-128.llllvm/test/CodeGen/X86/fp-strict-scalar-inttofp.llllvm/test/CodeGen/X86/scalar-int-to-fp.llllvm/lib/Target/X86/X86ISelLowering.cppllvm/test/CodeGen/X86/avx512-intrinsics-fast-isel.llllvm/test/CodeGen/X86/pr44396.llllvm/test/CodeGen/X86/uint64-to-float.llllvm/test/CodeGen/X86/vec-strict-inttofp-512.llllvm/test/CodeGen/X86/fildll.llllvm/test/CodeGen/X86/vec-strict-inttofp-256.llCommit 76291e1158c2aedddfe0be0ea69452ea6dc2db24 by craig.topper[X86] Drop an unneeded FIXME. NFCThe extload on X87 is free.llvm/lib/Target/X86/X86ISelLowering.cppCommit 65c8abb14e77b28d8357c52dddb8e0a6b12b4ba2 by michael.hliao[amdgpu] Fix typos in a test case.- There are typos introduced due to merge.llvm/test/CodeGen/AMDGPU/insert_vector_elt.llCommit 40cd26c7008183e01d8276396339aea2a99d83d7 by rnk[Win64] Handle FP arguments more gracefully under -mno-ssePass small FP values in GPRs or stack memory according the the normalconvention. This is what gcc -mno-sse does on Win64.I adjusted the conditions under which we emit an error to check if theargument or return value would be passed in an XMM register when SSE isdisabled. This has a side effect of no longer emitting an error for FParguments marked 'inreg' when targetting x86 with SSE disabled. Ourcalling convention logic was already assigning it to FP0/FP1, and thenwe emitted this error. That seems unnecessary, we can ignore 'inreg' andcompile it without SSE.Reviewers: jyknight, aemersonDifferential Revision: https://reviews.llvm.org/D70465llvm/test/CodeGen/X86/no-sse-x86.llllvm/lib/Target/X86/X86CallingConv.tdllvm/test/CodeGen/X86/nosse-error2.llllvm/test/CodeGen/X86/no-sse-win64.llllvm/lib/Target/X86/X86ISelLowering.cppCommit 0f9cf42facaf9eff47dc0b9eb7e6ed8803d3bc3b by rnkAllow /D flags absent during PCH creation under msvc-compatSummary: Before this patch adding a new /D flag when compiling a sourcefile that consumed a PCH with clang-cl would issue a diagnostic and thenfail.  With the patch, the diagnostic is still issued but the definitionis accepted.  This matches the msvc behavior.  The fuzzy-pch-msvc.c is aclone of the existing fuzzy-pch.c tests with some msvc specific rework.msvc diagnostic: warning C4605: '/DBAR=int' specified on current command line, but wasnot specified when precompiled header was builtOutput of the CHECK-BAR test prior to the code change: <built-in>(1,9): warning: definition of macro 'BAR' does not matchdefinition in precompiled header [-Wclang-cl-pch] #define BAR int         ^ D:\\repos\\llvm\\llvm-project\\clang\\test\\PCH\\fuzzy-pch-msvc.c(12,1):error: unknown type name 'BAR' BAR bar = 17; ^ D:\\repos\\llvm\\llvm-project\\clang\\test\\PCH\\fuzzy-pch-msvc.c(23,4):error: BAR was not defined #  error BAR was not defined    ^ 1 warning and 2 errors generated.Reviewers: rnk, thakis, hans, zturnerSubscribers: mikerice, aganea, cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72405clang/test/PCH/ms-pch-macro.cclang/lib/Lex/PPDirectives.cppCommit 8e780252a7284be45cf1ba224cabd884847e8e92 by rnk[X86] ABI compat bugfix for MSVC vectorcallSummary: Before this change, X86_32ABIInfo::classifyArgument would becalled twice on vector arguments to vectorcall functions. This functionhas side effects to track GPR register usage, and this would lead toincorrect GPR usage in some cases.  The specific case I noticed is fromrunning out of XMM registers with mixed FP and vector arguments and noaggregates of any kind. Consider this prototype:  void __vectorcall vectorcall_indirect_vec(     double xmm0, double xmm1, double xmm2, double xmm3, double xmm4,     __m128 xmm5,     __m128 ecx,     int edx,     __m128 mem);classifyArgument has no effects when called on a plain FP type, but whencalled on a vector type, it modifies FreeRegs to model GPR consumption.However, this should not happen during the vector call first pass.I refactored the code to unify vectorcall HVA logic with regcall HVAlogic. The conventions pass HVAs in registers differently (expanded vs.not expanded), but if they do not fit in registers, they both pass themindirectly by address.Reviewers: erichkeane, craig.topperSubscribers: cfe-commitsTags: #clangDifferential Revision: https://reviews.llvm.org/D72110clang/lib/CodeGen/TargetInfo.cppclang/include/clang/CodeGen/CGFunctionInfo.hclang/test/CodeGen/vectorcall.cCommit ff1e0fce817e01f0288fad6a2607dd173180aabd by saar[Concepts] Type ConstraintsAdd support for type-constraints in template type parameters. Also addsupport for template type parameters as pack expansions (where the typeconstraint can now contain an unexpanded parameter pack).Differential Revision: https://reviews.llvm.org/D44352clang/lib/Serialization/ASTWriterDecl.cppclang/include/clang/Sema/ParsedTemplate.hclang/test/Parser/cxx2a-constrained-template-param.cppclang/test/CXX/temp/temp.arg/temp.arg.template/p3-2a.cppclang/lib/AST/ASTContext.cppclang/lib/Serialization/ASTReaderDecl.cppclang/include/clang/Sema/Sema.hclang/tools/libclang/CIndex.cppclang/include/clang/AST/ASTContext.hclang/include/clang/AST/ASTNodeTraverser.hclang/lib/AST/DeclPrinter.cppclang/lib/Sema/SemaTemplate.cppclang/include/clang/AST/DeclTemplate.hclang/include/clang/Parse/Parser.hclang/include/clang/AST/ASTConcept.hclang/lib/Sema/SemaCodeComplete.cppclang/test/SemaTemplate/ms-delayed-default-template-args.cppclang/include/clang/AST/RecursiveASTVisitor.hclang/lib/AST/ODRHash.cppclang/lib/Sema/TreeTransform.hclang/lib/Sema/SemaType.cppclang/lib/AST/TextNodeDumper.cppclang/test/CXX/temp/temp.constr/temp.constr.decl/class-template-decl.cppclang/include/clang/Basic/TokenKinds.defclang/lib/Parse/ParseExprCXX.cppclang/test/CXX/temp/temp.param/p10-2a.cppclang/lib/Parse/ParseDecl.cppclang/include/clang/Basic/DiagnosticSemaKinds.tdclang/lib/Serialization/ASTWriterStmt.cppclang/test/SemaTemplate/instantiate-expanded-type-constraint.cppclang/lib/AST/ASTImporter.cppclang/test/CXX/temp/temp.constr/temp.constr.decl/p3.cppclang/test/Parser/cxx2a-constrained-template-param-with-partial-id.cppclang/lib/Sema/SemaTemplateInstantiateDecl.cppclang/lib/Sema/SemaTemplateDeduction.cppclang/lib/AST/DeclTemplate.cppclang/include/clang/AST/ExprCXX.hclang/lib/Parse/ParseTemplate.cppclang/lib/Serialization/ASTReaderStmt.cppclang/lib/AST/ExprCXX.cppCommit 1a7398eca2040d232149f18a75b5d78a6521941c by listmail[BranchAlign] Add master --x86-branches-within-32B-boundaries flagThis flag was originally part of D70157, but was removed as we carvedaway pieces of the review. Since we have the nop support checked in, andit appears mature(*), I think it's time to add the master flag. For now,it will default to nop padding, but once the prefix padding supportlands, we'll update the defaults.(*) I can now confirm that downstream testing of the changes which havelanded to date - nop padding and compiler support for suppressions - ispassing all of the functional testing we've thrown at it. There mightstill be something lurking, but we've gotten enough coverage to beconfident of the basic approach.Note that the new flag can be used either when assembling an .s file, orwhen using the integrated assembler directly from the compiler. Thelater will use all of the suppression mechanism and should alwaysgenerate correct code. We don't yet have assembly syntax for thesuppressions, so passing this directly to the assembler w/a raw .s filemay result in broken code. Use at your own risk.Also note that this isn't the wiring for the clang option. I think themost recent review for that is D72227, but I've lost track, so thatmight be off.Differential Revision: https://reviews.llvm.org/D72738llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cppllvm/test/MC/X86/align-branch-64-1a.sCommit aca3e70d2bc0dd89b7d486c2a8eac70d8a89e790 by hstongDWARFDebugLine.cpp: Restore LF line endingsrG7e02406f6cf180a8c89ce64665660e7cc9dbc23e switched the file to CRLFline endings.llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cppCommit c6e69880ae4d9ce4d27bf046292a0a20c3ab3540 by douglas.yungModify test to use -S instead of -c so that it works when an externalassembler is used that is not present.clang/test/Driver/cc1-spawnprocess.cCommit 1b5404aff37953ce4c10191d04872ed7c2dc6548 by richardPR44540: Prefer an inherited default constructor over an initializerlist constructor when initializing from {}.We would previously pick between calling an initializer list constructorand calling a default constructor unstably in this situation, dependingon whether the inherited default constructor had already been usedelsewhere in the program.clang/lib/AST/DeclCXX.cppclang/test/CXX/dcl.decl/dcl.init/dcl.init.list/p3.cppclang/lib/Sema/SemaInit.cppCommit 0dbcb3639451a7c20e2d5133b459552281e64455 by tstellarCMake: Make most target symbols hidden by defaultSummary: For builds with LLVM_BUILD_LLVM_DYLIB=ON andBUILD_SHARED_LIBS=OFF this change makes all symbols in the targetspecific libraries hidden by default.A new macro called LLVM_EXTERNAL_VISIBILITY has been added to marksymbols in these libraries public, which is mainly needed for thedefinitions of the LLVMInitialize* functions.This patch reduces the number of public symbols in libLLVM.so by about25%.  This should improve load times for the dynamic library and alsomake abi checker tools, like abidiff require less memory when analyzinglibLLVM.soOne side-effect of this change is that for builds withLLVM_BUILD_LLVM_DYLIB=ON and LLVM_LINK_LLVM_DYLIB=ON some unittests thataccess symbols that are no longer public will need to be staticallylinked.Before and after public symbol counts (using gcc 8.2.1, ld.bfd 2.31.1):nm before/libLLVM-9svn.so | grep ' [A-Zuvw] ' | wc -l 36221 nmafter/libLLVM-9svn.so | grep ' [A-Zuvw] ' | wc -l 26278Reviewers: chandlerc, beanz, mgorny, rnk, hansReviewed By: rnk, hansSubscribers: merge_guards_bot, luismarques, smeenai, ldionne, lenary,s.egerton, pzheng, sameer.abuasal, MaskRay, wuzish, echristo, Jim,hiraditya, michaelplatings, chapuni, jholewinski, arsenm, dschuff,jyknight, dylanmckay, sdardis, nemanjai, jvesely, javed.absar, sbc100,jgravelle-google, aheejin, kbarton, fedor.sergeev, asb, rbar, johnrusso,simoncook, apazos, sabuasal, niosHD, jrtc27, zzheng, edward-jones,mgrang, atanasyan, rogfer01, MartinMosbeck, brucehoult, the_o, PkmX,jocewei, kristina, jsji, llvm-commitsTags: #llvmDifferential Revision: https://reviews.llvm.org/D54439llvm/utils/unittest/CMakeLists.txtllvm/lib/Target/ARC/TargetInfo/ARCTargetInfo.cppllvm/lib/Target/AVR/MCTargetDesc/AVRMCTargetDesc.cppllvm/lib/Target/ARC/ARCAsmPrinter.cppllvm/unittests/CMakeLists.txtllvm/lib/Target/Hexagon/Disassembler/HexagonDisassembler.cppllvm/lib/Target/MSP430/MSP430AsmPrinter.cppllvm/lib/Target/X86/X86AsmPrinter.cppllvm/lib/Target/Lanai/AsmParser/LanaiAsmParser.cppllvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cppllvm/lib/Target/NVPTX/NVPTXAsmPrinter.cppllvm/lib/Target/PowerPC/Disassembler/PPCDisassembler.cppllvm/lib/Target/AArch64/AArch64TargetMachine.cppllvm/unittests/Target/ARM/CMakeLists.txtllvm/lib/Target/Hexagon/TargetInfo/HexagonTargetInfo.cppllvm/lib/Target/X86/X86TargetMachine.cppllvm/lib/Target/ARC/Disassembler/ARCDisassembler.cppllvm/lib/Target/Lanai/LanaiTargetMachine.cppllvm/lib/Target/AVR/AsmParser/AVRAsmParser.cppllvm/lib/Target/ARM/Disassembler/ARMDisassembler.cppllvm/include/llvm/Support/Compiler.hllvm/lib/Target/Sparc/AsmParser/SparcAsmParser.cppllvm/lib/Target/Hexagon/HexagonTargetMachine.cppllvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.cppllvm/lib/Target/MSP430/TargetInfo/MSP430TargetInfo.cppllvm/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cppllvm/lib/Target/BPF/BPFTargetMachine.cppllvm/lib/Target/XCore/XCoreAsmPrinter.cppllvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cppllvm/lib/Target/SystemZ/SystemZTargetMachine.cppllvm/lib/Target/WebAssembly/Disassembler/WebAssemblyDisassembler.cppllvm/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cppllvm/lib/Target/AArch64/AArch64AsmPrinter.cppllvm/lib/Target/RISCV/TargetInfo/RISCVTargetInfo.cppllvm/lib/Target/ARM/ARMTargetMachine.cppllvm/lib/Target/BPF/BPFAsmPrinter.cppllvm/lib/Target/CMakeLists.txtllvm/lib/Target/X86/AsmParser/X86AsmParser.cppllvm/lib/Target/XCore/XCoreTargetMachine.cppllvm/lib/Target/Hexagon/AsmParser/HexagonAsmParser.cppllvm/lib/Target/ARC/ARCTargetMachine.cppllvm/lib/Target/AArch64/MCTargetDesc/AArch64MCTargetDesc.cppllvm/lib/Target/RISCV/RISCVAsmPrinter.cppllvm/lib/Target/NVPTX/MCTargetDesc/NVPTXMCTargetDesc.cppllvm/lib/Target/WebAssembly/WebAssemblyAsmPrinter.cppllvm/lib/Target/XCore/TargetInfo/XCoreTargetInfo.cppllvm/lib/Target/Sparc/Disassembler/SparcDisassembler.cppllvm/lib/Target/BPF/Disassembler/BPFDisassembler.cppllvm/lib/Target/PowerPC/PPCAsmPrinter.cppllvm/lib/Target/MSP430/MCTargetDesc/MSP430MCTargetDesc.cppllvm/lib/Target/X86/Disassembler/X86Disassembler.cppllvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cppllvm/lib/Target/PowerPC/TargetInfo/PowerPCTargetInfo.cppllvm/lib/Target/XCore/MCTargetDesc/XCoreMCTargetDesc.cppllvm/lib/Target/Lanai/Disassembler/LanaiDisassembler.cppllvm/lib/Target/Lanai/MCTargetDesc/LanaiMCTargetDesc.cppllvm/lib/Target/SystemZ/TargetInfo/SystemZTargetInfo.cppllvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCTargetDesc.cppllvm/lib/Target/SystemZ/AsmParser/SystemZAsmParser.cppllvm/lib/Target/ARM/MCTargetDesc/ARMMCTargetDesc.cppllvm/unittests/tools/llvm-exegesis/X86/CMakeLists.txtllvm/lib/Target/Mips/TargetInfo/MipsTargetInfo.cppllvm/lib/Target/AVR/TargetInfo/AVRTargetInfo.cppllvm/lib/Target/Mips/Disassembler/MipsDisassembler.cppllvm/lib/Target/AVR/Disassembler/AVRDisassembler.cppllvm/lib/Target/BPF/TargetInfo/BPFTargetInfo.cppllvm/lib/Target/Sparc/SparcTargetMachine.cppllvm/lib/Target/RISCV/RISCVTargetMachine.cppllvm/lib/Target/SystemZ/Disassembler/SystemZDisassembler.cppllvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cppllvm/lib/Target/NVPTX/NVPTXTargetMachine.cppllvm/lib/Target/AMDGPU/TargetInfo/AMDGPUTargetInfo.cppllvm/lib/Target/ARC/MCTargetDesc/ARCMCTargetDesc.cppllvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp"
