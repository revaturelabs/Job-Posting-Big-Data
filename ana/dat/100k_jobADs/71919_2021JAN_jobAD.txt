"RezScore - HomeServicesScore ResumeHuman ReviewResume RewriteJobsJob ReferralBounty ProgramInterview PrepCommunityBlogSuccess CastDeveloperAPITechnical Interview PrepAccountLoginRegisterLocationNew York, NYSan Francisco, CAWashington, DCAtlanta, GAChicago, ILHouston, TXDallas, TXLos Angeles, CAPittsburgh, PASeattle, WAPhiladelphia, PABoston, MADenver, COCharleston, SCMiami, FLMinneapolis, MNPhoenix, AZCharlotte, NCSt. Louis, MOSan Antonio, TXNashville, TNIndianapolis, INCleveland, OHAustin, TXDetroit, MIJacksonville, FLOklahoma City, OKKansas City, MOMemphis, TNColumbus, OHRaleigh, NCEl Paso, TXSalt Lake City, UTOrlando, FLManila, PhilippinesSydney, AustraliaMelbourne, AustraliaKrakow, PolandToronto, CanadaLondon, UKBangalore, IndiaPasig City, PhilippinesSan Jose, CALas Vegas, NVMontreal, CanadaSingapore, SingaporeKeywords#engineer#management#project#data#business#sales#market#recruiter#linux#product#software#javascript#customer#technology#system#php#medical#java#development#pythonPost a New JobAbout RezScore JobsSlack CommunityFeature RequestsApplicationsAvailable Rockets: 0xYou have used all your rockets for the day, please come back tomorrow. Learn More. Register to try it outLive Feed@rez13122195 is now status \"processing\" at Facebook for Head of Creative, Facebook App (Creative X)@rez13122195 is now status \"processing\" at Viacom CBS for SVP, Promotions, Partnerships & Events@rez13122195 is now status \"processing\" at Lyft for Vice President, Creative@rez13122195 is now status \"processing\" at Splunk for Senior Engagement Manager@rez13122195 is now status \"processing\" at Amazon for Sr. Manager, Digital Marketing, Prime Video International\"+ (0 + value.upvotes) + \"▼\\n\\n\"+ value.title+\"\\n\"+value.company+\"\\n\"+value.snippet+\"\\n\\n\"+value.formatted_location+\"\\n\\n\\n\"; // display = $(\"\").html(content); // $(\"#spinny\").hide(); // box.append(display);}); // list_is_updated(); }}); }; /* * @desc new_jobs Save new jobs to database. * @param data * @return */ new_jobs = function(data) { console.log(\"New Jobs\"); var to_send = {}; to_send.data = data; to_send.selection = my_selection; console.log(my_selection); console.log(data); console.log('/new_jobs/'); post_for_more_jobs(to_send,\"/new_jobs/\") } /* * @desc Load a json feed of jobs from an external URL, called from new_jobs and more_jobs functions * @param to_send payload of data, url to load -- calls get_more * @return no return, but modifies #jobitems */ post_for_more_jobs = function(to_send,url){ $.ajax({ url: url, data: JSON.stringify(to_send), type: \"POST\", contentType: \"application/json; charset=utf-8\", dataType: \"html\", cache: false, async: true, error: function (jqXHR, error, errorThrown) { console.log(\"Error\") console.log(error) }, success: function (data, textStatus, jqXHR) { a_flash_message({status:'success',msg: message_text['success'][ Math.floor(Math.random() * message_text['success'].length)] }) console.log(\"Successmanship\"); if($(\"#jobitems li.jobs\").length>0) $(\"#jobitems li.jobs\").last().after(data); else { $(\"#jobitems\").html(data); } list_is_updated(); is_impression(the_list,\"initial\"); toggle_loading_display(\"off\"); }}) } test_visible = function(listing_visible){ var limit_down = window.innerHeight+window.scrollY; var limit_up = window.scrollY; var the_fn = is_visible_nf(limit_up,limit_down,listing_visible) $(\"div.job_posting\").each(the_fn); } is_visible_nf = function(limit_up,limit_down,listing_visible){ return function(i,elt){ var $el = $(elt) var id_job = $el.data(\"job\") var test = (($el.offset().top + $el.outerHeight(true)/2) < limit_down); test = test && ($el.offset().top > limit_up ); //console.log(i+\"====>\"+test); //listing_visible.push([i,test]) var date = new Date(); add_impression_status(listing_visible,id_job,i,test,date) } } add_impression_status = function(listing_visible,id,position,status,date){ var this_time = date.getTime(); if(id in listing_visible.jobs){ var current = listing_visible.jobs[id] if (current.status == status){ current.end_time = this_time; } else{ if(current.status==true) listing_visible.cumulative.push([id,position,current.start_time,this_time]); current.status = status; current.start_time = this_time; } } else{ listing_visible.jobs[id] = {}; var current = listing_visible.jobs[id] current.status = status; current.position = position; current.start_time = this_time; current.end_time = this_time; } } is_impression = function(listing,origin){ var to_sent = data_for_impression(); to_sent.data = {}; to_sent.data.cumulative = []; to_sent.data.jobs = listing.jobs; while (the_list.cumulative.length) { to_sent.data.cumulative.push(the_list.cumulative.pop()); } var submit_size = to_sent.data.cumulative.length; $.each(the_list.jobs,function(i,e){submit_size += e.status ? 1 : 0;}) if(submit_size>0){ to_sent.origin = origin $.ajax({ url: \"/impression/\", data: JSON.stringify(to_sent), type: \"POST\", contentType: \"application/json; charset=utf-8\", dataType: \"html\", cache: false, async: true, error: function (jqXHR, error, errorThrown) { console.log(\"Error puttin it back\") console.log(error); while (to_sent.data.cumulative.length) { the_list.cumulative.push(to_sent.data.cumulative.pop()); } }, success: function (data, textStatus, jqXHR) { console.log(\"Success\") console.log(data) }}); empty_send = 0; if(delay_between_impressions>15000){ delay_between_impressions = 15000; clearInterval(my_impressions_updater); my_impressions_updater = setInterval(function(){is_impression(the_list,\"updater_\"+delay_between_impressions)}, delay_between_impressions); } } else{ empty_send += 1; if(empty_send>10){ empty_send =0; delay_between_impressions = delay_between_impressions * 2; clearInterval(my_impressions_updater); my_impressions_updater = setInterval(function(){is_impression(the_list,\"updater_\"+delay_between_impressions)}, delay_between_impressions); } } }; list_is_updated = function(){ //$(\"a\").click(function(){ // is_impression(the_list); //}) hide_all(the_list); test_visible(the_list); job_id = undefined //We do not want it to stick around after the first update. my_selection.job_id = job_id; //$('[data-toggle=\"tooltip\"]').tooltip(); $(\"a.post\").unbind(\"click\"); $('.paste_link').unbind(\"click\"); $(\"a.post\").click(link_post); $('.paste_link').click(getPermaLink); $(\".more_jobs\").click(more_jobs) update_history(my_selection); console.log(my_selection) } hide_all = function(the_list){ var date = new Date(); var this_time = date.getTime(); $.each(the_list.jobs,function(i,elt){ var current = the_list.jobs[i]; if(current.status==true) the_list.cumulative.push([i,current.position,current.start_time,this_time]); current.status = false; }) } $.expr[\":\"].contains = $.expr.createPseudo(function(arg) { return function( elem ) { return $(elem).text().toUpperCase().indexOf(arg.toUpperCase()) >= 0; }; }); var link_post = function(e) { e.stopPropagation(); e.preventDefault(); var href = this.href; var parts = href.split('?'); var url = parts[0]; console.log(url) var $elt = $(this) if($elt.hasClass(\"rocket\")) { $(this).replaceWith(\" \"); //dhide(); } if($elt.hasClass(\"to_hide\")) $(this).closest(\"li\").hide(); $.ajax({ url: url, type: \"POST\", contentType: \"application/json; charset=utf-8\", dataType: \"json\", cache: false, async: true, error: function (jqXHR, error, errorThrown) { console.log(\"Error puttin it back\") console.log(error); }, success: function (data, textStatus, jqXHR) { update_rockets(data); if(data.message) { a_flash_message(data); } else if(data.msg) { a_flash_message(data); } }}); } var update_rockets = function(data) { num = data.available_rockets if(data.status == \"success\") { $(\"#rocketspin\").replaceWith(\"Applied ✅\"); } else { $(\"#rocketspin\").replaceWith(\"Error\"); } if(num > 0) { $('.available_rockets').text(num + \"x\"); } else if(num == 0) { $('.available_rockets').text(num + \"x\"); $('.rocketgrey').css('color', 'grey'); $('.rocketdisable').replaceWith(\"Out of Rockets\"); $('#rocketinfo').replaceWith(\"You have used all your rockets for the day, please come back tomorrow.\"); } } var flashMessage = function(data){ html = ''; console.log(data); html += ''; html += '×'; html += data['msg'] + ''; return html; }; var deleteMe = function(elt){ return function() {$(elt).remove();} } var a_flash_message = function (data){ //Data = {status: info, success warning, danger // msg: txt } var $elt = $(flashMessage(data)) $('#flash').append($elt); setTimeout(deleteMe($elt), delay_to_delete_alert); } function getPermaLink(e){ e.preventDefault() var copyText = $(this).attr('href'); getToken(copyText,copyTextToClipboard) } function getToken(reference,callback){ var the_url = \"/get_token\"+reference; //If I do not get the token in 1.2 sec, I take a shortcut. //If the token arrives a little after, you still get the token (racing conditions..) var shortcut = setTimeout(function(){callback(document.location.origin+reference)}, 1200); $.ajax({ url: the_url, type: \"POST\", cache: false, async: true, error: function (jqXHR, error, errorThrown) { console.log(\"Error\") console.log(error) }, success: function (data, textStatus, jqXHR) { console.log(data); clearTimeout(shortcut); callback(document.location.origin+\"/token/\"+data[\"token\"]); } }) } function copyTextToClipboard(copyText) { //var copyText = $(this).attr('href'); var textArea = document.createElement(\"textarea\"); // Place in top-left corner of screen regardless of scroll position. textArea.style.position = 'fixed'; textArea.style.top = 0; textArea.style.left = 0; // Ensure it has a small width and height. Setting to 1px / 1em // doesn't work as this gives a negative w/h on some browsers. textArea.style.width = '2em'; textArea.style.height = '2em'; // We don't need padding, reducing the size if it does flash render. textArea.style.padding = 0; // Clean up any borders. textArea.style.border = 'none'; textArea.style.outline = 'none'; textArea.style.boxShadow = 'none'; // Avoid flash of white box if rendered for any reason. textArea.style.background = 'transparent'; textArea.value = copyText; document.body.appendChild(textArea); textArea.focus(); textArea.select(); try { var successful = document.execCommand('copy'); var msg = successful ? 'successful' : 'unsuccessful'; console.log('Copying text command was ' + msg); a_flash_message({\"status\": \"success\", \"msg\": \"The permalink to the job was copied to your clipboard. Just use the paste command (Ctrl+V or ⌘+V) to get the link.\"}) } catch (err) { console.log('Oops, unable to copy'+err); } document.body.removeChild(textArea); }© 2021 RezScore. Use of our site is governed by terms and conditions.Privacy PolicyTerms of UseAPI"
