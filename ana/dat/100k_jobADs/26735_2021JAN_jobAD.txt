"Uruchamianie kontenera jako użytkownik non-root w DockerzeNasza strona używa cookies. Korzystając ze strony, wyrażasz zgodę na używanie cookies, zgodnie z aktualnymi ustawieniami przeglądarki. RozumiemToggle navigationOferty pracyProfile firmSzkoleniaBadanie ITWeź udział!Blog ITZalogujJako specjalista ITJako pracodawcaDla pracodawcy×Załóż konto na BulldogjobDzięki niemu będziesz mógł subskrybować wybrane treści od Bulldogjob, dostaniesz pełny dostęp do Raportu Społeczności IT 2020 i dostaniesz opcję szybkiej aplikacji.LinkedinFacebookGoogleUżyj zewnętrznego serwisu, by utworzyć lub zalogować się na konto. Zakładając konto akceptujesz regulamin serwisu.Uruchamianie kontenera jako użytkownik non-root w DockerzeLuc Juggery Freelance Docker & Kubernetes trainerPoznaj kilka sposobów na uruchomienie kontenera w Dockerze jako użytkownik, który nie jest rootem.05.08.20208 minUruchamianie procesów w kontenerze za pomocną użytkownika, który nie jest rootem, jest dobrą praktyką. Odbywa się to zwykle za pomocą instrukcji USER w pliku Dockerfile, ale brak tej instrukcji nie musi jednak oznaczać, że proces jest uruchamiany jako root.Dlaczego to dobra praktyka?Root w kontenerze to ten sam (uid 0), który ma maszynie hosta. Jeśli użytkownik zdoła wyjść z aplikacji działającej jako root w kontenerze, może on wtedy uzyskać dostęp do hosta z tym samym użytkownikiem root.Dostęp byłby jeszcze łatwiejszy do uzyskania, gdyby kontener był uruchamiany z niewłaściwymi flagami lub miał zamontowane foldery hosta z uprawnieniami do zapisu/odczytu.Uruchamianie kontenera MongoDBPolecam wypróbowanie Play With Docker (PWD). Jest to platforma, na której możesz przetestować wszystkie najnowsze funkcje Dockera bez konieczności instalowania czegokolwiek lokalnie. Kiedy już jesteś w PWD, możesz utworzyć instancję i poczujesz się tak, jakby się było w powłoce wirtualki Linuksa.Uwaga: pod maską będziesz mieć powłokę, ale w kontenerze Alpine, w którym jest zainstalowany demon Dockera. Nazywa się on DinD, czyli dla Dockera w Dockerze, ponieważ demon w kontenerze działa sam. W terminalu uruchommy kontener oparty na obrazie MongoDB:[node1] (local) root@192.168.0.13 ~$ docker container run -d -p 27017:27017 --name mongo mongo:4.08cce38822a23bbacb5349c5af63c50f1d2e371029f5b6332b1144fcc4f8cb723Sprawdź na komputerze hosta, który użytkownik uruchamia proces mongod:[node1] (local) root@192.168.0.13 ~$ ps aux | grep mongo1143 999 0:00 mongod --bind_ip_allZ powyższego wyniku można wywnioskować, że użytkownik zidentyfikowany przez uid 999 to ten, który jest właścicielem procesu mongod. Sprawdźmy istniejących użytkowników na hoście:$ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinnews:x:9:13:news:/usr/lib/news:/sbin/nologinuucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologinoperator:x:11:0:operator:/root:/bin/shman:x:13:15:man:/usr/man:/sbin/nologinpostmaster:x:14:12:postmaster:/var/spool/mail:/sbin/nologincron:x:16:16:cron:/var/spool/cron:/sbin/nologinftp:x:21:21::/var/lib/ftp:/sbin/nologinsshd:x:22:22:sshd:/dev/null:/sbin/nologinat:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologinsquid:x:31:31:Squid:/var/cache/squid:/sbin/nologinxfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologingames:x:35:35:games:/usr/games:/sbin/nologinpostgres:x:70:70::/var/lib/postgresql:/bin/shcyrus:x:85:12::/usr/cyrus:/sbin/nologinvpopmail:x:89:89::/var/vpopmail:/sbin/nologinntp:x:123:123:NTP:/var/empty:/sbin/nologinsmmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologinguest:x:405:100:guest:/dev/null:/sbin/nologinnobody:x:65534:65534:nobody:/:/sbin/nologindockremap:x:100:101:Linux User,,,:/home/dockremap:/bin/falseNie ma użytkownika z identyfikatorem uid 999, dlatego w poprzednim poleceniu nie można dopasować żadnej nazwy użytkownika.DockerfileOto Dockerfile, którego użyłem do stworzenia obrazu bazy danych MongoDB 4.0:Nie ma w nim instrukcji USER, ale widzimy, że w obrazie tworzony jest użytkownik mongodb, który następnie jest dodawany do grupy o tej samej nazwie utworzonej w tym samym czasie. Służy do tego poniższa instrukcja:RUN groupadd -r mongodb && useradd -r -g mongodb mongodbPonieważ nie jest to określone w instrukcji USER w pliku Dockerfile, użytkownik ten nie jest używany podczas tworzenia obrazu; wszystko odbywa się z rootem. Ale jeśli przyjrzymy się bliżej końcowi pliku Dockerfile, zobaczymy instrukcje ENTRYPOINT i CMD.ENTRYPOINT [\"docker-entrypoint.sh\"]CMD [\"mongod\"]Jak zapewne wiesz, połączenie tych dwóch instrukcji definiuje polecenie, które jest wykonywane, gdy uruchamiamy kontener z obrazu mongo. Polecenie wygląda wtedy następująco:$ docker-entrypoint.sh mongodENTRYPOINTPrzyjrzyjmy się teraz kodowi pliku docker-entrypoint.sh:Początek poniższego kodu jest bardzo interesujący. Jest to część, w której użytkownik wykonujący proces zmienia się z roota na mongodb dzięki narzędziu gosu.# allow the container to be started with ` — user# all mongo* commands should be dropped to the correct userif [[ “$originalArgOne” == mongo* ]] && [ “$(id -u)” = ‘0’ ]; thenif [ “$originalArgOne” = ‘mongod’ ];then chown -R mongodb /data/configdb /data/dbfi# make sure we can write to stdout and stderr as “mongodb”# (for our “initdb” code later; see “ — logpath” below)chown --dereference mongodb “/proc/$$/fd/1” “/proc/$$/fd/2” || :exec gosu mongodb “$BASH_SOURCE” “$@”fiUwaga: w Dockerfile widać, że narzędzie gosu jest jednym z pakietów instalowanych podczas tworzenia obrazu.Obrazy oparte na UbuntuPierwsza instrukcja w pliku Dockerfile wskazuje na to, że ubuntu:xenial jest obrazem podstawowym, z którego tworzony jest obraz mongo. Uruchomimy teraz interaktywny kontener oparty na Ubuntu i wylistujemy istniejących użytkowników:$ docker container run -ti ubuntu:xenialroot@9e367c3d9ca1:/# cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false_apt:x:104:65534::/nonexistent:/bin/falseUtwórzmy teraz użytkownika i grupę:root@9e367c3d9ca1:/# groupadd -r mygrp && useradd -r -g mygrp myuseri jeszcze raz wymienimy użytkowników:root@9e367c3d9ca1:/# cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false_apt:x:104:65534::/nonexistent:/bin/falsemyuser:x:999:999::/home/myuser:Widzimy nowego użytkownika utworzonego jako uid 999, który jest numerem UID pierwszego użytkownika utworzonego z nowego obrazu ubuntu:xenial. UID ten jest używany do uruchamiania procesu mongod, jak widzieliśmy wcześniej. Przypomnijmy:[node1] (local) root@192.168.0.13 ~$ ps aux | grep mongo1143 999 0:00 mongod --bind_ip_allObrazy oparte na AlpineObrazy aplikacji nie muszą być oparte na ubuntu:xenial. Wiele z nich bazuje na Alpine (niewielka dystrybucja nastawiona na bezpieczeństwo). Dodajmy nowego użytkownika ze świeżego kontenera Alpine i sprawdźmy jego uid.$ docker container run -ti alpine:3.8/ # adduser -D myuser/ # cat /etc/passwdroot:x:0:0:root:/root:/bin/ashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinnews:x:9:13:news:/usr/lib/news:/sbin/nologinuucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologinoperator:x:11:0:operator:/root:/bin/shman:x:13:15:man:/usr/man:/sbin/nologinpostmaster:x:14:12:postmaster:/var/spool/mail:/sbin/nologincron:x:16:16:cron:/var/spool/cron:/sbin/nologinftp:x:21:21::/var/lib/ftp:/sbin/nologinsshd:x:22:22:sshd:/dev/null:/sbin/nologinat:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologinsquid:x:31:31:Squid:/var/cache/squid:/sbin/nologinxfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologingames:x:35:35:games:/usr/games:/sbin/nologinpostgres:x:70:70::/var/lib/postgresql:/bin/shcyrus:x:85:12::/usr/cyrus:/sbin/nologinvpopmail:x:89:89::/var/vpopmail:/sbin/nologinntp:x:123:123:NTP:/var/empty:/sbin/nologinsmmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologinguest:x:405:100:guest:/dev/null:/sbin/nologinnobody:x:65534:65534:nobody:/:/sbin/nologinmyuser:x:1000:1000:Linux User,,,:/home/myuser:Jak widać, identyfikator pierwszego użytkownika w obrazie alpine to 1000, co różni się od uid 999, czyli obrazu ubuntu. Jeśli dodamy użytkownika w obrazie Alpine i uruchomimy proces z tym użytkownikiem (na przykład używając instrukcji USER w pliku Dockerfile), zobaczymy uid 1000 jako właściciela procesu. Spróbujmy.Użyjmy prostego pliku Dockerfile, który dodaje użytkownika do obrazu Alpine i definiuje podstawowe polecenie 1000 command.FROM alpine:3.8RUN adduser -D myuserUSER myuserENTRYPOINT [“sleep”]CMD [“1000”]Zbudujmy obraz:$ docker image build -t sleep:1.0 .Sending build context to Docker daemon 1.775MBStep 1/5 : FROM alpine:3.83.8: Pulling from library/alpine4fe2ade4980c: Pull completeDigest: sha256:621c2f39f8133acb8e64023a94dbdf0d5ca81896102b9e57c0dc184cadaf5528Status: Downloaded newer image for alpine:3.8— -> 196d12cf6ab1Step 2/5 : RUN adduser -D myuser— -> Running in a7474167f27dRemoving intermediate container a7474167f27d— -> 7a17f0862780Step 3/5 : USER myuser— -> Running in b0a7eea711a4Removing intermediate container b0a7eea711a4— -> d63533ce5be1Step 4/5 : ENTRYPOINT [“sleep”]— -> Running in f0dfc3ea4495Removing intermediate container f0dfc3ea4495— -> 763dd8ac4f40Step 5/5 : CMD [“1000”]— -> Running in 14db1ea262f9Removing intermediate container 14db1ea262f9— -> 978294e76184Successfully built 978294e76184Successfully tagged sleep:1.0Uruchom następnie kontener z nowo utworzonego obrazu:[node1] (local) root@192.168.0.8 ~$ docker container run -d sleep:1.0534e340780a89b3a86917aff2c20405dadbd7d50cfe5cb03e9cb6786a0517f21Jeśli sprawdzimy właściciela procesu sleep w hoscie, to zobaczymy, że należy on do użytkownika uid 1000, czyli tego, który stworzył obraz.[node1] (local) root@192.168.0.8 ~$ ps aux | grep sleep1181 1000 0:00 sleep 1000PodsumowanieMam nadzieję, że powyższe przykłady pomogą w zrozumieniu kilku sposobów, na które można uruchomić kontenerem z użytkownikiem, który nie jest rootem — niezależnie od tego, czy robimy to poprzez instrukcję USER w Dockerfile, czy zmianę użytkownika podczas uruchamiania (zazwyczaj robi się to przy pomocy skryptu entrypoint).Jest jeszcze jeden sposób, którego nie poruszyliśmy — użycie flagi --user.Oryginał tekstu w języku angielskim możesz przeczytać tutaj.0Rozpocznij dyskusjęLubisz dzielić się wiedzą i chcesz zostać autorem?Podziel się wiedzą z 160 tysiącami naszych czytelnikówDowiedz się więcej×Mam już panel pracodawcyZapamiętaj mnie Zapomniałeś?ZalogujChcę utworzyć bezpłatny panel pracodawcyProsimy o podanie danych firmy, aby łatwo posługiwać się narzędziami BulldogjobUtwórz bezpłatny panel pracodawcy×Zapomniałeś hasła?Zresetuj moje hasło×Zaloguj się do konta BulldogjobLinkedinFacebookGoogleUżyj zewnętrznego serwisu, by utworzyć konto Bulldogjob i móc łatwo aplikować.O nas Polityka prywatności Regulamin Kontakt English versionDla ludzi ITOferty pracy Firmy IT Blog IT Top Tech Employer Szkolenia Badanie IT 2020Dla pracodawcówOferty pracy Employer Branding IT #MakeAnImpact Job Offers Employer Branding Blog HR TechZnajdź nas na"
